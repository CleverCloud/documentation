{"/developers/api/":{"data":{"":" Automate your workflows and connect your services to Clever Cloud using its API. How to use our APILearn more about Clever Cloud API, endpoints, auth and how to access it from multiple tools. Base v2 EndpointsOur base API endpoints with users, organisations, applications, add-ons, etc. New v4 EndpointsMore recent API endpoints with billing, deployments, load balancers, logs, etc. "},"title":"API"},"/developers/api/howto/":{"data":{"":"The Clever Cloud console and clever-tools are built on top of an API that\nallows you to manage your account and products. This article will explain how\nto connect to this API and use it.","http-calls#HTTP calls":"Authentication Clever Cloud API has an OAuth1 based authentication.\nThere are 3 supported methods for the signature: PLAINTEXT, HMAC-SHA1 and HMAC-SHA512.\nWhile PLAINTEXT is way easier for testing, you should use HMAC-SHA512 when it comes to production. This ensures that the request is totally verified.\nWe have a JavaScript client on GitHub where you can find a lot of informations. Especially in the esm/login.js file\nThis client is being used by our web Console and CLI. Also, the Console gives you a lot of information in the “Network” panel of the devtools. If you’re stuck, this is one way for debugging.\nFor the Authorization header, make sure to have something like:\nAuthorization: OAuth key=\"value\", key2=\"value2\" The OAuth and doubles quotes around values are mandatory.\nCreate consumers tokens You need to create an OAuth consumer token in the Clever Cloud console.\nA link Create an oauth consumer is available under your organization’s addons list.\nAll created consumers will appear below that link, like your applications and addons.\nThese consumers allow you to register an application. By creating a consumer, users will be able to grant (or decline) privileges for your application.\nFor example, the Clever Cloud Console is using an oauth consumer. You (most of the time) give it full access to manage your account.\nYou need to set a callback URL, this is the url your user will be redirected to after he has been authenticated.\nGet a request token You have to make a POSTrequest to get a request token to the API.\nGet the authorization URL Ask the API for the authorization URL and go to this URL with a browser. Log in with your account and it will send you to the callback URL.\nGet the verifier token In the callback URL, you have the verifier token:\nhttps://www.example.com/callback?oauth_verifier=\u003cverifierToken\u003e\nWhere \u003cverifierToken\u003e is your token.\nGet the access token Make a POST request to get the access token with your request token and the verifier. You can use this access token to make OAuth1 signed requests.\nMore information about OAuth dance.\nThis seems cumbersome, is there an easier way? Yes the OAuth dance can be complicated, we created a small application that you can deploy on Clever Cloud. It will automate most of the pain away from you.\nThe code and tutorial are on https://github.com/CleverCloud/oauth-consumer-server.\nAPI endpoints documentation All the API endpoints are referenced in a swagger documentation. The base URL for the API is V2.\nBase v2 EndpointsOur base API endpoints with users, organisations, applications, add-ons, etc. New v4 EndpointsMore recent API endpoints with billing, deployments, load balancers, logs, etc. ","websocket-api-requests#WebSocket API requests":"Connection protocol Clever Cloud API can handle WebSocket-Security requests for the logs or events. To connect to a WebSocket API URL follow this guide.\nTake a URL in the API for the WebSocket. Ex: https://api.clever-cloud.com/v2/events/event-socket Sign the OAuth request with this URL. Replace https:// by wss:// wss://api.clever-cloud.com/v2/events/event-socket Connect to this URL in WebSocket. When the WebSocket connection is opened, you need to send the OAuth1 header in this format :\n{ \"message_type\": \"oauth\", \"authorization\": \"\u003coauth_header\u003e\" } You need to replace \u003coauth_header\u003e by the signed OAuth1 header.\nWebSocket endpoints Logs This endpoint allows you to receive real-time logs of an application via WebSocket.\nEvents This endpoint allows you to receive a stream of events emitted on your account.\nEvents like git push, add or remove an application / addon, deployments success / failed are available."},"title":"Clever Cloud API Overview"},"/developers/api/v4/":{"data":{"":"Clever Cloud provides a public REST API used by its own services and customers, known as /v2. As our platform evolves, we’re progressively moving to /v4 endpoints, adding functionalities, with a more modern approach:\nhttps://api.clever-cloud.com/v4/ While the documentation moves towards completion, this page presents the most useful endpoints and example requests available now.\nℹ️ Each query response contains a Sozu-Id. If you need help from our support team, it can help to provide it. ","billing#Billing":" /v4/billing/organisations/{orgid}/invoices /v4/billing/organisations/{orgid}/invoices/{invoiceid} /v4/billing/organisations/{orgid}/invoices/{invoiceid}.html /v4/billing/organisations/{orgid}/invoices/{invoiceid}.pdf Type: GET You can use optional parameters to filter it:\nParameter Type Comment limit int since string ISO 8601 formatted until string ISO 8601 formatted Example response, for each invoice:\n[ { \"invoice_number\": \"\", \"kind\": \"\", \"owner_id\": \"\", \"address\": { \"address_id\": \"\", \"owner_id\": \"\", \"name\": \"\", \"company\": \"\", \"address\": \"\", \"city\": \"\", \"zipcode\": \"\", \"country_alpha2\": \"\", \"vat_number\": \"\", \"vat_percent\": float, \"customer_cost_center\": \"\", \"customer_purchase_order\": \"\" }, \"emission_date\": \"\", \"pay_date\": \"\", \"status\": \"\", \"currency\": \"\", \"price_factor\": float, \"discount\": float, \"vat_percent\": float, \"total_tax_excluded\": { \"currency\": \"\", \"amount\": float, \"amount_formatted\": \"\", \"default_display\": \"\" }, \"total_tax\": { \"currency\": \"\", \"amount\": float, \"amount_formatted\": \"\", \"default_display\": \"\" }, \"category\": \"\", \"payment_provider\": \"\", \"transaction_id\": \"\", \"customer_order_id\": \"\" }, {...} ] ","deployments#Deployments":" /v4/orchestration/organisations/{ownerId}/applications/{applicationId}/deployments /v4/orchestration/organisations/{ownerId}/applications/{applicationId}/deployments/{deploymentId} Type: GET Example response, for each deployment:\n[ { \"id\": \"\", \"ownerId\": \"\", \"applicationId\": \"\", \"startDate\": \"\", \"state\": \"\", \"steps\": [ { \"state\": \"\", \"date\": \"\" }, { \"state\": \"\", \"date\": \"\" }, { \"state\": \"\", \"date\": \"\" } ], \"version\": { \"commitId\": \"\" }, \"origin\": { \"action\": \"\", \"cause\": \"\", \"source\": \"\", \"authorId\": \"\", \"constraints\": [ \"\" ], \"priority\": \"\" }, \"hasDedicatedBuild\": boolean }, {...} ] ","instances#Instances":" /v4/orchestration/organisations/{ownerId}/applications/{applicationId}/instances Type: GET You can use optional parameters to filter it:\nParameter Type Comment deploymentId string limit int excludeDeleted boolean since string ISO 8601 formatted until string ISO 8601 formatted order string ASC or DESC includeState string case sensitive, repeated excludeState string case sensitive, repeated Example response, for each instance:\n[ { \"id\": \"\", \"ownerId\": \"\", \"applicationId\": \"\", \"deploymentId\": \"\", \"name\": \"\", \"flavor\": \"\", \"index\": int, \"state\": \"\", \"creationDate\": \"\", \"deletionDate\": \"\", \"network\": { \"ip\": \"\", \"port\": int }, \"isBuildVm\": boolean }, {...} ] ","load-balancers#Load Balancers":" /v4/load-balancers/organisations/{ownerId}/applications/{applicationId}/load-balancers/default Type: GET Example response:\n[ { \"id\": \"\", \"name\": \"\", \"zoneId\": \"\", \"dns\": { \"cname\": \"\", \"a\": [] } } ] ","logs#Logs":" /v4/logs/organisations/{ownerId}/applications/{applicationId}/logs Type: GET Answers with logs in a SSE (Server-Sent Events) stream. You can use optional parameters to filter it:\nParameter Type Comment deploymentId string instanceId string since string ISO 8601 formatted until string ISO 8601 formatted field string Allow to get only asked fields, repeated filter string Case insensitive contains type search limit int64 Minimum: 1 service string systemd service name, repeated (default: bas and bas-deploy, can be all) throttleElements int Maximum elements read per throttlePerInMilliseconds, default 100 throttlePerInMilliseconds long Default 300 ","products-zones#Products zones":" /v4/products/zones /v4/products/zones/{name} Type: GET Example response, for each zone:\n[ { \"id\": \"\", \"name\": \"\", \"country\": \"\", \"countryCode\": \"\", \"city\": \"\", \"displayName\": \"\", \"lat\": float, \"lon\": float, \"outboundIPs\": [], \"tags\": [] }, {...} ] ","pulsar-policies#Pulsar policies":" /v4/addon-providers/addon-pulsar/addons/{addon-id}/storage-policies Type: GET/PATCH Define or get offload/retention policies of a Pulsar add-on. Retention is how long messages are kept in the topic. Offload is how long messages are kept in the hot storage (NVMe SSD) before being moved to Cellar object storage (S3 compatible, HDD).\nExample query/response:\n{ \"retentionPolicies\": { \"sizeInMB\": number, \"durationInDays\": number }, \"offloadPolicies\": { \"durationInDays\": number, \"sizeInMB\": number } } A null value means an infinite retention or no offload."},"title":"APIv4 Reference"},"/developers/changelog/":{"data":{"":"Additions and changes to the Clever Cloud platform.\nFeed "},"title":"Changelog"},"/developers/doc/":{"data":{"":" Everything you need to know for your Clever Cloud journey Getting StartedGet ready to deploy and app in 5 minutes DevelopBest practices on Cloud deployments, sheduling jobs, etc. AdministrateAccess metrics, logs, manage domains, set up scalability… DeployDeploy any app on Clever Cloud. Connect an add-onConnect a managed database and set up cloud storage. Find helpLost? See how to get help. MarketplaceIntegrate your own service on Clever Cloud Clever Tools CLIDeploy and manage your applications and dependencies from your terminal. CI/CDDeploy to Clever Cloud from GitHub or GitLab. ReferencesList of environment variables your can use on Clever Clever Cloud, common configuration an all instances… User AccountSet up your account, collaborate and manage permissions. BillingFind invoices, analyse consumption and understand pricing. ContributeSee how to contribute to this documentation. See our step by step tutorials Find your framework Deploy your favorite framework with our step by step guides.\nStarter tutorials Make a starter app and deploy it on Clever Cloud.\nAdd-ons guides Take your dependencies management to the next level."},"title":"Documentation"},"/developers/doc/account/":{"data":{"":" Create an account Manage your account Manage an organization Roles and organizations Manage notifications Manage SSH keys Delete an account "},"title":"User Account"},"/developers/doc/account/administrate-organization/":{"data":{"":"After you create an account, your account is tied to a first organization named as ‘Personal Space’. You can use the Personal Space for individual projects or personal use, but only you as a user can access it.\nTo collaborate with others, manage team access, or handle separate billing for a group, you need to create an organization.","administrate-an-organization#Administrate an organization":"By clicking on you application name, a new left menu open.\nOverview: Simple metrics about your applications within this organization Information: See and edit organization’s name, description, billing address and image. That also is where you can delete your organization. Members: Manage team members. Team members must have a Clever Cloud account. On this page you can add and remove team members. You can also edit their roles to manage their permissions. Shared software: It’s a section displaying third party software, like Heptapod Payment methods: Manage provisioning of your organization, manage credit cards and add here potential discount codes or coupons. Invoices: See your recent invoices. Notifications: Manage email notifications and web hooks for team members. Consumption: See metrics about your organization’s consumptions. ","create-an-organization#Create an organization":"In the Clever Cloud Web Console, select Add an organization in the left menu.\nGive it a name, description, specify if it’s a company and add billing information.","delete-an-organization#Delete an organization":"In the Information page, click the remove this organization button. You’re then prompted to enter the name of the organization to confirm the organization deletion."},"title":"Manage an Organization"},"/developers/doc/account/create-account/":{"data":{"":"","email#Email":"","github#GitHub":"The API of Clever Cloud uses OAuth 1 to perform authentication actions. There are two ways to signup to Clever Cloud: email or GitHub login.\nEmail This kind of auth requires a valid and non-temporary disposable e-mail, and a password having at least 6 characters.\nDo not forget to validate your email by clicking the link you will receive.\nGitHub The GitHub signup allows you to create an account or link your existing one to GitHub, in one click.\nThis process asks the following permissions:\nRead your Public Key Read User Repositories The “repository permission” is used to deploy your GitHub apps directly to Clever Cloud, with a simple step.\nIf you need to give access to Clever Cloud’s API to a specific GitHub organization, you can do it here.\nGo to the Clever Cloud Console and select the method you prefer.\n🔐 Two Factor Authentication (2FA) Clever Cloud supports 2FA. You can enable it here: https://console.clever-cloud.com/users/me/authentication\nPlease, backup your recovery codes, we won’t be able to restore access to your account if you lose access to your regular codes."},"title":"Create an Account"},"/developers/doc/account/delete-account/":{"data":{"":"To delete your account:\nOpen the Clever Cloud Web Console. Select Profile in the bottom left menu. Select Delete my account in the top menu of the freshly opened page. Click the red Send me a confirmation email button. You will get an email with a link you must click to confirm your account deletion."},"title":"Delete an account"},"/developers/doc/account/manage-account/":{"data":{"":"In the Clever Cloud Web Console, select Profile in the bottom left menu.\nYou see several menu entries.\nInformation: on that page you can edit your name, address, phone number, profile picture, manage the link between your Clever Cloud and GitHub account and select the language of your Clever Cloud web console. Emails: manage your linked email addresses. Authentication: Change your password, enable or turn off Two Factor Authentication. SSH keys: add or remove your SSH keys, manage your GitHub SSH keys if you have linked your GitHub account. Oauth tokens: See and revoke your access tokens Delete my account: Delete your Clever Cloud account "},"title":"Manage your account"},"/developers/doc/account/notifications/":{"data":{"":"The Notifications service allows you to choose the events of interest to you and decide where to send corresponding notifications.","e-mails#E-mails":"Historically and by default, deployment result e-mails (deployment succeeded or failed) were always sent to the owners of an application, namely the user themselves or the organization’s members.\nTo disable the deployment result e-mails or restrict it to only some applications:\nGo in Organization Manager \u003e Notifications panel. Delete the hook named Default deployment result e-mails. Add a new one. Set it to your liking. In the future, this service will also handle credits warning notifications and others to come. You will be able to choose wether or not to receive an e-mail and/or for these events to be forwarded to a web service via a webhook.","webhooks#Webhooks":"From Wikipedia:\nA webhook in web development is a method of augmenting or altering the behavior of a web page, or web application, with custom callbacks. These callbacks may be maintained, modified, and managed by third-party users and developers who may not necessarily be affiliated with the originating website or application.\nIn practical terms, this means that you can choose to receive all deployment result events on an endpoint of your application without having to listen to all events via the Websocket API. No more lost events and having to reconnect to the websocket if and when it fails.\nTo create a webhook stay on the Notifications panel:\nClick on Webhooks button at the top of the Notifications window. Add a new one. Choose the URL which will receive the data through a POST request and the format it will be sent as. As of now, you can choose between 3 formats: raw, slack and flowdock. The raw format is the Clever Cloud internal representation of events, it is identical to events sent by the Websocket API. Slack and Flowdock formats are to be used with the corresponding services: Slack and Flowdock.\nYou can also choose which events you want and restrict notifications to a list of applications and addons.\nExample: Slack deployment results Webhook First, you will have to create the Incoming WebHooks integration on Slack:\nLet’s go to the custom integrations page, once there go to Incoming WebHooks.\nYou will find an Add Configuration button on the left which will take you to the page where you need to configure the integration. You just need to select the channel where you want the notifications to be posted, then it will show you the Webhook URL, it starts with https://hooks.slack.com/services/. Copy that URL.\nNow, let’s create the Webhook!\nYou should already have a tab opened on the Webhook creation page; if it’s not the case, follow the Webhooks section above.\nThere, you just need to paste the URL you copied before in the Webhook URL field, then select Result of deployments (success/fail) in the Only send notification for these events menu.\nYou can now push your application or restart it and you will see the result of the deployment in your Slack channel."},"title":"Notifications"},"/developers/doc/account/organizations/":{"data":{"":"In order to improve team collaboration between developers, accountants, managers and admins, we have introduced organizations. Each organization has its own billing, leaning that you can create as much as orgnanization you’d like. Most use-cases include the billing separation of private and business applications, several businesses or business units (within one company, for instance).\nOnce you create an organization, you can add collaborators and assign them roles which gives them rights.\nEach organization have its own identifier looking like orga_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.","add-an-organization#Add an organization":"Organization names are unique. It means that you cannot use an already used organization name.\nIn order to add an organization, just click on “Add an organization” in the top left sidebar.","roles-and-privileges#Roles and privileges":"The table below describes rights assigned to roles:\nRole Admin Manager Developer Accountant Add Member ✓ ✓ Remove Member ✓ ✓ Add Application ✓ ✓ ✓ Remove Application ✓ ✓ Add / Remove add-on ✓ ✓ Edit Organization ✓ ✓ Delete Organization ✓ Access Bills \u0026 Receive Invoices ✓ ✓ Access Repositories ✓ ✓ ✓ "},"title":"Roles and Organizations"},"/developers/doc/account/ssh-keys-management/":{"data":{"":"You need to add a SSH key to your Clever Cloud’s account to deploy via Git. SSH keys are used to establish a secure connection between your computer and Clever Cloud. A user can have multiple SSH keys.\n⚠️ Accounts cannot share the same SSH key. A SSH key is used to identify the actions made by a user and must be associated with only one account. If a key is used by more than one account, a warning will be displayed in the console. ","add-a-fidou2f-ssh-key#Add a FIDO/U2F SSH key":"Since OpenSSH 8.2, generated keys can require a security device compatible with the FIDO/U2F standards (such as Nitrokeys, Solokeys or Yubikeys) to complete the authentication process. To generate such key, plug the device to your machine and enter this command:\nssh-keygen -t ed25519-sk -C \"your_email@youremail.com\" Under macOS, you may need to install Homebrew, an OpenSSH version including full FIDO/U2F support, and use ECDSA key format:\nbrew install openssh ssh-keygen -t ecdsa-sk -C \"your_email@youremail.com\" ℹ️ You can use options related to security devices adding them with the -O argument (for example -O resident). They’re detailed here. ","add-a-public-ssh-key-on-clever-cloud#Add a public SSH key on Clever Cloud":"From the Console To declare your public SSH Key on Clever Cloud, in the Console’s left navigation bar, go in “Profile” and in the “SSH Keys” tab.\nAdd the key by entering a name and the public SSH key. The key is the entire contents of the id_[ed25519/rsa].pub file including the id_ed25519/ssh-rsa part and your email.\n⚠️ Your public SSH key must be associated with only one account. If you see “access denied” or “password:” when you push on Clever Cloud, your SSH keys may be invalid or not available on Clever Cloud. Please check that you SSH key is present and valid in your profile.\nThrough CC API or Clever cURL You can also add a public SSH key from the command line with a simple cURL request to our API. The simpler way to do that is to use our CLI, Clever Tools, and its clever curl command once logged in:\nclever curl -X PUT -H \"Content-Type: application/json\" --data \"\\\"$(cat ~/.ssh/yourkey.pub)\\\"\" https://api.clever-cloud.com/v2/self/keys/newkeyname ","check-your-ssh-configuration#Check your SSH configuration":"To check if your SSH key is correctly configured, you can try to run:\nssh git@push.clever-cloud.com The first time, you may have to type “yes” to continue.\nIf you see:\ngit@push-par-clevercloud-customers.services.clever-cloud.com: Permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. This error can occur when your SSH agent has not be configured to use your SSH key.\nMost of the time, it is due to the presence of multiple SSH keys generated by 3rd party software, like GitHub for macOS. To fix this you will need to configure your SSH agent.","checking-of-existing-ssh-keys#Checking of existing SSH keys":"GitHub account and SSH key on Clever Cloud If your account is linked to GitHub, a panel with your GitHub SSH keys will appear in the “SSH Keys” tab. You can add any key already present in your GitHub account by clicking on the import button next to it.\nFinding SSH key locally You may already have an SSH key and so do not need to generate a new one. To check if you have one, follow these steps:\nLinux and macOSWindows Whether you use macOS or Linux, open your Terminal application. Run cd ~/.ssh/ in your Terminal. If the folder exists, run ls and check if a pair of key exists : id_ed25519 and id_ed25519.pub. Using id_rsa and id_rsa.pub is fine too. We are just advocating the use of ed25519.\nSmaller to copy and way stronger than 2048-bit RSA keys.\nIf you can find them, you do not need to generate a new one, simply go to the following “Add your key on Clever Cloud” part! If you don’t have it, download Git for Windows and install it. Run Git Bash (from the Start Menu or from the Explorer with the contextual menu (right click)). Run cd ~/.ssh/ in your Terminal. If the folder exists, run ls and check if a pair of key exists : id_ed25519 and id_ed25519.pub or id_rsa and id_rsa.pub. We would recommend using ed25519 keys. Smaller to copy and way stronger than 2048-bit RSA keys. If you can find them, you do not need to generate a new one, simply go to the following “Add your key on Clever Cloud” part! ","configure-your-ssh-agent#Configure your SSH agent":"You can add those lines into your ~/.ssh/config file. It tells your SSH agent which key to pick for a given hostname. Update your Clever Cloud SSH key path accordingly.\n~/.ssh/configHost push-*.services.clever-cloud.com User git IdentityFile ~/.ssh/id_ed25519_clevercloud IdentitiesOnly yes ℹ️ Need help about SSH keys?\nContact us at support@clever-cloud.com or you can read more about SSH Keys on the official Git Documentation ↗. ","how-to-add-your-ssh-key-on-clever-cloud#How to add your SSH key on Clever Cloud?":" Generate the key In your Terminal, enter the following bash line:\nssh-keygen -t ed25519 -C \"your_email@youremail.com\" This command creates a new SSH key using the provided email, so that the owner of the key can be identified.\nSave the key When prompted in which file you want to save the key, just press enter.\nIf it says that the file already exists, enter n for no.\nType ls, verify the presence of the file and jump to Add your SSH key on Clever Cloud.\nEnter a passphrase When asked, enter a passphrase:\nGenerating public/private ed25519 key pair. Enter file in which to save the key (/your_home_path/.ssh/id_ed25519): # Now you should enter a passphrase. Enter passphrase (empty for no passphrase): [Type a passphrase] Enter same passphrase again: [Type passphrase again] Which should give you something like this:\nYour identification has been saved in /your_home_path/.ssh/id_ed25519. Your public key has been saved in /your_home_path/.ssh/id_ed25519.pub. The key fingerprint is: 01:0e:e5:2d:ab:98:d6:17:a1:6d:f0:68:9f:d0:a2:db your_email@youremail.com ","use-a-private-ssh-key-in-an-application#Use a private SSH key in an application":"If you want to clone a repository from a private repository, you can add a private SSH key to an application by creating a folder clevercloud at the root of your application and creating the file clevercloud/ssh.json with the following content:\nclevercloud/ssh.json{ \"privateKeyFile\": \"path/to/file\" } Of course you need to provide a valid path to a file that contains a valid key and that you will push on the Clever Cloud git remote."},"title":"SSH Keys"},"/developers/doc/addons/":{"data":{"":"Connect your application to an add-on:\nMySQLYour self-hosted managed relational database PostgreSQLThe not-only-SQL database, self hosted and managed MongDBThe NoSQL document-oriented database Elastic StackDeploy your Elastic Stack in one click FS BucketExternal File System for your apps CellarObject storage RedisManaged in-memory database Config ProviderMore freedom to manage, import and inject your credentials PulsarOpen-source, distributed messaging and streaming platform built for the cloud. Beta JenkinsThe leading open source automation server MatomoBest Google Analytics alternative HeptapodThe friendly fork of GitLab Community Edition that adds support for Mercurial. KeycloakAuthentication to applications and secure services with minimum effort. Beta Materia KVServerless databases with built-in compatibility layers. Alpha MetabaseThe simplest, fastest way to get business intelligence and analytics to everyone in your company. Beta "},"title":"Add-ons"},"/developers/doc/addons/cellar/":{"data":{"":" Cellar is a S3-compatible online file storage web service. Use it with your favorite S3 client, or download the s3cmd configuration file from the add-on dashboard in Clever Cloud console. ","cors-configuration#CORS Configuration":"You can set a CORS configuration on your buckets if you need to share resources on websites that don’t have the same origin as the one you are using.\nEach CORS configuration can contain multiple rules, defined in an XML document:\n\u003cCORSConfiguration\u003e \u003cCORSRule\u003e \u003cAllowedOrigin\u003econsole.clever-cloud.com\u003c/AllowedOrigin\u003e \u003cAllowedMethod\u003ePUT\u003c/AllowedMethod\u003e \u003cAllowedMethod\u003ePOST\u003c/AllowedMethod\u003e \u003cAllowedMethod\u003eDELETE\u003c/AllowedMethod\u003e \u003cAllowedHeader\u003e*\u003c/AllowedHeader\u003e \u003cExposeHeader\u003eETag\u003c/ExposeHeader\u003e \u003c/CORSRule\u003e \u003cCORSRule\u003e \u003cAllowedOrigin\u003e*\u003c/AllowedOrigin\u003e \u003cAllowedMethod\u003eGET\u003c/AllowedMethod\u003e \u003cMaxAgeSeconds\u003e3600\u003c/MaxAgeSeconds\u003e \u003c/CORSRule\u003e \u003c/CORSConfiguration\u003e Here this configuration has two CORS rules:\nThe first rule allows cross-origin requests from the console.clever-cloud.com origin. Allowed cross-origin request methods are PUT, POST and DELETE. Using AllowedHeaders * allows all headers specified in the preflight OPTIONS request in the Access-Control-Request-Headers header. At the end, the ExposeHeader allows the client to access the ETag header in the response it received. The second one allows cross-origin GET requests for all origins. The MaxAgeSeconds directive tells the browser how much time (in seconds) it should cache the response of a preflight OPTIONS request for this particular resource. ℹ️ Updating the CORS configuration replaces the old one\nIf you update your CORS configuration, the new configuration replaces the old one. Be sure to save it before you update it if you ever need to rollback. View and save your current CORS configuration To view and save your current CORS configuration, you can use s3cmd info:\ns3cmd -c s3cfg -s info s3://your-bucket Set the CORS configuration You can then set this CORS configuration using s3cmd:\ns3cmd -c s3cfg -s setcors ./cors.xml s3://your-bucket If you need to rollback, you can either set the old configuration or completely drop it:\ns3cmd -c s3cfg -s delcors s3://your-bucket ","creating-a-bucket#Creating a bucket":"Cellar stores files in buckets. When you create a Cellar add-on, no bucket exists yet.\nFrom Clever Cloud Console Go to Cellar options Click on your Cellar add-on in your deployed services list to see its menu.\nName your bucket From Addon Dashboard, insert the name of your bucket.\nℹ️ Buckets’ names are global for every region. You can’t give the same name to two different buckets in the same region, because the URL already exists in the Cellar cluster on this region. bucket names can’t use underscores (_). Create bucket Click on Create bucket. Your new bucket should appear in the list below.\nWith s3cmd Install s3cmd Install s3cmd on your machine following these recommendations.\nDownload the configuration file Go to your add-on menu in the Clever Cloud console. Under the Addon Dashboard, click the Download a pre-filled s3cfg file. link. This provides you a configuration file that you need to add to your home on your machine.\nCreate a bucket To create a bucket, you can use this s3cmd command:\ns3cmd mb s3://bucket-name The bucket is now be available at https://\u003cbucket-name\u003e.cellar-c2.services.clever-cloud.com/.\n⚠️ ws-* and cf* commands aren’t available with a Cellar add-on. With AWS CLI You can use the official AWS cli with Cellar. Configure the aws_access_key_id, aws_secret_access_key and endpoint.\naws configure set aws_access_key_id $CELLAR_ADDON_KEY_ID aws configure set aws_secret_access_key $CELLAR_ADDON_KEY_SECRET Global endpoint configuration isn’t available, so include the parameter each time you use the aws cli. Here’s an example to create a bucket:\naws s3api create-bucket --bucket myBucket --acl public-read --endpoint-url https://cellar-c2.services.clever-cloud.com To simplify this, you may want to configure an alias like so:\nalias aws=\"aws --endpoint-url https://cellar-c2.services.clever-cloud.com\" ","managing-your-buckets#Managing your buckets":"There are several ways to manage your buckets, find in this section a list of options.\nUsing S3 clients Some clients allows you to upload files, list them, delete them, etc, like:\nCyberduck Filestash This list isn’t exhaustive. Feel free to suggest other clients that you would like to see in this documentation.\nUsing s3cmd command line tools s3cmd allows you to manage your buckets using its commands, after configuring it on your machine\nUploadList You can upload files (--acl-public makes the file publicly readable) with:\ns3cmd put --acl-public image.jpg s3://bucket-name The file is then publicly available at https://\u003cbucket-name\u003e.cellar-c2.services.clever-cloud.com/image.jpg.\nYou can list the files in your bucket, you should see the image.png file:\ns3cmd ls s3://bucket-name Custom domain If you want to use a custom domain, for example cdn.example.com, you need to create a bucket named exactly like your domain:\ns3cmd --host-bucket=cellar-c2.services.clever-cloud.com mb s3://cdn.example.com Then, create a CNAME record on your domain pointing to cellar-c2.services.clever-cloud.com..","policies#Policies":"Cellar allows you to create policies to control the actions on your buckets. Find below two policies examples, and further documentation here.\nPublic bucket policy You can upload all your objects with a public ACL, but you can also make your whole bucket publicly available in read mode. No one can access the write permission without authentication.\n⚠️ This makes all of your bucket’s objects publicly readable. Be careful that there aren’t objects you don’t want publicly exposed. To set your bucket as public, you have to apply the following policy which you can save in a file named policy.json:\n{ \"Id\": \"Policy1587216857769\", \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"Stmt1587216727444\", \"Action\": [ \"s3:GetObject\" ], \"Effect\": \"Allow\", \"Resource\": \"arn:aws:s3:::\u003cbucket-name\u003e/*\", \"Principal\": \"*\" } ] } Replace the \u003cbucket-name\u003e with your bucket name in the policy file. Don’t change the Version field to the current date, keep it as is.\nNow, you can set the policy to your bucket using s3cmd:\ns3cmd setpolicy ./policy.json s3://\u003cbucket-name\u003e 💡 If you encounter errors, you might need to specify the configuration file path:\ns3cmd setpolicy ./policy.json -c path/to/s3cfg.txt s3://\u003cbucket-name\u003e All of your objects should now be publicly accessible.\nIf needed, you can delete this policy by using:\ns3cmd delpolicy s3://\u003cbucket-name\u003e The original ACL should apply to all of your objects after that.\nUser access Cellar doesn’t natively support creating different user accesses for the same add-on. Granting access to your Cellar add-on grants full access to all of your buckets. To grant limited access to a bucket, do the following:\nCreate your main Cellar add-on (we’ll call it Cellar-1) Download Cellar 1 s3cfg file Create a second Cellar add-on (we’ll call it Cellar-2) Get the ADDON ID from Cellar-2 dashboard (it should look like cellar_xxx) Create a policy for Cellar-1 and inject the ADDON ID from Cellar-2 as the user. Now, you can pass Cellar-2 credentials to a third party to grant read-only access to Cellar-1 buckets.\nRead-only policy example This policy example grants read-only access to a bucket for another user, using the preceding procedure.\nread-only-policy.json{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": [ \"s3:GetObject\", \"s3:ListBucket\" ], \"Effect\": \"Allow\", \"Resource\": \"arn:aws:s3:::\u003cbucket-name\u003e/*\", \"Principal\": {\"AWS\": \"arn:aws:iam::cellar_xxx\"} } ] } Replace the \u003cbucket-name\u003e with your bucket name in the policy file.\nSet the policy to your bucket using s3cmd:\ns3cmd --config=\u003cpath/to/s3cfg-file\u003e setpolicy ./policy.json s3://\u003cbucket-name\u003e 💡Download the configuration file from Clever Cloud:\ns3cmd setpolicy ./policy.json -c path/to/s3cfg.txt s3://\u003cbucket-name\u003e ","static-hosting#Static hosting":"You can use a bucket to host your static website, this blog post describes how to. Be aware that SPA applications won’t work because Clever Cloud proxy serving the bucket needs to find an HTML file that match the route.\nFor example if your path is /login you need to have a file login.html because the index.html isn’t the default entrypoint to handle the path.\nYou may use SSG (Static Site Generated) to dynamically generate your content during your build.","troubleshooting#Troubleshooting":" SSL error with s3cmd If you created a bucket with a custom domain name and use s3cmd to manipulate it, you will experience this error:\n[SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure (_ssl.c:1125) \u003cbutton class=“hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50” title=“Copy code”\n\u003cdiv class=\"copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4\"\u003e\u003c/div\u003e \u003cdiv class=\"success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4\"\u003e\u003c/div\u003e The error comes from the host used to make the request, which is build like this %s.cellar-c2.services.clever-cloud.com.\nFor example with a bucket named blog.mycompany.com:\nClever Cloud certificate covers *.cellar-c2.services.clever-cloud.com but not blog.mycompany.com.cellar-c2.services.clever-cloud.com, which triggers the error.\nSolve it by forcing s3cmd to use path style endpoint with the option --host-bucket=cellar-c2.services.clever-cloud.com.\nI can’t delete a bucket/Cellar add-on The buckets need to be empty before you can delete them. Solve this error by deleting the content of your bucket using a bucket management option. ","using-aws-sdk#Using AWS SDK":"To use cellar from your applications, you can use the AWS SDK. You only need to specify a custom endpoint (eg cellar-c2.services.clever-cloud.com).\nNode.jsJavaPythonRuby Node.js\n// Load the AWS SDK for Node.js const AWS = require('aws-sdk'); // Set up config AWS.config.update({ accessKeyId: '\u003ccellar_key_id\u003e', secretAccessKey: '\u003ccellar_key_secret\u003e' }); // Create S3 service object const s3 = new AWS.S3({ endpoint: '\u003ccellar_host\u003e' }); // Create the parameters for calling createBucket const bucketParams = { Bucket : '\u003cmy-bucket-name\u003e', CreateBucketConfiguration: { LocationConstraint: '' } }; // call S3 to create the bucket s3.createBucket(bucketParams, function(err, data) { // handle results }); // Call S3 to list the buckets s3.listBuckets(function(err, res) { // handle results }); /* In order to share access to access non-public files via HTTP, you need to get a presigned url for a specific key * the example above present a 'getObject' presigned URL. If you want to put a object in the bucket via HTTP, * you'll need to use 'putObject' instead. * see doc : https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getSignedUrl-property */ s3.getSignedUrl('getObject', {Bucket: '\u003cYouBucket\u003e', Key: '\u003cYourKey\u003e'}) Java\nImport the AWS SDK S3 library. Maven uses the following dependency to do so :\n\u003cdependency\u003e \u003cgroupId\u003esoftware.amazon.awssdk\u003c/groupId\u003e \u003cartifactId\u003es3\u003c/artifactId\u003e \u003cversion\u003e2.21.35\u003c/version\u003e \u003c/dependency\u003e Make sure to use latest version of the 2.X, new versions are released regularly. See the AWS Java SDK Documentation for more details.\nBelow is a sample Java class, written in Java 21, listing the objects of all buckets :\nimport software.amazon.awssdk.auth.credentials.AwsBasicCredentials; import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider; import software.amazon.awssdk.services.s3.S3Client; import software.amazon.awssdk.services.s3.model.Bucket; import software.amazon.awssdk.services.s3.model.ListObjectsRequest; import java.net.URI; import java.util.List; public class CleverCloudCellarDemoApplication { // replace those values with your own keys, load them from properties or env vars private static final String CELLAR_HOST = \"\"; private static final String CELLAR_KEY_ID = \"\"; private static final String CELLAR_KEY_SECRET = \"\"; public static void main(String[] args) { // initialize credentials with Cellar Key ID and Secret // you can also use `EnvironmentVariableCredentialsProvider` by setting AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY env vars var credentialsProvider = StaticCredentialsProvider.create(AwsBasicCredentials.create(CELLAR_KEY_ID, CELLAR_KEY_SECRET)); // create a client builder var s3ClientBuilder = S3Client.builder() // override the S3 endpoint with the cellar Host (starting with 'https://' .endpointOverride(URI.create(CELLAR_HOST)) .credentialsProvider(credentialsProvider); // initialize the s3 client try (S3Client s3 = s3ClientBuilder.build()) { // list buckets List\u003cBucket\u003e buckets = s3.listBuckets().buckets(); buckets.forEach(bucket -\u003e { // list bucket objects var listObjectsRequest = ListObjectsRequest.builder().bucket(bucket.name()).build(); var objects = s3.listObjects(listObjectsRequest).contents(); // handle results }); } } } See the AWS Java SDK code examples for S3 for more example use cases.\nPython\nTested with Python 3.6.\nThis script uses boto, the old implementation of the aws-sdk in python. The host endpoint is cellar-c2.services.clever-cloud.com (verify the CELLAR_ADDON_HOST variable value in the Clever Cloud console, from the Information option).\nfrom boto.s3.key import Key from boto.s3.connection import S3Connection from boto.s3.connection import OrdinaryCallingFormat apikey='\u003ckey\u003e' secretkey='\u003csecret\u003e' host='\u003chost\u003e' cf=OrdinaryCallingFormat() # This mean that you _can't_ use upper case name conn=S3Connection(aws_access_key_id=apikey, aws_secret_access_key=secretkey, host=host, calling_format=cf) b = conn.get_all_buckets() print(b) \"\"\" In order to share access to non-public files via HTTP, you need to get a presigned url for a specific key the example above present a 'getObject' presigned URL. If you want to put a object in the bucket via HTTP, you'll need to use 'putObject' instead. see doc : https://docs.pythonboto.org/en/latest/ref/s3.html#boto.s3.bucket.Bucket.generate_url \"\"\" b[0].generate_url(60) Active Storage (Ruby On Rails)\nActive Storage can manage various cloud storage services like Amazon S3, Google Cloud Storage, or Microsoft Azure Storage. To use Cellar, you must configure a S3 service with a custom endpoint.\nUse this configuration in your config/storage.yml:\nconfig/storage.ymlcellar: service: S3 access_key_id: \u003c%= ENV.fetch('CELLAR_ADDON_KEY_ID') %\u003e secret_access_key: \u003c%= ENV.fetch('CELLAR_ADDON_KEY_SECRET') %\u003e endpoint: https://\u003c%= ENV.fetch('CELLAR_ADDON_HOST') %\u003e region: 'us-west-1' force_path_style: true bucket: mybucket Although the region parameter appears, it’s not used by Cellar. The region value serves to satisfy ActiveStorage and the aws-sdk-s3 gem. Without a region option, an exception would raise : missing keyword: region (ArgumentError). If region is an empty string you will get the following error: missing region; use :region option or export region name to ENV['AWS_REGION'] (Aws::Errors::MissingRegionError).\nSet force_path_style to true as described in the Ruby S3 Client documentation."},"title":"Cellar, a S3-like object storage service"},"/developers/doc/addons/config-provider/":{"data":{"":"The configuration provider add-on helps you to create groups of environment variables that you can share with multiple applications.","details-and-behaviour#Details and behaviour":" As with any other add-on, you can only link a configuration provider to applications that are in the same organisation. Variables defined directly in the application override the ones injected from the configuration provider. When you update the variables of a configuration provider, all applications linked to it will be automatically restarted. You can create multiple configuration providers in your organisation and link them to different applications. ","example#Example":"Let’s take an example with 2 Node.js applications exposing some REST APIs: shipping-api and payment-api.\nThe shipping-api application needs the following environment variables:\nPULSAR_TOPIC=order USER_API_HOST=https://user.example.com/api ENABLE_PARTNERS=true The payment-api application needs the following environment variables:\nPULSAR_TOPIC=order USER_API_HOST=https://user.example.com/api ENABLE_SEPA=false Two Node.js applications with their own environment variables As you can see, we had to define PULSAR_TOPIC and USER_API_HOST in both applications with the same value. If we ever need to change these values, we’ll have to apply the updates in both apps and restart them.\nNOTE: This is a simple example, but we could have more than just 2 microservices and more than just 2 common variables.\nTo simplify this process, we will create a configuration provider add-on. It will allow us to define those common variables in one place and inject them in our 2 applications.\nTwo Node.js applications with their own environment variables Think of a configuration provider as a way to group a set of environment variables and share them with any application.\nOne application overriding the environment variable value for PULSAR_TOPIC If a variable is defined in a configuration provider and also in the application, the value defined in the application wins.","how-to-create-a-config-provider#How to create a config provider":"In the console, go to the organisation where you have your applications.\nClick on Create and then on an add-on You will see a list of add-ons, select Configuration provider Select the first plan and click on Next Toggle the Link for each application you need and then on Next Define a name and click on Next Once you have your configuration provider, you can set the variables in the form. You can find out more about rules and format in this page.\nℹ️ At any point, you can link/unlink an application from the configuration provider by going to the app’s “Service dependencies” page. ","pricing#Pricing":"This add-on is completely free.\nNo fee will be invoiced to you while using this kind of add-on."},"title":"Configuration provider"},"/developers/doc/addons/couchbase/":{"data":{"":"CouchBase is a database wich automation is still in beta on Clever Cloud.\nPlease reach to our support if you would like to use this database, they will kindly assist you."},"title":"CouchBase"},"/developers/doc/addons/elastic/":{"data":{"":"The Elastic Stack is Elasticsearch, Kibana, Beats, and Logstash (also known as the ELK Stack). Reliably and securely take data from any source, in any format, then search, analyze, and visualize it in real time. Find out more about it on Elastic’s website.\nProvisioning the Elastic Stack addon on Clever Cloud will give you an Elasticsearch instance, Kibana and an APM server.","-rights-and-permissions#🔑 Rights and permissions":"Elastic Stack add-ons are managed services, with Clever Cloud in charge of configuring and maintaining native configuration files. Some operations like adding an oauth source to connect to Kibana can’t be added, as well as some native settings modifications. This ensures optimal performances and security for managed services as configured by Clever Cloud.\nMost settings are available for modifications and update from Kibana or by API, for example:\nManaging users permissions Frequencies of back-ups The lifecycle of backups indexes Backups destination If you think your system might require some customization (like some plugins activation), contact Clever Cloud support to explain your use case and we will work with you to find a solution.","backups#Backups":"Your Elastic add-on backups are managed by Clever Cloud. When you provision the add-on, we automatically create a Cellar add-on instance named Backups. You will find it in your organisation. Backups are taken daily and are stored in this Cellar add-on instance. As such additional credits will be consumed by your backups.\nBackups can be managed under the Backup tab of the elastic add-on. You can restore, delete or open it directly under Kibana if you opted-in.\n⚠️ If you are using Elasticsearch 6, backups are not deleted automatically, you will need to clean them up from time to time. ","create-an-index-on-elasticsearch#Create an index on Elasticsearch":"When creating an Elasticsearch add-on, a single node is setup. By default we apply cc_singlenode_template that forces the amount of data replication to zero. This index template is only available for data streams.\nIf you are using a tool that requires native Elasticsearch indexes or are accessing them through the Elasticsearch API, you will need an index template. They can be created either using Kibana or the Elasticsearch API. For the latter, you can use a cURL request such as:\ncurl 'https://${ELASTIC_SEARCH_HOST}/_index_template/test/' -u ${ELASTIC_SEARCH_USER} -H 'Content-Type: application/json' -X PUT -d' { \"index_patterns\" : [\"${ELASTIC_INDEX_PATTERN}*\"], \"priority\": 2, \"template\": { \"settings\" : { \"number_of_shards\" : 1, \"number_of_replicas\": 0 } } } ' It’s important here to set number_of_replicas to zero to avoid triggering cluster problems. The priority must be greater than 1, as the cc_singlenode_template template has a default priority of 1.","elastic-apm#Elastic APM":"Elastic APM is an Application performance management tool chain based on the Elastic Stack. See exactly where your application is spending time so you can quickly fix issues and feel good about the code you push. To use it you must install an APM agent to your application. In some cases, you’ll need to add a configuration file, or add it as a dependency in you application. You can find configuration files examples in our public repository.\nOnce both your application and APM server are running, you application with automatically send APM datas to the APM server which will send them to Elastic and once indexed they will be available in your Kibana dashboard (this process is really fast, you won’t see it as a human).\nCurrently, APM agents are available in the following languages:\nGo Java Node.js PHP Python Ruby It is available as an opt-in option of the Elastic add-on. It will be deployed and billed as a regular application. You can upscale/downscale/delete it at any time. This application will be updated by Clever Cloud on a regular basis.\nThe created application name follow the pattern APM - addon_eb464a6d-ce5f-4780-b595-6772ebe33d06. The provisioning of this application might take up a minute to show up in your organisation.\nLearn more on APM official documentation.\nHow to setup APM Any applications linked to the APM application will have the right credentials and APM endpoint automatically available as environment variables. In some cases these variables will be picked up automatically by the APM agent you are using in your application and everything will work automatically. But in some other cases you have to configure it yourself. See for instance the Rails documentation. The list of agents configuration can be found on Elastic’s documentation.\nAPM Server custom configuration The APM server is deployed as an application. As such it’s configured as an application. Its default pre run hook is set to:\nCC_PRE_RUN_HOOK=\"curl https://api.clever-cloud.com/v2/providers/es-addon/apm-server-setup/7 | sh\"\nYou can change the URL to point to your own custom configuration.\nHere is a configuration example for RUM activation:\nes-apm-serverconfig.sh#!/bin/bash -l cat \u003c\u003cEOF \u003eapm-server.yml apm-server: host: \"0.0.0.0:8080\" secret_token: \"${ES_ADDON_APM_AUTH_TOKEN}\" output.elasticsearch: hosts: [\"${ES_ADDON_HOST}:443\"] protocol: \"https\" username: \"${ES_ADDON_APM_USER}\" password: \"${ES_ADDON_APM_PASSWORD}\" path.home: \"${APP_HOME}\" logging: to_syslog: true to_files: false apm-server.rum.enabled: true apm-server.rum.event_rate.limit: 300 apm-server.rum.event_rate.lru_size: 1000 apm-server.rum.allow_origins: ['*'] apm-server.rum.library_pattern: \"node_modules|bower_components|~\" apm-server.rum.exclude_from_grouping: \"^/webpack\" apm-server.rum.source_mapping.enabled: true apm-server.rum.source_mapping.cache.expiration: 5m apm-server.rum.source_mapping.index_pattern: \"apm-*-sourcemap*\" Kibana custom configuration Kibana is deployed as an application. As such it’s configured as an application. Its default pre run hook is set to:\nCC_PRE_RUN_HOOK=\"curl https://api.clever-cloud.com/v2/providers/es-addon/kibana-setup/7 | sh\"\nYou can change the URL to point to your own custom configuration.\nJava APM agent You have multiple ways to use the APM agent. You can either add it in your dependencies and it should work out of the box or you can attach an agent to the JVM. If you prefer the last option, you have to define the following environment variable to attach the agent to the JVM: CC_JAVA_APM_AGENT_ENABLE=true.\nThe agent will list all JVMs on the system and attach to all of them, only once. If you know that your application will spawn multiple JVM processes (not threads) over time and you want the agent to also monitor those processes, you can add this environment variable: CC_JAVA_APM_AGENT_CONTINUOUS=true.\nThe agent will periodically scan for JVM processes and will attach to them if needed.","elasticsearch#Elasticsearch":"Elasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected.","kibana#Kibana":"Kibana lets you visualize your Elasticsearch data and navigate the Elastic Stack so you can do anything from tracking query load to understanding the way requests flow through your apps.\nIt is available as an opt-in option of the Elastic add-on. It will be deployed and billed as a regular application. You can upscale/downscale/delete it at any time. This application will be updated by Clever Cloud on a regular basis.\nThe created application name follow the pattern Kibana - addon_eb464a6d-ce5f-4780-b595-6772ebe33d06. The provisioning of this application might take up a minute to show up in your organisation.\nLearn more on Kibana official documentation.\nAuthentication Any member of the Clever Cloud organisation containing the Elastic add-on will be able to login to Kibana through an automatically configured SSO system.","versions#Versions":"The current versions supported at add-on creation are the following: Dedicated v7.17.10 v8.10.2 "},"title":"Elastic Stack"},"/developers/doc/addons/fs-bucket/":{"data":{"":"When you deploy an application on Clever Cloud, like most PaaS, a new virtual machine is created, the previous one is deleted. If your application generates data, for example if you let users upload pictures and you do not store it on external services like S3, you will lose anything stored on the disk.\nThe Git deployment does not allow you to keep generated data files between deployments. To avoid the loss of your data, you have to mount a persistent filesystem. This is why we created File System Buckets.\nYou will be able to retrieve generated data between two deployments.\n⚠️ Warning\n• Back-ups are not included in the public cloud offer. You can still do them manually.\n• FSBuckets are not available for Docker applications because of security concerns. ","accessing-your-data-inside-the-fs-bucket#Accessing your data inside the FS Bucket":"From your application Your bucket is mounted at the configured path, starting from your application’s root folder.\nIf you want to use an absolute path, you can use the APP_HOME environment variable, see special environment variables\nFrom the addon dashboard The File explorer tab of the addon dashboard gives you access to your files in the FS bucket.\nFrom your favorite FTP client The Addon information tab of your FS Bucket add-on displays the information you need to connect to your bucket using FTP.","configuring-your-application#Configuring your application":"Buckets are configured using environment variables. Add the following to your application :\nCC_FS_BUCKET=/some/empty/folder:bucket-xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx-fsbucket.services.clever-cloud.com[:async] Don’t forget to replace the path of the mounted folder and the fs-bucket host with the targeted folder path (make sure the folder does not exists) and your fs-bucket host.\nOptionnally, you can add :async to the end of the environment variable. This will make Clever Cloud mount the FS Bucket with the async option. It will make the FS Bucket faster (sometimes up to 3 times faster), but in case of a network issue it may cause file corruption.\nYou can setup multiple buckets by appending a number at the end of the environment variable’s name.\nCC_FS_BUCKET=/some/empty/folder:fs_bucket_host CC_FS_BUCKET_1=/some/otherempty/folder:fs_bucket_other_host:async Note that the async parameter can be set per bucket.","configuring-your-application-with-bucketsjson-deprecated#Configuring your application with buckets.json (@deprecated)":" 🧹 This method is deprecated\nThis method is deprecated, we strongly recommend that you use environment variables. If you want to switch from this method to the environment variables, you need to remove the buckets.json file. Otherwise, the environment variables will be ignored. Also, this method does not support the async parameter. To configure your application to use buckets, use the clevercloud/buckets.json file.\nThe clevercloud folder must be located at the root of your application.\nThe buckets.json file must contain the following structure:\n[ { \"bucket\" : \"bucketId\", \"folder\" : \"/myFolder\", \"apps\" : [\"app_id\"] }, { \"bucket_host\" : \"bucket-01234567-0123-0123-0123-012345678987-fsbucket.services.clever-cloud.com\", \"folder\" : \"/myotherFolder\", \"apps\" : [\"app_id_2\"] } ] ℹ️ You can find a pre-filled json object to copy in the dashboard of your FSBucket add-on, in the “Dashboard configuration” tab It’s a json array containing objects with at least two fields:\nUsage Field Description Required bucket The bucket id you can find in the console. It begins with bucket_. This is for “old-style” buckets (created before the 7 December 2015) Required bucket_host The bucket host you can find in the console. It begins with bucket- and ends with services.clever-cloud.com. This is for “new-style” buckets. Required folder The folder you want the bucket to be mounted in. Should start with /. Using the example myFolder, you can access your bucket via the myFolder folder at the root of your application (which absolute path is available in the APP_HOME environment variable) Optional apps Whitelist of the applications allowed to mount this bucket. It’s helpful if you need to deploy a preprod app and a prod app using the exact same codebase but different buckets The folder must not exist in your repository (or it needs to be empty). Otherwise, the mount of your bucket will be ignored. You can mount the same bucket in different folders, but they will share the same content, so it’s not the solution. You should prefer to mount the bucket in only one folder and then manage multiple subfolders in it.\n⚠️ You cannot mount two buckets in the same folder for the same app. If you put the same “folder” value for two entries in your environment variables or the buckets.json array, make sure that the “apps” fields make the two buckets mutually exclusive upon deployment! "},"title":"File System Buckets"},"/developers/doc/addons/heptapod/":{"data":{"":" Heptapod Cloud and Runner is a SaaS DevOps platform, managed by Clever Cloud. It is based on the open-source Heptapod, a variation of GitLab Community Edition supporting Git and Mercurial. ","accessing-heptapod-cloud#Accessing Heptapod Cloud":" ℹ️ Requirements\nUsing Heptapod Cloud require a Clever Cloud account and an organization. Create an organization You will need a Heptapod group to create your projects in. Heptapod groups are mapped to Clever Cloud organizations. Every organization you have access to will have its corresponding group on the Heptapod Cloud instance.\nIn the Clever Cloud console, click Add an Organization and fill the form to create one. Organization are the way users collaborate and share applications.\nAccess to Heptapod via SSO Accessing to Heptapod Cloud is done with the built-in of Clever Cloud. To launch Heptapod Cloud go to https://heptapod.host.\nUsage and billing Heptapod Cloud is billed on a per-usage model, explained and simulated on our product page.\nYou can check your Heptapod Cloud usage of repositories and users in the Shared Software tab of your organization.\nYou can check your organization’s Heptapod usage in the Share\nClever Cloud Runners for Heptapod enable on-demand generation of Docker containers of different sizes (Flavors). Therefore Heptapod runners are billed in the same way of runtimes. The pricing is different, and shown on a per-1000 minutes in the Heptapod Runner product page.","heptapod-cloud#Heptapod Cloud":"Heptapod Cloud comes with the following benefits:\nCost Reduction: No licensing or application maintenance costs, flexible and competitive usage-based pricing per active user. Automatic Updates: Heptapod aligns with the continuously evolving GitLab, ensuring you effortlessly benefit from the latest features and security patches. Technical and Functional Support: Whether for technical or functional questions, support teams are ready to answer all your queries. Scalability: As your team grows or you manage dozens or hundreds of small or large projects for testing and deployment, Heptapod Cloud is designed to handle it. Increase capacities or quantities of CI/CD runners associated with your projects, those of runtimes, storage, or databases managed by Clever Cloud, or adjust bandwidth to handle heavy loads. All these services are native and structured to meet your scaling needs with ease. Heptapod Cloud provides your team with a suite of collaborative tools for software or document production management:\nTeam, Collaborators, and Access Rights: Add and manage team members, organise roles and access rights based on projects. Git and Mercurial Repository Management: Heptapod provides a robust and intuitive repository management system for Git and Mercurial, allowing you to effortlessly create, manage, and collaborate on your codebase or documents. With advanced version control and branch management features, you can easily track changes, merge your code, and maintain the integrity and history of your private or public projects. Project Management and Ticket Tracking: The ticket tracking system allows you to efficiently manage tasks, incidents, and collaborate seamlessly with your team. Stay organized by setting milestones, qualifying with labels, and customising workflows for advanced control of your operations. Collaboration and Code Review: Heptapod provides a wide range of features for effective collaboration, code or document reviews, online comments, and real-time collaboration tools. Work seamlessly with your team, track exchanges, merge requests, and improve the overall quality of your projects. Embedded Wiki and Documentation: Knowledge sharing is crucial for high-performing teams. Easily create and maintain comprehensive documentation for your projects, centralise and share knowledge, and provide a smooth experience for new collaborators. ","heptapod-runner#Heptapod Runner":"Clever Cloud Runners for Heptapod is a SaaS that automates the execution of tasks on machines of varying sizes and power to best match your continuous integration and deployment needs. Fully integrated with Heptapod Cloud, the service can also be used from a self-managed Heptapod or GitLab instance, either managed by Clever Cloud or self-hosted on your infrastructure.\nIntegrated CI/CD Clever Cloud Runners for Heptapod comes with the following features:\nQuick activation: Activate Clever Cloud Runners for Heptapod for your organization with just one click. Easy customization: Easily define your pipelines using templates for the most popular languages. Edit and validate definitions from the interface or directly from the project file. Integrated tracking: Monitor the execution of your tasks in real time, receive notifications of pipeline success or failure, and view activity reports online. Components Catalog: Connect your repository to Clever Cloud and deploy on production, create review apps, and automate tasks. Provisioning With the Clever Cloud Runner, you may run a great number of parallel jobs, paying for your actual consumption without any threshold effect.\nEach time it takes a job, the Clever Cloud Runner spawns a virtual machine within your Clever Cloud Organization.\nWhile the job is running, the virtual machine is visible in the Clever Cloud console, in which each job corresponds to an Application having exactly one instance attached. The instance is the virtual machine running the job.\nThe type of the instance is “Heptapod Docker Runner”, and is identified by a Heptapod icon. The job number is included of the Application name, which looks like hpd-job-kvzWdEMo-275833.\nBoth Application and Instance are removed as soon as the job completes, whatever end status was returned to the coordinator. You will be billed for the time the instance was up, with a 10-second granularity.\nThe pricing will vary on the selected flavour (size, see also below), which is “M” by default. Check it out on the Clever Cloud pricing page, under the “Heptapod Runner” section.\nActivation On heptapod.host, the Shared Runners are disabled by default at Group creation time, and Projects created while they are disabled on the Group also will have them disabled.\nThis is nothing but the standard GitLab mechanism. If you maintain your own Group or Project runners, this makes sure the Clever Cloud Runner does not steal jobs from them, as chances are high that they would require a specific setup. Also, this avoids billing users for a service that they did not ask for and may not be aware of.\nIn order to have the Clever Cloud Runner take your jobs, simply activate the shared runners on the wished Groups and Projects:\nNavigate to the Group Settings CI/CD page. Expand the Runners section. You will be able to activate the shared runners directly from there or allow Projects or sub-Groups to override the Group setting in case you don’t want to activate on the full Group. Always check the resulting configuration in the Projects Settings CI/CD pages, and correct it if needed. Changes in the Group Settings are not always immediately taken into account on enclosed Projects. Running only the Clever Cloud Runner In case you’d like to make sure that your jobs are taken by the Clever Cloud Runner, only, you can flag them with the clever-cloud job tag.\nHere is an example where the tag is set on all the jobs in the CI/CD configuration in one stroke, thanks to the default global keyword:\ndefault: tags: - clever-cloud lint: script: - ci/lint tests: script: - ci/run-all-tests Working like any Docker-based Heptapod or GitLab Runner Except for provisioning, everything happens as if the job was launched by a standard Docker executor, with only a handful of differences (see the dedicated subsection).\n⚠️ For Git projects, there is no difference between Heptapod Runner and GitLab Runner To simplify, you can create a Docker image containing the required dependencies. You might store it on registry.heptapod.host and then use it as the starting point for your job.\nThe job can make use of services, which will run inside the same virtual machine as the main job.\nHere’s a full example making use of a PostgreSQL database, relying on the base image built by our Demo Project for CI image to provide the PostgreSQL client utilities (psql, createdb, etc.)\ntests: image: registry.heptapod.host/heptapod/demos/ci-image:latest services: - name: postgres:14 # official Docker image for PostgreSQL on Docker Hub alias: pgserver # (optional) service host name to use from the job variables: # All job environment variables are also set in service containers. # This one has the effect that postgres will blindly authenticate any # existing user without any password. # (the `postgres` image has many more authentication options, # this one being good enough for our purposes) # Note: GitLab (Runner) 14.5 will allow setting variables on a # per-service basis, see https://docs.gitlab.com/ce/ci/services/ POSTGRES_HOST_AUTH_METHOD: trust script: - createuser -h pgserver -dSR -U postgres db_owner - createdb -h pgserver -U db_owner mydb # Now use the database. # This query just lists schemas (namepaces) for the sake of example. - psql -h pgserver -U db_owner -c \"SELECT nspname FROM pg_catalog.pg_namespace\" mydb Differences with a Heptapod Runner using the standard Docker executor Automatic Dependency Proxy\nThe Dependency Proxy is a standard GitLab Free feature that provides transparent caching of Docker Hub images to minimize bandwidth and avoid rate limiting problems.\nWith the Clever Cloud Runner, all Docker images from Docker Hub get automatically retrieved from heptapod.host’s Dependency Proxy, By contrast, this is an opt-in feature with the standard Docker executor.\nThe automatic Dependency Proxy should be mostly transparent to users, except in case of services using a namespaced Docker image and not having an explicit alias. For these, we provide a single service network name whereas the standard executor provides two (replacing forward slashes either by double underscores or dashes). We chose the dash-based RFC compliant one. In short, use octobus-heptapod to reach a service whose Docker image is octobus/heptapod:sometag, or better, set your own explicit alias.\nJob cache\nCurrently, the job cache is discarded at the end of each job. This is because we don’t have offloading capabilities for the cache yet, and the entire virtual machine gets decommissioned at the end of the job.\nWe’re working on it and should have a solution soon (see the Persistent cache upcoming feature).\nIsolation Because each job runs in its own transient virtual machine, your jobs are effectively pretty private.\nEven if a malicious job were to break the sandboxing provided by Docker itself, it would find nothing to spy on within its Docker host.\nEven if your projects are public, this can be an important factor, for instance to protect package signing keys and upload credentials when doing Continuous Delivery.\nDocker host flavors While most of the public CI offering seems to have converged on running jobs on comparatively modest systems (e.g., 2 virtual cores with 7GB of RAM), and many testing frameworks have ways to partition big test suites in several jobs to run in parallel (sharding), this does not fit all needs:\nJobs performing big compilation tasks (OS kernels, desktop applications) may benefit from in-job parallelization and may not be practical to cut in several parallel jobs. At the opposite side of the spectrum, jobs for unit tests or fast linting of small projects may content themselves with a tiny system. In other words, one size does not fit all.\nJobs executed by the Clever Cloud Runner can specify the scale (flavour) of the Docker host it needs, using the CI_CLEVER_CLOUD_FLAVOR variable.\n.gitlab-ci.ymlsmall-job: variables: CI_CLEVER_CLOUD_FLAVOR: XS script: - ci/display-specs - ci/lint bigger-job: # our base image provides /usr/bin/make image: registry.heptapod.host/heptapod/demos/ci-image:latest variables: CI_CLEVER_CLOUD_FLAVOR: XL script: - ci/display-specs - make all artifacts: paths: - out/binaries ","overview#Overview":"The Heptapod DevOps platform is edited by Octobus, a team of experts with experience in Mercurial and Rust, derived from Gitlab Community Edition.\nClever Cloud users can benefit from Heptapod Cloud software, along with Heptapod Runner for CI/CD operations.\nHeptapod and Runners"},"title":"Heptapod"},"/developers/doc/addons/jenkins/":{"data":{"":"Jenkins is an an open source automation server which enables developers to build, test, and deploy their software. It facilitates continuous integration (CI) and continuous delivery (CD). You can find out more about Jenkins on their website.\nJenkins on Clever Cloud will allow your team to effortlessly setup CI/CD pipelines, executed on runners that deploy on Clever Cloud docker applications. This way, you will only pay for the CI/CD you really consume, to the second. You will also be able to access Jenkins interface by using the Clever Cloud SSO (Single Sign-On) Authentication.\nJenkins Dashboard ","accessing-the-jenkins-interface#Accessing the Jenkins interface":"Once you created your add-on, you should get to the dashboard. You should see a link named Access Jenkins. Opening that link will redirect you to our SSO authentication.\nClever Cloud has its own SSO (Single Sign-On) authentication to authenticate to various services. All members of your organization will be able to authenticate to the services in the same organization, using their Clever Cloud account.\nWhen a service needs to authenticate you, it redirects to a login form. Enter your Clever Cloud credentials as well as your 2FA Authentication code if needed.\nIf it’s the first time you use the Clever Cloud SSO, accept the tokens permissions when asked for. Accept all the rights listed, otherwise the backend service might not work correctly.\nIf you mistakenly disabled some rights at some point, you have to revoke all tokens generated by this OAuth consumer:\nFirst, go to your user’s OAuth token in the Web console Then, find all tokens named Keycloak Consumer and revoke them Try to log-in again. The rights list should now be displayed. ","backup#Backup":"By default, Clever Cloud performs a backup every day, with a retention of seven days. Retention and frequency can be customized for Premium customers. Backups can be found in the Clever Cloud Console in the backups menu of your add-on.","configure-your-jenkins-instance#Configure your Jenkins instance":"Once you accessed your Jenkins interface, we can start configuring it. A custom Clever Cloud plugin is automatically installed on your instance during the provisioning. This plugin will allow you to configure the runners Jenkins will start to execute your jobs. Those runners will be Docker applications provisioned directly on Clever Cloud, in your organization.\nConfigure your runners Using our Jenkins plugin, you can configure multiple runners. Runners can have multiple configuration customized:\nLabel: Only Jobs that require this label will be able to use that runner. More on that below. Docker image: Select which docker image your job will use to run. More on that below. Virtual machine size: The size of the Clever Cloud scaler to use. Before configuring the runners themselves, we have to configure a new Cloud. To do so:\nOpen the left menu, open the Manage Jenkins link. Then, under System configuration, open the Manage nodes and Clouds item. On the left menu, open the Configure Clouds link. A dropdown named Add a new Cloud should be displayed, select Clever Cloud. In the Name input field, you can enter Clever Cloud. You can also define a custom Docker registry to use with the associated credentials. Even if you stick with the default one (Docker Hub), we encourage you to add your credentials to avoid any rate limiting. From there, we will be able to create runner templates. You can have multiple runner templates for multiple workflows. For example, you might need two runner templates:\nOne for building and testing your Java Maven projects. One for building and testing your Frontend projects. Let’s configure a runner template for Java Maven projects:\nClick on Add a runner template. Name your runner template, for example Jenkins maven agent. Set maven as the label. Jobs that require a maven runner will then be able to execute on this runner. Set the docker image your jobs will use. For example jenkins/jnlp-agent-maven. Be sure to read the section about Docker image requiremetns. Select the virtual machine size you need. For Java projects, let’s use a M instance that has 4 vCPUs and 8 GiB of RAM. Jenkins Cloud configuration Once you configured everything, click on Save at the end. You should now have a runner template ready for Java Maven projects.\nWe can now start configuring a new Job that will execute on a runner that will be started using the template we used.\nLabels Label is a very important setting. Labels will restrict on which runners a given project can be run.\nFor example, if you have two runners templates with the following labels:\nmaven nodejs And you have two jobs:\nA first job that builds and test a Java Maven project A second job that builds and test a frontend application The first job will be configured to only use the maven runners. And the second one will be configured to use the nodejs runners.\nYou might also want to only have one runner template for all of your jobs. If you omit this setting both in the runner template and in the jobs settings, then this runner template will be picked up to execute your jobs.\nDocker image requirements As of today, only runners on Clever Cloud Docker applications are supported. The Docker image you provide must contain the Jenkins Inbound agent.\nBy default, Jenkins provides a few Docker images that embed this agent. The agent will then connect to Jenkins to receive jobs orders.\nYou can find more details on the default Jenkins Inbound agent Docker image. Jenkins also provides various base images with pre-installed tools for some CI workflows on Docker Hub.\nIf you have specific needs, you must create your own Docker image with the Jenkins Inbound Agent.\nConfigure and run a Job Jenkins has a large variety of options to configure a job. This documentation won’t cover them all, we will just go through a basic Shell Job. For more information, you can read Jenkin’s documentation.\nIn this example, the job will execute on a runner using the maven runner template we created earlier. It will basically print Hello world and sleep a bit.\nFirst, on the left menu, click on New item. This will open the available jobs types:\nEnter a name for your project, let’s say My Maven Project Select the Freestyle project option and click Ok We will use a Maven runner template we previously configured to execute the job: Tick the Restrict where this project can be run option and enter maven in the text field At the end of the settings, click on Add a build step, select Execute shell In the command shell input field, enter: echo 'Hello World!' sleep 60 Save the settings. Now that the job is configured, we can start it by clicking on the Build now button in the left menu. A message saying that the build has been scheduled should be printed. You should also see after a few seconds a pending Job in the Build history, on your left.\nJenkins jobs history At the same time, a new application should have been created in your organization, named Jenkins agent \u003cUUID\u003e. The application should be deploying and once it gets deployed, the job will start to be executed.\nJenkins runner deploying At some point the application should have deployed and you should be able to click on the Job’s number in the build history list. From there, you can open the Console Output which is basically your job logs.\nOnce your job has ended, after the 1 minute sleep, the application provisionned in your organization will be stopped and deleted.\nYou should now be able to start creating jobs that automatically build and test your projects on a Clever Cloud application.\nJenkins File example Here is an example of a Jenkins file taken from our CLI repository. It should be at the root directory of your project for Jenkins to pick it up. It basically builds our CLI project and publish it to various platforms.\npipeline { agent { label 'cc-ci-agent' } environment { GIT_TAG_NAME = gitTagName() S3_KEY_ID = credentials('CELLAR_CC_TOOLS_ACCESS_KEY_ID') S3_SECRET_KEY = credentials('CELLAR_CC_TOOLS_SECRET_ACCESS_KEY') BINTRAY_API_KEY = credentials('BINTRAY_CC_TOOLS_API_KEY') NPM_TOKEN = credentials('NPM_TOKEN') } options { buildDiscarder(logRotator(daysToKeepStr: '5', numToKeepStr: '10', artifactDaysToKeepStr: '5', artifactNumToKeepStr: '10')) } stages { stage('build') { steps { sh 'npm ci' sh 'node scripts/job-build.js' } } stage('publish') { when { not { environment name: 'GIT_TAG_NAME', value: '' } beforeAgent true } parallel { stage('cellar') { steps { sh 'node scripts/job-publish-cellar.js' } } stage('npm') { steps { sh 'node ./scripts/job-publish-npm.js' } } } } } post { always { archiveArtifacts artifacts: 'releases/**/*', fingerprint: true, onlyIfSuccessful: true } } } @NonCPS String gitTagName() { return sh(script: 'git describe --tags --exact-match $(git rev-parse HEAD) || true', returnStdout: true)?.trim() } You can find more documentation about the Jenkins file syntax on Jenkin’s Documentation","create-jenkins-add-on#Create Jenkins add-on":"Jenkins versions Jenkins has two releases pipelines: Weekly and LTS (Long-term support). By default, our add-ons are using the LTS version of Jenkins, those will include all security fixes needed. The Weekly version isn’t available during the creation, yet, but if you ever need it, feel free to ask our support team about it.\nTo create a Jenkins add-on, you can either use our web console or our CLI:\nWeb console Create a new add-on by clicking on the Create… dropdown in the sidebar and then an add-on. Select the Jenkins add-on. Select the plan you need. You can skip linking the add-on to an application, it won’t be needed. Enter the name of your Jenkins add-on and select the zone where you wish to deploy it. Select the options you wish to enable on your Jenkins add-on. CLI Make sure you have clever-tools installed locally. Report to the getting started guide if needed. List the available plans and options for Jenkins: clever addon providers show jenkins. In your terminal, you can then run clever addon create jenkins \u003capp-name\u003e --region \u003cregion\u003e --org \u003corg\u003e where app-name is the name you want for your add-on, region deployment region, and org the organization ID the application will be created under. Refer to the documentation for more details on application creation with Clever Tools","customize-your-jenkins-instance#Customize your Jenkins instance":"Jenkins can be customized following your needs with a multitude of plugins. You can go into Manage Jenkins and then Manage plugins to manage them.\nPlugins can be browsed from Jenkins own plugin repository.","security-and-updates#Security and updates":"Jenkins usually gets a lot of security releases as well as many plugins updates. It is important to keep your Jenkins up-to-date. Today that’s not something we automatically manage but this may evolve in the future. In the meantime, you have full rights to update your Jenkins instance and its plugins. Usually, when Jenkins has a security release available, it will be displayed as a notification and as a message in the Manage Jenkins administration page.\nThe Clever Cloud Jenkins dashboard also has an item informing you about available Jenkins updates.\nJenkins update available After Jenkins or some plugins were updated, Jenkins will need to restart.\nUpdate Jenkins To update Jenkins, you can go into the Manage Jenkins administration page. If an update is available, it should ask you if you want to install it with a message looking like this:\nJenkins update message You can then click on the Or upgrade automatically button. It should start downloading and installing the update. You can enable the option Restart Jenkins when installation is complete and no jobs are running and Jenkins will restart automatically. After a few minutes, it should be available again.\nUpdate Jenkins plugins Plugins can be updated by going into the plugin management page: Manage Jenkins and then Manage plugins.\nPlugins that need to be updated are listed in the Updates section. You can check the plugins you need to update or check them all and then click on Download now and install after restart.\nAll plugins will be downloaded. You can enable the option Restart Jenkins when installation is complete and no jobs are running and Jenkins will restart automatically and install the plugins updates. After a few minutes, it should be available again."},"title":"Jenkins"},"/developers/doc/addons/keycloak/":{"data":{"":"Keycloak is an open source identity and access management (IAM) solution that offers powerful authentication features for services and secure applications. Thanks to this add-on, you can deploy Keycloak in your organization in just one click. It leverages all Clever Cloud features such as monitoring, scalability, high availability SLA, etc.\nTo fit the most common needs, the Keycloak add-on comes with batteries included: sensible defaults, easy migration with realms import/export, Keycloak Metrics, default theme, etc.\nℹ️ Keycloak is in Beta testing phase: your insights and suggestions are crucial in shaping the future of this platform. To share your feedback, please visit us at our community page. Thank you for being a part of our journey towards innovation and improvement! ","accessing-the-keycloak-interface#Accessing the Keycloak interface":"Once you have created your add-on, go to the Console Keycloak Java runtime page and click “Open the application”. You also can get the Keycloak add-on URL from the Clever Cloud console, in the information panel of your Keycloak add-on.\nThe admin interface is accessible on the /admin endpoint. The default user and password are provided in the Java application by the environment variables CC_KEYCLOAK_ADMIN and CC_KEYCLOAK_ADMIN_DEFAULT_PASSWORD.\nA password change is requested at the first connection.","add-ip-filtering-in-keycloak-for-admin-console#Add IP filtering in Keycloak for admin console":"Two specific authentication flows with an IP addresses based filter are especially created and affected as default to clients security-admin-console and admin-cli. To use them (do not forget to make the same on each realm you want to protect):\nEnable “PLEASE-OPEN.IT Authenticator IP Range” to “Required” Click on the crank to access parameters Set IPs with authorized access Those flows could be affected to your own clients if you need.","create-a-keycloak-add-on#Create a Keycloak add-on":"From the Console Create a new add-on by clicking the Create… dropdown in the sidebar and then an add-on Select the Keycloak add-on You can skip linking the add-on to an application, it won’t be needed Enter a name for your Keycloak add-on and select the zone where you want it to be deployed Using the CLI Make sure you have clever-tools installed locally. Please refer to the setup guide if needed List the available plans and options for Keycloak: clever addon providers show keycloak In your terminal, run clever addon create keycloak \u003cname\u003e --org \u003corg\u003e (--org is optional) Refer to the Clever Tools documentation for more details on add-on creation.","custom-themes-and-plugins#Custom Themes and Plugins":"Keycloak uses an FSBucket to install themes and plugins. To deploy a custom theme or custom plugin, simply download them into the respective themes or providers folder in your FSBucket.","hostnames#Hostnames":"By default, your Keycloak instance is exposed through a Clever Cloud domain, as mentioned in the Service dependencies tab of your add-on.\nCustom hostname You can use your own domain. Just set it in the Domains section of the Java application of the Keycloak add-on. Then, edit the CC_KEYCLOAK_HOSTNAME environment variable, apply this change and restart the application.\nAdmin hostname By default, Keycloak expose administration console on the same hostname, but you can use another one. Add its domain to the application and set it through the CC_KEYCLOAK_HOSTNAME_ADMIN environment variable. Then apply this change and restart the application.","how-it-works#How it works?":"When you create the Keycloak add-on, Clever Cloud automatically deploys:\nA Java instance with Keycloak pre-loaded and configured A PostgreSQL database A FS Bucket used for themes, plugins, and import/export storage needs ","key-features#Key features":"Keycloak on Clever Cloud allows you to effortlessly set up a tailored authentication and access management solution, that you can adjust to your needs and workloads. It offers a wide panel of services such as:\nSecure Identity Management Single Sign-On (SSO) Centralized Administration Customizable Authentication (OAuth 2.0, LDAP, SAML, OpenID Connect, and more…) Easily load plugins and themes Multi Realms Monitoring and Logging Export and Import Support and Maintenance ","known-issues#Known issues":"Java application deployment may fail Sometimes, application dependencies such as PostgreSQL may take a longer time to start. Wait and relaunch the deployment to fix this issue\nOn the Overview tab from the Java application page Click RE-BUILD AND RESTART ","metrics#Metrics":"Since version 25.06, Keycloak add-on exposes Prometheus metrics on port 9000. Use Clever Cloud’s Grafana integration to visualize them.","need-expert-advice#Need expert advice?":"The Clever Cloud Keycloak add-on is designed to meet the most common needs, built with Please Open-it and hosted on our services. For the most complex and loaded systems, our partner and Keycloak experts behind this add-on, can provide assistance: contact us.","plan-sizing#Plan sizing":"By default, Keycloak on Clever Cloud uses small-size resources, i.e:\nS Java XXS Small Space PostgreSQL Less than 100 MB in FS Bucket They are dimensioned to suit a majority of needs. Even if this Keycloak add-on might handle heavy traffic and an important number of simultaneous connections, the default configuration should handle the following load (based on Keycloak sizing recommendation):\n5 logins by second 90 credential grants by the second 70 refresh tokens by second You can however manage and adjust them directly in the Console to fit your needs. You can for example change their settings, migrate to a larger storage database, etc. Vertical auto-scalability is available for this service. Different plans for Java and PostgreSQL are available on Clever Cloud.","realms-management#Realms management":"The number of realms significantly impacts the overall performances. Use as few realms as possible.\nThe recommended way to create realms is by using the environment variables of the Java application of the Keycloak add-on. Thus, it comes with an optimized configuration such as brute-force detection and specific metrics:\nIn the Java application, go to the Environment variables panel and declare as many realms as you need, separated by a , Restart the application after the change. For example REALMS=realm_1,realm_2 declares realm_1 and realm_2 You can also create a realm from the Keycloak administrator console. On the dropdown menu from the top left corner, click create realm.\nExporting realms data You can create a partial export using the Keycloak console:\nFrom the Realm Settings panel On the top right, click the dropdownaction menu Select partial Export A cold export can be done at the start You can create a full export using the environment variables of the Keycloak Java application:\nGo to the Keycloak Java application in the Clever Cloud Console In the Java application, create the CC_KEYCLOAK_EXPORT_REALMS environment variable Set the realms you want to export, separated by a , Restart the Java application from the Clever Cloud console It’s a total export, including the client’s secrets and hashed password. Exported realms are available in realms/export folder of the FS Bucket.\nImporting realms data Uploading previously exported data in realms/import folder in the associated FS Bucket enables importing realms data. The import process starts after restarting the Java application.","security-and-updates#Security and updates":"Since the Keycloak add-on is a fully managed application, you don’t have to select a particular version. It’s automatically upgraded and updated both for features and security.\nAn add-on update might require a restart.\nRequired actions are notified by email"},"title":"Keycloak"},"/developers/doc/addons/mailpace/":{"data":{"":"MailPace is a fast \u0026 Reliable Transactional Email.","add-on-configuration#Add-on configuration":"Create the add-on from Clever Cloud’s Console. You need to verify you domain name by adding the provided DNS entry in your DNS provider’s dashboard. Then, you will get an API KEY that you should add to your application (as environment variable with PHP, see section below).\nHost : smtp.mailpace.com Port : 25, 465, 587, 2525 User : API KEY Password : API KEY Encryption : usage of TLS or STARTTLS are highly recommended. ","mailpace-for-erlang-go-nodejs-rust-and-ruby#MailPace for Erlang, Go, Node.js, Rust and Ruby":"Check MailPace documentation","mailpace-for-php#MailPace for PHP":"PHP mail() function usage You have to turn TLS on with port 465 (environment variable CC_MTA_SERVER_USE_TLS=true) to make Mailpace working. Enable STARTTLS allows to use another port.\nThese environment variables have to be set with the value of :\nCC_MTA_SERVER_HOST: Host of MailPace’s SMTP server is smtp.mailpace.com. CC_MTA_SERVER_PORT: Server port has to be set to 465. Defaults to 465 whether TLS is enabled or not. CC_MTA_AUTH_USER: User to authenticate to MailPace’s SMTP server has to be set with MAILPACE_API_KEY. CC_MTA_AUTH_PASSWORD: Password to authenticate to the SMTP server has to be set with MAILPACE_API_KEY. CC_MTA_SERVER_USE_TLS: Have to be enabled. Defaults to true. CC_MTA_SERVER_STARTTLS: Enable or disable STARTTLS. Defaults to false. CC_MTA_SERVER_AUTH_METHOD: Authentication has to be enabled. Defaults to on. Then, redeploy your application on Clever Cloud for the changes to take effect. A few minutes later, your application will be able to send mails with mail() function thanks to MailPace’s SMTP server.\nPHP frameworks To use frameworks such as Symfony, you can check MailPace documentation.","overview#Overview":"MailPace is a SMTP provider which can be used on Clever Cloud to send emails.\nMailPace provides an HTTPS API, SMTP Server and several libraries for sending emails that completely removes the need for any email setup or active email management. Emails sent through the MailPace API can come from any address for any domain that you are able to verify ownership of through a simple DNS update."},"title":"MailPace"},"/developers/doc/addons/materia-kv/":{"data":{"":"Materia is a new serverless databases offering by Clever Cloud. A whole range of services meeting the needs expressed by our customers in recent years, with an open and resilient approach. It includes deployment across multiple availability zones, compatibility with existing protocols, clients, and pay-as-you-go billing. It’s built on the FoundationDB open source transactional engine. A distributed and robust solution, notably thanks to its high simulation capacity.\nMateria KV is the first publicly available product of this family. It’s a key-value database which comes with simplicity in mind. You have no instance size to choose, no storage capacity to worry about. We simply provide you with a host address, a port and a token: you’re ready to go! Once our servers send a reply message, your data is durable: it’s synchronously replicated over 3 data centers in Paris.\nYou don’t have to configure leaders, followers: high availability is included, by design.\nℹ️ Materia KV is in Alpha testing phase: your insights and suggestions are crucial in shaping the future of this platform. To share your feedback, please visit us at our community page. Thank you for being a part of our journey towards innovation and improvement! ","compatibility-layers#Compatibility layers":"We didn’t want this Materia KV to come at the cost of complex configuration, requiring the use of special clients and ORMs. That’s why we’ve developed its compatibility layers. To “talk” to it, you don’t need a special API or tools specific to Clever Cloud. You’ll be able to use it with existing solutions for DynamoDB, GraphQL or Redis. The first available layer is compatible with Redis API (and its variants as Reddict or Valkey).\nThus, you can use a Materia KV add-on with any compatible client within your applications, redis-cli or alternatives such as iredis. You can also use it with graphical interface (GUI). We tested many of them with success:\nAnother Redis Desktop Client PX3 Redis UI Qredis Redis Commander Redis Insight ","create-a-materia-kv-add-on#Create a Materia KV add-on":"You can create a Materia KV add-on as simply as any other Clever Cloud service in the Console, following this link. Select the Alpha plan (free during testing phase), an application to link to (or none), give it a name, and you’ll get access to its dashboard giving you connection details. Environment variables shared with a linked application are listed in the Service dependencies section.\nWe included them with the REDIS_ format. Thus, you can just try to replace a Redis instance by Materia KV. It’s as simple as linking the new add-on, unlinking the old one and restarting your application! (Check commands you’ll need first).\nYou can also use clever tools to create a Materia KV add-on and set environment variables to test it with a PING command:\nclever addon create kv DATABASE_NAME source \u003c(clever addon env addon ADDON_ID -F shell) redis-cli -h $KV_HOST -p $KV_PORT --tls PING Here is an example of what you can expect:\n$ clever addon create kv testKV Add-on created successfully! ID: addon_4997cfe3-f104-4d05-9fe4-xxxxxxxxx Real ID: kv_01HV6NCSRDxxxxxxxxxxxxxxxx Name: testKV /!\\ The Materia KV provider is in Alpha testing phase, don't store sensitive or production grade data You can easily use Materia KV with 'redis-cli', with such commands: source \u003c(clever addon env addon_4997cfe3-f104-xxxx-xxxx-xxxxxxxxx -F shell) redis-cli -h $KV_HOST -p $KV_PORT --tls You can also deploy Materia KV add-ons with Terraform provider (OpenTofu compatible).\nℹ️ Materia KV is in Alpha testing phase Each add-on is limited to 128 MB of storage, requests sent to the server can’t exceed 5 MB. As we fine-tune and enhance its capabilities, we advise against using the alpha release for production purposes. During alpha testing we can delete data or renew token, don’t store sensitive or production grade data. ","using-the-redis-api-compatible-layer#Using the Redis API compatible layer":"Environment variables and CLI usage To connect to a Materia KV add-on, you need 3 parameters: the host, the port and a (biscuit based) token. You can set these parameters as environment variables by doing source \u003c(clever addon env addon ADDON_ID -F shell). The variables set are:\n$KV_HOST and its alias $REDIS_HOST $KV_PORT and its alias $REDIS_PORT $KV_TOKEN and its alias $REDIS_PASSWORD $REDIS_CLI_URL $REDISCLI_AUTH You can directly use these environment variables to connect to a Materia KV add-on using redis-cli if REDISCLI_AUTH is set:\nredis-cli -h $KV_HOST -p $KV_PORT --tls Materia KV is also compatible with alternatives such as iredis.\nFish shell users If you use the Fish shell, you can use the following command to set the environment variables:\nclever addon env ADDON_ID -F shell | source ℹ️ By default, Materia KV uses TLS on the 6379 port. You can use non-TLS connections on the 6378 port for testing purposes. Clever KV We’re exploring how Clever Tools can natively support Materia KV and helps you to manage such add-ons without any additional software or configuration. We’ve enabled the clever kv command in a testing branch available here. You can download it as a binary and only need the KV_TOKEN environment variable to be set to use it, or target a specific add-on with the --addon option.\nLearn more about Clever KV Demos and examples We’ve prepared a few examples to help you get started with Materia KV:\nMateria KV Go client Materia KV raw TCP V demo Materia KV raw TCP Ruby demo Supported types and commands During this alpha stage, we don’t provide 100% compatibility with the Redis API. Currently supported value types are:\nString Find below the list of currently supported commands:\nCommands Description APPEND If key already exists and is a string, this command appends the value at the end of the string. If key doesn’t exist it is created and set as an empty string, so APPEND will be similar to SET in this special case. AUTH Authenticate the current connection using the biscuit token as password. CLIENT ID Returns the ID of the current connection. A connection ID has is never repeated and is monotonically incremental. COMMAND Return an array with details about every supported command. COMMAND DOCS Return documentary information about commands. By default, the reply includes all the server’s commands. You can use the optional command-name argument to specify the names of one or more commands. The reply includes a map for each returned command. COMMAND INFO Returns an array reply of details about multiple Materia KV commands. Same result format as COMMAND except you can specify which commands get returned. If you request details about non-existing commands, their return position will be nil. COMMAND LIST Return an array of the server’s command names. DBSIZE Return the number of keys in the currently-selected database. DECR Decrements the number stored at key by one. If the key doesn’t exist, it is set to 0 before performing the operation. An error is returned if key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to 64-bit signed integers. DECRBY Decrements the number stored at key by the given decrement. If the key doesn’t exist, it is set to 0 before performing the operation. An error is returned if key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to 64-bit signed integers. DEL Removes the specified key. A key is ignored if it doesn’t exist. EXISTS Returns if key exists. EXPIRE Set a key time to live in seconds. After the timeout has expired, the key will be automatically deleted. The time to live can be updated using the EXPIRE command or cleared using the PERSIST command. FLUSHALL Delete all the keys of all the existing databases, not just the currently selected one. This command never fails. FLUSHDB Delete all the keys of the currently selected DB. This command never fails. GET Get the value of key. If the key doesn’t exist the special value nil is returned. An error is returned if the value stored at key is not a string, because GET only handles string values. GETBIT Returns the bit value at offset in the string value stored at key. GETRANGE Returns the substring of the string value stored at key, determined by the offsets start and end (both are inclusive). Negative offsets can be used in order to provide an offset starting from the end of the string. So -1 means the last character, -2 the penultimate and so forth. HELLO Switch to a different protocol, optionally authenticating and setting the connection’s name, or provide a contextual client report. It always replies with a list of current server and connection properties. INCR Increments the number stored at key by one. If the key doesn’t exist, it is set to 0 before performing the operation. An error is returned if key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to 64-bit signed integers. INCRBY Increments the number stored at key by the given increment. If the key doesn’t exist, it is set to 0 before performing the operation. An error is returned if key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to 64-bit signed integers. INFO The INFO command returns information and statistics about the server in a format that is simple to parse by computers and easy to read by humans. KEYS Returns all keys matching pattern, can be * MGET Returns the values of all specified keys. For every key that doesn’t hold a string value or doesn’t exist, the special value nil is returned. Because of this, the operation never fails. MSET Sets the given keys to their respective values. MSET replaces existing values with new values, just as regular SET. MSET is atomic, so all given keys are set at once. It is not possible for clients to see that some keys were updated while others are unchanged. PERSIST Remove the existing time to live associated with the key. PEXPIRE Set a key time to live in milliseconds. After the timeout has expired, the key will be automatically deleted. The time to live can be updated using the PEXPIRE command or cleared using the PERSIST command. PING Returns PONG if no argument is provided, otherwise return a copy of the argument as a bulk. PTTL RReturns the remaining time to live of a key, in milliseconds. SCAN Incrementally iterate over a collection of elements. It is a cursor based iterator, this means that at every call of the command, the server returns an updated cursor that the user needs to use as the cursor argument in the next call. An iteration starts when the cursor is set to 0, and terminates when the cursor returned by the server is 0. SET Set key to hold the string value. If key already holds a value, it is overwritten, regardless of its type. SETBIT Sets or clears the bit at offset in the string value stored at key. STRLEN Returns the length of the string value stored at key. An error is returned when key holds a non-string value. TTL Returns the remaining time to live of a key, in seconds. TYPE Returns the string representation of the type of the value stored at key. Can be: hash, list or string. "},"title":"Materia KV"},"/developers/doc/addons/matomo/":{"data":{"":"Matomo is an open-source web analytics solution which gives you full ownership of your data. It’s a GDPR compliant alternative to Google Analytics. You can learn more about Matomo on their website.\nMatomo on Clever Cloud will allow your marketing team to effortlessly setup a tailored web analytics solution, that can be adjusted to your needs and workloads.","accessing-the-matomo-interface#Accessing the Matomo interface":"Once you created your add-on, you should get to the dashboard and see a link named Access Matomo. Opening that link will redirect you to our SSO authentication.\nClever Cloud has its own SSO (Single Sign-On) authentication to authenticate to various services. All members of your organization will be able to authenticate to the services in the same organization, using their Clever Cloud account.\nWhen a service needs to authenticate you, it redirects to a login form. Enter your Clever Cloud credentials as well as your 2FA Authentication code if needed.\nIf it’s the first time you use the Clever Cloud SSO, accept the tokens permissions when asked for. Accept all the rights listed, otherwise the backend service might not work correctly.\nIf you mistakenly disabled some rights at some point, you have to revoke all tokens generated by this OAuth consumer:\nFirst, go to your user’s OAuth token in the Web console Then, find all tokens named Keycloak Consumer and revoke them Try to log-in again. The rights list should now be displayed. ","configure-your-matomo-instance#Configure your Matomo instance":"Once you accessed your Matomo interface, we can start configuring it. A custom Clever Cloud configuration is automatically installed on your instance during the provisioning.\nThis configuration helps you taking advantage of optimizations by using a Redis cache by default.\nUsing your Matomo If you’re new with Matomo, you would probably want to read the Matomo’s guides on the official documentation.","create-matomo-add-on#Create Matomo add-on":"Web Console Create a new add-on by clicking on the Create… dropdown in the sidebar and then an add-on. Select the Matomo add-on. You can skip linking the add-on to an application, it won’t be needed. Enter the name of your Matomo add-on and select the zone where you wish to deploy it. It’s done! CLI Make sure you have clever-tools installed locally. Report to the getting started guide if needed. List the available plans and options for Matomo: clever addon providers show Matomo. In your terminal, you can then run clever addon create matomo \u003capp-name\u003e --region \u003cregion\u003e --org \u003corg\u003e where app-name is the name you want for your add-on, region deployment region, and org the organization ID the application will be created under. Refer to the documentation for more details on application creation with Clever Tools","how-it-works#How it works?":"When you subscribe the Matomo add-on, we automatically setup a PHP instance based on the latest Matomo release. It comes with the required MySQL database and an optional Redis cache.\nWe have chosen to let you see and manage these companion add-ons in the Console so that you could adjust them to your needs. You can change their settings and use the Clever Cloud ability to migrate from an S flavored database or cache to an L or XL if required. You can also activate auto-scalability (horizontal and/or vertical scaling).\nBy default, Matomo on Clever Cloud comes with small sized add-ons:\nPHP Nano MySQL XXS BigStorage Redis S We’ve already integrated the Clever Cloud SSO, so you can login directly into your matomo instance from the Console, start to integrate your website, create different users.","matomo-plugins#Matomo plugins":"Your Matomo instance comes with a list of pre-installed plugins. As a managed instance, our Matomo addon won’t let you bypass the installation process. Installed plugins already allows a quite advanced use of Matomo, but if you wish to install a specific plugin that’s not in your instance, feel free to contact our suport team.\nWhen activating a deactivated plugin Keep in mind that some plugins might consume more ressources than you have by default on your PHP instance, since some PHP processes can take a long time, depending on what you are doing.\nIf you activate a deactivated by default plugin (like GoogleAnalyticsImporter):\nScale your PHP app Disable autoscalability for the PHP app Scale your Matomo MySQL addon If you activate the plugin while enabling autoscalability, your PHP insatnce will restart with default settings when scaling, therefore disabling the plugin and killing the process.\nPlugins can be browsed from Matomo own plugin repository.\n⚠️ Plugin files are removed everytime your instance reboots. This means you have to reinstall them all again after every reboot. This is temporary, and it is something we plan on improving as soon as we can. QueudTracking By default, the QueudTracking plugin is enabled on Matomo instances, with a queue size of 25.\nThis means that the plugin stores 25 visits in a queue before they appear in Matomo.\nThis helps to prevent the server from receiving too many request at once.\nYou can change the size of the queue in your Matomo settings, by modifying the Number of requests that are processed in one batch parameter in Administration-\u003eSystem-\u003eGeneral settings.","plans#Plans":"Matomo on Clever Cloud is the easiest way to set it up, but you can go further and adjust the flavour of your instance, database or cache. We provide different plans for PHP, MySQL and Redis.","security-and-updates#Security and updates":"The Matomo add-on is a fully managed application, you don’t have to select a particular version. Clever Cloud updates it for both features and security, and manages it continuously to apply regular version upgrades.\nAfter being updated, you Matomo add-on could need to be restarted."},"title":"Matomo"},"/developers/doc/addons/metabase/":{"data":{"":"Metabase is an open source Business Intelligence server that connects to MySQL, PostgreSQL, MongoDB, and more! Anyone can use it to build charts, dashboards, nightly emails or Slack reports. Thanks to this add-on, you can deploy Metabase in your organization in just one click. It leverages all Clever Cloud features such as monitoring, scalability, high availability SLA, etc.\nℹ️ Metabase is in Beta testing phase: your insights and suggestions are crucial in shaping the future of this platform. To share your feedback, please visit us at our community page. Thank you for being a part of our journey towards innovation and improvement! ","acessing-the-metabase-interface#Acessing the Metabase Interface":"Once deployed, Metabase is accessible through an URL provided in the add-on’s Service dependencies page. You can also go in the environment variables page of the Java application and look for MB_SITE_URL value. To get this URL with Clever Tools, use the add-on ID:\n$ clever addon env ADDON_ID METABASE_URL=\"https://an_id-metabase.services.clever-cloud.com\" ","configuring-a-smtp-server#Configuring a SMTP Server":"While this is not strictly required to successfully operate Metabase, it might be useful to configure a SMTP server. There are two main usages:\nSending user management/security emails (new user connections, account recoveries, invitations, …) Sending questions/dashboards emails (when users created subscriptions to them) Clever Cloud does not provide a SMTP server for your Metabase add-on. You can use a MailPace add-on or any other SMTP server.\nThe SMTP server can be configured (and tested) in Metabase administration interface. See documentation for more details.\nUsing a MailPace Add-On If you have a MailPace add-on, you can link it to the Java application of your Metabase add-on using Clever Cloud’s console:\nGo to the Java application of the Metabase add-on Open the “Service dependencies” page In the “Linked add-ons” section, select your MailPace add-on and click “Add” Restart the Java application of your Metabase add-on When a MailPace add-on is linked, Metabase will automatically get the SMTP server and credentials using (hidden) environment variables. In this case, SMTP settings will not be editable from Metabase interface; just unlink the MailPace add-on if you prefer to edit them manually.\nYou still need to specify the email address which Metabase must use as sender (use Metabase administration interface or set the MB_EMAIL_FROM_ADDRESS environment variable). Make sure you MailPace account is able to send email from this address/domain.","create-a-metabase-add-on#Create a Metabase add-on":"From the Console Create a new add-on by clicking the Create… dropdown in the sidebar and then an add-on Select the Metabase add-on You can skip linking the add-on to an application, it won’t be needed (connecting data sources to Metabase is done via Metabase’s UI) Enter a name for your Metabase add-on and select the zone where you want it to be deployed Using the CLI Make sure you have clever-tools installed locally. Please refer to the setup guide if needed List the available plans and options for Metabase: clever addon providers show metabase In your terminal, run clever addon create metabase \u003cname\u003e --org \u003corg\u003e (--org is optional) Refer to the Clever Tools documentation for more details on add-on management.","credentials-at-rest-encryption#Credentials At-Rest Encryption":"When you add a new data source to Metabase, its credentials are stored into Metabase internal database. Metabase offers an optional feature that allows you to encrypt such credentials before storing them in the database.\nWhen you deploy a Metabase add-on, this at-rest encryption is enabled by default. This is why the Java app of your add-on has a MB_ENCRYPTION_SECRET_KEY environment variable that contains a randomly generated value.","key-features#Key Features":"Metabase on Clever Cloud is a preconfigured set of resources, benefiting from all features the platform provides such as monitoring, scalability, up-to date systems, blue/green deployments, etc. It’s easy to manage and allows you to make better sense of the business metrics produced by your application. Once deployed, Metabase takes form of a web application in which you can:\nNavigate and explore data in the connected databases Create dashboards that regroup multiple questions in a canva Integrate questions/dashboards in another application Share a questions/dashboard to anyone using an anonymous link Periodically send results of a question/dashboard by email/Slack Configure data visualization for questions results: table, line chart, pie chart, gauge, single number, etc. Connect external databases; it works with add-ons such as MySQL, PostgreSQL, MongoDB and many other data sources Create questions either by typing in SELECT SQL queries or by using Metabase’s UI to build such queries without using SQL You can also save questions and organize them in collections. When opening a saved question, fresh data is extracted from the source DB, so that questions always show fresh results. You get user management with groups and permissions: users can access to whole data sources so that they can explore and create questions, or they can have access only to collections containing already existing questions/dashboard.","migrating-from-a-self-hosted-instance#Migrating From a Self-Hosted Instance":"Even if you already have a self-hosted Metabase instance, you might want to migrate to the Metabase add-on in order to benefit from automatic upgrades. This is possible if your self-hosted instance uses PostgreSQL as its internal database.\nHere is how you can do it:\nCreate an instance of the Metabase add-on in your Clever Cloud organization In the add-on Java application, set CC_METABASE_VERSION to the same version as your existing self-hosted instance Stop the Java application of your Clever Cloud add-on Stop your self-hosted instance Use pg_dump to export the whole internal database of your self-hosted instance Using pgAdmin (or another PostgreSQL client of you choice), connect to the PostgreSQL database of your Clever Cloud add-on, delete the public schema and recreate it (so that it is empty) Use pg_restore to restore the dump to the PostgreSQL database of your Clever Cloud add-on (use the --no-owner to avoid errors related to objects ownership) (optional) Configure the Java application domain and update your DNS record accordingly; if you use a custom domain, you should also update the MB_SITE_URL environment variable (it defines the base URL used by links in Metabase emails, among other things) Start the Java application of your Clever Cloud add-on If everything seems OK, set CC_METABASE_VERSION to the value you wish (for example, community-latest) in the Java application of your Clever Cloud add-on and restart it. Contact the Clever Cloud support if you need advice or help doing that.","plan-sizing#Plan sizing":"By default, Metabase on Clever Cloud uses small-size resources, i.e:\nXS Java XXS Small Space PostgreSQL They are dimensioned to suit a majority of needs. You can however manage and adjust them directly in the Console. For example when you have multiple users loading large dashboards concurrently or if your instance experiences crashes due to Out of Memory (OOM) issues, you should use a larger flavor for the Java application or activate auto-scalability. The PostgreSQL database is not likely to be needed a larger plan, but should this happen you can migrate it using Clever Cloud’s Console.","underlying-resources#Underlying Resources":"When you create the Metabase add-on, Clever Cloud automatically deploys:\nA Java instance with Metabase pre-loaded A PostgreSQL database (for internal Metabase use) When you first connect to your Metabase instance, you will be taken to a wizard to create the first user, data sources, etc. Then you can configure and use it.\nLearn how to use Metabase ","version-management-security-and-updates#Version management, Security and Updates":"The Metabase add-on is a fully managed application, so you don’t have to do anything to update it: by default it is automatically updated to match the latest Community Edition release. Your add-on will be automatically restarted when a new Metabase release is available, but thanks to Clever Cloud this will be done without downtime. All deployed versions are reviewed and tested before being released.\nOf course, you have full control other this. The Java application of your Metabase add-on contains a CC_METABASE_VERSION environment variable. This variable can be modified to specify which version of Metabase you want. This variable must contain a value that is either a special keyword or a SemVer version requirement (the only difference with SemVer is that x.y.z is interpreted as =x.y.z instead of ^x.y.z.):\nCC_METABASE_VERSION=community-latest (default): use the latest version of the Community Edition _(same as 0, 0.*, ^0 or empty) CC_METABASE_VERSION=0.50.3: use the 0.50.3 version _(same as =0.50.3) CC_METABASE_VERSION=0.50: use the latest available version starting with 0.50 _(same as ^0.50.0, ~0.50.0) To update Metabase manually, you should restart the Java application without the build cache, using the re-build and restart button in the Console or the clever restart --without-cache command of Clever Tools. The Metabase JAR is stored in the build cache so that no time is wasted re-downloading it every time you restart the application (or it is restarting as part of a scaling event). This also makes the service more resilient: should the download be temporarily failing for any reason, this would not prevent restarting/scaling your add-on.\n⚠️ With great power comes great responsibility. If you choose to fix your add-on to a specific version (for example, 0.50.3) or a specific “branch” (for example, 0.50), you must make sure that this version/branch does not become obsolete (new Metabase versions that patch critical security issues may be released but not used in your add-on because you specified otherwise). The Atom feed (XML) of latest versions and their changelog The TOML list of all available versions and their changelog Using Metabase Enterprise Edition Metabase provides an Enterprise Edition (EE) that offers more features but requires a license key that must be purchased through their website (see the pricing page) EE versions are usually released at the same time as Community Edition (CE) versions, starting with a 1 instead of a 0.\nIf you wish to deploy an EE version on your Clever Cloud add-on, CC_METABASE_VERSION environment variable to either use a fixed version/branch that starts with 1 (for example: CC_METABASE_VERSION=1.50) or CC_METABASE_VERSION=enterprise-latest.\nYou must then add your license key in Metabase’s settings (see documentation).\nVersion Rollbacks There is nothing stopping you from rolling back your Metabase instance to an older version (using the CC_METABASE_VERSION environment variable), but this may break things. When starting, Metabase checks its attached internal PostgreSQL database and may apply database migrations to evolves its structure. But not all new versions of Metabase add new migrations (patch versions may not, thus this is not a contract).\nThere are two cases:\nA version does not add migrations: rolling-back to the previous version can be done without complications A version adds migrations: rolling-back may or may not work. An older Metabase software is not guaranteed to work with a new database structure, so this could break the whole instance, some features or cause data loss. ℹ️ Rollbacks are not officially supported. If you need to rollback to an older version (for example, because a new version introduced a blocking regression), it is your responsibility to check if this can be done safely. "},"title":"Metabase"},"/developers/doc/addons/mongodb/":{"data":{"":"","-rights-and-permissions#🔑 Rights and permissions":"Overview MongoDB is an open source NoSQL document-oriented database. We provide these databases with daily backups and monitoring for both shared and dedicated plans.\nSupported Versions In order to comply with MongoDB Server Side Public License, the version currently installed by the add-on is:\nDedicated Dev v4.0.3 v4.0.3 ⚠️ Important: Dev plans are free and intended solely for testing purposes. They don’t provide the same guarantees or SLAs as dedicated plans. Higher Versions If you puchased a higher version from MongoDB and you want to deploy your database on Clever Cloud, please contact us.\nAbout Free Databases Free plans are recommended for test and development usage only. Using these databases in production is not recommended, because performance may vary depending on the global usage of the cluster. Therefore, before switching to production, consider upgrading to a dedicated database for better performance.\nImportant Note About Fair Use on Free Databases Heavy usage of free databases may impact the shared cluster they rely upon. It will degrade performance of the other databases. To that extent, we set a soft limit of 15 operations/second. Going above the limit will expose your database to disconnection, would you not answer our notices.\nDatabase Daily Backup and Retention By default, Clever Cloud performs a free backup every day, with a retention of seven days. Retention and frequency can be customized for Premium customers.\nEach backup can be found in the add-on dashboard in the web console, along with the credentials.\nDatabase Migration Process The migration process is pretty much the same for each of these cases:\nmigrating from a Clever Cloud shared database to a dedicated one migrating from an external database to a Clever Cloud one migrating between Clever Cloud Databases The process consists in three steps:\nFirst, perform a backup and download it, either with the Clever Cloud add-on dashboard or the mongodump command from your workstation. Install mongorestore (a tool packaged with MongoDB) On your workstation, use the taylor-made mongorestore command line located in your mongodb dashboard page (open the “Backup” panel and click on the “Restore” link to find the complete command line to perform the database import). If needed, change the nsFrom and nsTo flags, depending on what you actually want to do (importing this database in another, importing another to this one, …). Encryption at rest Encryption at rest is available on MongoDB. You can have more information on the dedicated page\nCan I use Mongo Ops Manager on Clever Cloud? To be able to use Mongo Ops Manager, you’ll need a valid MongoDB Enterprise Advanced subscription and to deploy a Linux version of their manager solution. If you haven’t purchased any license from MongoDB and you are using the Community version, you might be looking for a similar service for your databases.\nDoes Clever Cloud provide a similar service? The features available with Mongo Ops Manager could be relevant if you managed your infrastructure and the maintenance of your MongoDB databases yourself. However, if you use Clever Cloud to access our Mongo add-ons, you are already opting for a managed service, and will therefore benefit from the following features similar to Mongo Ops Manager:\nA centralized interface to access your database settings and perform operations on them. A monitoring and alert system that can be configured with Grafana (an example with Slack alerts can be found here). A backup and restore system already configured for our add-ons (customizable upon request) with easy migration and one-click importation. The ability to automate tasks with our CLI. Enhanced security through our default access management on Clever Cloud (encryption at rest, default unauthorized super admin operations, etc.). Note that these features are available for all our databases add-ons, in addition to MongoDB.\nThe managed databases provide an advantage if you want to avoid the complexity of installing and deploying databases and if you want simple-to-use management and monitoring tools.\n🔑 Rights and permissions Add-ons are managed services, meaning that users have standard access to the database. Some operations like database and user creation, as well as some settings modifications aren’t available by default. This ensures optimal performances and security for managed services as configured by Clever Cloud.\nIf you think your system might require more advanced administrative access, contact Clever Cloud support to explain your use case and we will work with you to find a solution.","about-free-databases#About Free Databases":"","can-i-use-mongo-ops-manager-on-clever-cloud#Can I use Mongo Ops Manager on Clever Cloud?":"","database-daily-backup-and-retention#Database Daily Backup and Retention":"","database-migration-process#Database Migration Process":"","encryption-at-rest#Encryption at rest":"","overview#Overview":"","supported-versions#Supported Versions":""},"title":"MongoDB"},"/developers/doc/addons/mysql/":{"data":{"":"","-rights-and-permissions#🔑 Rights and permissions":"Overview MySQL is an open-source relational database management system (RDBMS).\nSupported Versions Dedicated Dev v5.7.20 v8.0 v8.0.36 ⚠️ Important: Dev plans are free and intended solely for testing purposes. They don’t provide the same guarantees or SLAs as dedicated plans. Database Daily Backup and Retention By default, Clever Cloud performs a free backup every day, with a retention of seven days. Retention and frequency can be customized for Premium customers.\nEach backup can be found in the add-on dashboard in the web console, along with the credentials.\nMigrating from an old database Some applications require a populated database to run properly. If you want to import your SQL dump, you can use several methods:\nOur WebGUI (PHP My Admin). Command line tool for MySQL administration. Any MySQL client such as MySQL Workbench. If you need to import a very large dump, please send an email to support@clever-cloud.com.\nDirect access ⚠️ Using direct access is a trade-off: if you migrate your addon, you will need to generate the hostname and port again, so your application will need to update that environment, while using a proxy does not change anything. All our dedicated MySQL databases are served via a proxy. To reduce the latency you can bypass this proxy by generating direct hostname and port for the addon. You can do it by clicking the “Generate direct hostname and port” on the addon dashboard.\nThis action will add new environment variables to reach the addon without any proxy.\nEncryption at rest Encryption at rest is available on MySQL. You can have more information on the dedicated page\nProxySQL ProxySQL is a tool that acts like a proxy between your application and your MySQL add-on. Instead of connecting to your MySQL add-on, you can connect to the local ProxySQL and it will forward all your requests to your MySQL add-on.\nThis allows you to let ProxySQL take care of some interesting features like connection pooling or leader / follower setup.\nYou can learn more about ProxySQL on the dedicated documentation page\nPlans ⚠️ As Shared databases (DEV) are shared between multiple applications and delays could appear in case of an high demand. If this delays create problems in your application or are problematcs, we recommend you to use a dedicated database (XS plans and above). 🔑 Rights and permissions Add-ons are managed services, meaning that users have standard access to the database. Some operations like database and user creation, as well as some settings modifications aren’t available by default. This ensures optimal performances and security for managed services as configured by Clever Cloud.\nIf you think your system might require more advanced administrative access, contact Clever Cloud support to explain your use case and we will work with you to find a solution.","database-daily-backup-and-retention#Database Daily Backup and Retention":"","direct-access#Direct access":"","encryption-at-rest#Encryption at rest":"","migrating-from-an-old-database#Migrating from an old database":"","overview#Overview":"","plans#Plans":"","proxysql#ProxySQL":"","supported-versions#Supported Versions":""},"title":"MySQL"},"/developers/doc/addons/postgresql/":{"data":{"":"","-rights-and-permissions#🔑 Rights and permissions":"Overview PostgreSQL is an object-relational database management system (ORDBMS) with an emphasis on extensibility and on standards-compliance.\nSupported Versions Dedicated Dev v11.22 v15 v12.19 v13.15 v14.12 v15.7 ⚠️ Important: Dev plans are free and intended solely for testing purposes. They don’t provide the same guarantees or SLAs as dedicated plans. Database Daily Backup and Retention By default, Clever Cloud performs a free backup every day, with a retention of seven days. Retention and frequency can be customized for Premium customers.\nEach backup can be found in the add-on dashboard in the web console, along with the credentials.\nMigrating from an old database Some applications require a non-empty database to run properly. If you want to import your SQL dump, you can use several methods:\nWebGUI (Adminer) Command line tool for PostgreSQL administration like psql Any PostgreSQL client such as pgAdmin Direct access A proxy serves all dedicated PostgreSQL databases. In some cases, this can add some latency between applications and their database. If this is an issue, you can generate a direct hostname and port for the add-on to bypass the proxy, using the “Generate direct hostname and port” button in the add-on dashboard.\nGenerating direct access adds new variables to the add-on’s environment, allowing connections without going through the proxy.\nℹ️ Direct access doesn’t persist after migrating a database. Manually re-generate direct host name and port after a migration to allow applications linked through direct access to connect to the database.\nSuch a limitation doesn’t exist when using proxy access.\nEncryption at rest Encryption at rest is available on PostgreSQL. You can find more information on the dedicated page\nNote on shared databases If you try to list the databases on the shared cluster, you will see the names of the databases of all other users of the cluster. This is normal behaviour. Rest assured, permissions are set properly, meaning no one but your user can read or write data to your database.\nThis referencing does not exist for dedicated databases.\nPgpool-II Pgpool-II is a proxy software that sits between PostgreSQL servers and a PostgreSQL database client.\nYou can read the official project page for more information.\nYou can learn more about Pgpool-II on the dedicated documentation page\nDefault extensions PostgreSQL databases managed by Clever Cloud comes with these extensions:\nExtension Description adminpack Administrative functions for PostgreSQL autoinc Functions for autoincrementing fields btree_gin Support for indexing common datatypes in GIN btree_gist Support for indexing common datatypes in GiST citext Data type for case-insensitive character strings cube Data type for multidimensional cubes dblink Connect to other PostgreSQL databases from within a database dict_int Text search dictionary template for integers dict_xsyn Text search dictionary template for extended synonym processing earthdistance Calculate great-circle distances on the surface of the Earth file_fdw Foreign-data wrapper for flat file access fuzzystrmatch Determine similarities and distance between strings hstore Data type for storing sets of (key, value) pairs hypopg Hypothetical indexes for PostgreSQL insert_username Functions for tracking who changed a table intagg Integer aggregator and enumerator (obsolete) intarray Functions, operators, and index support for 1-D arrays of integers isn Data types for international product numbering standards lo Large Object maintenance ltree Data type for hierarchical tree-like structures moddatetime Functions for tracking last modification time pageinspect Inspect the contents of database pages at a low level pg_buffercache Examine the shared buffer cache pg_freespacemap Examine the free space map (FSM) pg_stat_statements Track planning and execution statistics of all SQL statements executed pg_trgm Text similarity measurement and index searching based on trigrams pgcrypto Cryptographic functions pgrowlocks Show row-level locking information pgstattuple Show tuple-level statistics pgvector Vector data type and ivfflat and hnsw access methods plcoffee PL/CoffeeScript (v8) trusted procedural language plls PL/LiveScript (v8) trusted procedural language plpgsql PL/pgSQL procedural language plv8 PL/JavaScript (v8) trusted procedural language postgis PostGIS geometry and geography spatial types and functions postgis_raster PostGIS raster types and functions postgis_tiger_geocoder PostGIS tiger geocoder and reverse geocoder postgis_topology PostGIS topology spatial types and functions postgres_fdw Foreign-data wrapper for remote PostgreSQL servers refint Functions for implementing referential integrity (obsolete) seg Data type for representing line segments or floating-point intervals sslinfo Information about SSL certificates tablefunc Functions that manipulate whole tables, including crosstab tcn Triggered change notifications unaccent Text search dictionary that removes accents uuid-ossp Generate universally unique identifiers (UUIDs) xml2 XPath querying and XSLT On-demand extensions In the Console’s Ticket Center, you can ask our support team to add any of these extensions for you:\nExtension Description pg_cron Job scheduler for PostgreSQL pg_ivm Incremental view maintenance for PostgreSQL pgtap Unit testing for PostgreSQL timescaledb Enables scalable inserts and complex queries for time-series data (Apache 2 Edition) ⚠️ On-demand extensions aren’t available for DEV plans. Automatic vacuuming Autovacuum is automatically enabled on PostgreSQL add-ons. The autovacuum will proceed when a given percentage of rows of a table will be updated/inserted/deleted. Usually this threshold is set to 20%.\npg_activity If you want to use pg_activity on a PostgreSQL add-on, but you encounter the following error Exception: Must be run with database superuser privileges., you need to add the --rds flag when you start it.\n🔑 Rights and permissions Add-ons are managed services, meaning that users have standard access to the database. Some operations like database and user creation, as well as some settings modifications aren’t available by default. This ensures optimal performances and security for managed services as configured by Clever Cloud.\nIf you think your system might require more advanced administrative access, contact Clever Cloud support to explain your use case and we will work with you to find a solution.","automatic-vacuuming#Automatic vacuuming":"","database-daily-backup-and-retention#Database Daily Backup and Retention":"","default-extensions#Default extensions":"","direct-access#Direct access":"","encryption-at-rest#Encryption at rest":"","migrating-from-an-old-database#Migrating from an old database":"","note-on-shared-databases#Note on shared databases":"","on-demand-extensions#On-demand extensions":"","overview#Overview":"","pg_activity#\u003ccode\u003epg_activity\u003c/code\u003e":"","pgpool-ii#Pgpool-II":"","supported-versions#Supported Versions":""},"title":"PostgreSQL"},"/developers/doc/addons/pulsar/":{"data":{"":" ⚠️ Pulsar is still in beta. ","authorization#Authorization":"Pulsar add-on uses Biscuit for Pulsar implementation which is directly pluggable to the Pulsar authentication and authorization system. Each add-on exposes its own Biscuit token.\nAs Biscuit is a token, you can use AuthenticationToken($ADDON_PULSAR_TOKEN) provided by clients libraries to authenticate to our clusters without any tweak.\nAttenuation The Pulsar add-on given Biscuit token can be attenuated, here is an attenuation example using biscuit-cli from the given Biscuit token to produce/consume topics starting with a custom topic prefix called \"my-own-prefix\".\nPut your Biscuit token in a file:\necho $ADDON_PULSAR_TOKEN \u003e addon.biscuit Inspect your Biscuit token:\nbiscuit inspect addon.biscuit Authority block: == Datalog == right(\"admin\"); == Revocation id == 0392cdc4dbda294fd254269ad0ce5d1ad2e9c6301b189945074dd051890e495dd16bf5390f84e8499a2045bde85795636f2e156309f9b425270979957e50280a ========== Block n°1: == Datalog == check if namespace(\"user_1235678-f54e-4e09-848c-1953af6e3e89\", \"pulsar_1235678-6b36-4af2-be1f-d97862c0c41c\") or topic(\"user_1235678-f54e-4e09-848c-1953af6e3e89\", \"pulsar_1235678-6b36-4af2-be1f-d97862c0c41c\", $topic); == Revocation id == 4a72ca17001b173853f5cd6cce7b46ba4113b1d6e934a3e13e717f91e276c3230861ee49c843c4aafd7d11b14903a7ff32f9e2b35bd6f84794ba3dc6e3c0450c ========== The authority block is the cluster authentication block (the cluster admin Biscuit token). The block n°1 is an attenuation of the authority block to only authorize operations on tenant = \"user_1235678-f54e-4e09-848c-1953af6e3e89\" and namespace = \"pulsar_1235678-6b36-4af2-be1f-d97862c0c41c\". Attenuate it:\nbiscuit attenuate addon.biscuit This will open your $EDITOR to type the attenuation.\nPut\ncheck if topic_operation($operation), $topic.starts_with(\"my-own-prefix\") Then it outputs the attenuated token. Inspect it to ensure your attenuation:\nAuthority block: == Datalog == right(\"admin\"); == Revocation id == 0392cdc4dbda294fd254269ad0ce5d1ad2e9c6301b189945074dd051890e495dd16bf5390f84e8499a2045bde85795636f2e156309f9b425270979957e50280a ========== Block n°1: == Datalog == check if namespace(\"user_1235678-f54e-4e09-848c-1953af6e3e89\", \"pulsar_1235678-6b36-4af2-be1f-d97862c0c41c\") or topic(\"user_1235678-f54e-4e09-848c-1953af6e3e89\", \"pulsar_1235678-6b36-4af2-be1f-d97862c0c41c\", $topic); == Revocation id == 4a72ca17001b173853f5cd6cce7b46ba4113b1d6e934a3e13e717f91e276c3230861ee49c843c4aafd7d11b14903a7ff32f9e2b35bd6f84794ba3dc6e3c0450c ========== Block n°2: == Datalog == check if topic_operation($operation), $topic.starts_with(\"my-own-prefix\"); == Revocation ids == 3b71ba17001b173853f5cd6cce7b46ba4113b1d6e934a3e13e717f91e276c3230861ee49c843c4aafd7d11b14903a7ff32f9e2b35bd6f84794ba3dc6e3c0450d ========== Now the block n°2 ensures that topics must start with \"my-own-prefix\".\nYou can find more examples on the biscuit-pulsar authorization java tests.","common-use-cases#Common use cases":" Replicating data among databases using Pulsar IO is commonly used to distribute change events from databases. Parallel processing and workflows. You can efficiently distribute a large number of tasks among multiple workers (compressing text files, sending email notifications). Data streaming from IoT devices. For example, a residential sensor can stream data to backend servers. Refreshing distributed caches. For example, an application can publish invalidation events to update the IDs of objects that have changed. Real-time event distribution. Events, raw or processed, may be made available to multiple applications across your team and organization for real time processing. ","create-a-pulsar-add-on#Create a Pulsar add-on":"It is as simple and straightforward as creating any other add-on. In your personnal space, click on Create \u003e an add-on \u003e Pulsar. Choose your plan, link an app to it (or not), give it a name and a zone, and it’s done.","overview#Overview":"Pulsar works on a publisher/subscriber model. It allows services to communicate asynchronously, with latencies ranging around 100 milliseconds. It is used for streaming analytics and data integration pipelines to ingest and distribute data. It is equally effective as messaging-oriented middleware for service integration or as a queue to parallelize tasks. It also enables you to create systems of event producers and consumers. Publishers communicate with subscribers asynchronously by broadcasting events.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'fontFamily':'Arial', 'primaryColor': '#FFFFFF', 'primaryTextColor': '#6b7280', 'primaryBorderColor': '#e5e7eb', 'lineColor': '#545191', 'secondaryColor': '#FFFFFFCC', 'tertiaryColor': '#e5e7eb' } } }%% flowchart RL B(\"Pulsar Topic\"):::pulsar direction LR C[Client producer] -- publishes to --\u003e B direction RL D[\"Client consumer\"]-- subscribes to --\u003e B classDef pulsar stroke:#188FFFThey are several modes of subscription. A consumer may subscribe exclusively, or share the subscription with other consumers. There is the subscription mode types:\nExclusive (only one consumer for the subscription) Failover (if a consumer fails, another one receives the message) Shared (messages are distributed to several consumers) Key_Shared (messages come with keys and go to consumers with the corresponding key) More on this in the official documentation.\nA topic is defined this way:\n{persistent|non-persistent}://tenant/namespace/topic\nTenants and namespaces allow for grouping and subgrouping of topics.\nA Clever Cloud Pulsar add-on is basically an immutable tenant/namespace where the tenant is your user id, and the namespace is the add-on id. It allows you to create and use topics following this pattern:\n{persistent|non-persistent}://\u003cCLEVERCLOUD_TENANT_ID\u003e/\u003cADDON_ID\u003e/\u003cTOPIC_NAME\u003e","storage#Storage":"Retention A Pulsar add-on is provided with infinite retention policies, which can be changed using:\n# Example to set retention of namespace to 2 weeks and/or 100 GB pulsarctl --admin-service-url $ADDON_PULSAR_HTTP_URL \\ --auth-params $ADDON_PULSAR_TOKEN \\ --auth-plugin org.apache.pulsar.client.impl.auth.AuthenticationToken \\ namespaces set-retention $ADDON_PULSAR_TENANT/$ADDON_PULSAR_NAMESPACE --time 2w --size 100G Offload storage to Cellar (S3) Pulsar has a tiered storage feature allowing to offload heavy data to cold storage once a threshold is reached.\nFor each Pulsar add-on we provide, we also provide a hidden Cellar add-on, our object storage add-on. This Cellar add-on is bound to the Pulsar namespace offload policies and will store your offloaded data.\nThe offload threshold of the namespace is deactivated by default, you can activate it with:\n# Example to set offload to run when hot storage is \u003e 10G and put data to Cellar Addon pulsarctl --admin-service-url $ADDON_PULSAR_HTTP_URL \\ --auth-params $ADDON_PULSAR_TOKEN \\ --auth-plugin org.apache.pulsar.client.impl.auth.AuthenticationToken \\ namespaces set-offload-treshold $ADDON_PULSAR_TENANT/$ADDON_PULSAR_NAMESPACE 10G ","usage#Usage":"We advise you to use pulsarctl provided by StreamNative. Here is an example to list topics in your add-on (in your namespace):\npulsarctl --admin-service-url $ADDON_PULSAR_HTTP_URL \\ --auth-params $ADDON_PULSAR_TOKEN \\ --auth-plugin org.apache.pulsar.client.impl.auth.AuthenticationToken \\ namespaces topics $ADDON_PULSAR_TENANT/$ADDON_PULSAR_NAMESPACE Rust example Clever Cloud maintains pulsar’s asynchronous Rust client, which support biscuits. Here is a minimal example that produces (publishes) a “Hello, World!” on the topic my-own-topic:\n# Cargo.toml [dependencies] tokio = {version = \"1.9.0\", features = [\"full\"] } pulsar = \"4.0.0\" serde_json = \"1.0.66\" serde = { version = \"1.0.127\", features = [\"derive\"] } use pulsar::{ message::proto, producer, Error as PulsarError, Pulsar, SerializeMessage, TokioExecutor, }; use serde::{Deserialize, Serialize}; #[derive(Serialize, Deserialize)] struct TestData { data: String, } impl SerializeMessage for TestData { fn serialize_message(input: Self) -\u003e Result\u003cproducer::Message, PulsarError\u003e { let payload = serde_json::to_vec(\u0026input).map_err(|e| PulsarError::Custom(e.to_string()))?; Ok(producer::Message { payload, ..Default::default() }) } } #[tokio::main] async fn main() -\u003e Result\u003c(), pulsar::Error\u003e { let pulsar_addon_url = std::env::var(\"ADDON_PULSAR_BINARY_URL\").unwrap(); let biscuit = std::env::var(\"ADDON_PULSAR_TOKEN\").unwrap(); let tenant = std::env::var(\"ADDON_PULSAR_TENANT\").unwrap(); let namespace = std::env::var(\"ADDON_PULSAR_NAMESPACE\").unwrap(); let topic = format!(\"non-persistent://{}/{}/my-own-topic\", tenant, namespace); let auth = pulsar::Authentication { name: \"token\".to_string(), data: biscuit.clone().into_bytes(), }; let pulsar: Pulsar\u003c_\u003e = Pulsar::builder(pulsar_addon_url, TokioExecutor) .with_auth(auth) .build() .await?; let mut producer = pulsar .producer() .with_topic(topic) .with_name(\"my-producer\") .with_options(producer::ProducerOptions { schema: Some(proto::Schema { r#type: proto::schema::Type::String as i32, ..Default::default() }), ..Default::default() }) .build() .await?; producer .send(TestData { data: \"Hello world!\".to_string(), }) .await?; Ok(()) } Java example There is an official Java Pulsar Client, import it in your pom.xml:\n\u003cdependency\u003e \u003cgroupId\u003eorg.apache.pulsar\u003c/groupId\u003e \u003cartifactId\u003epulsar-client\u003c/artifactId\u003e \u003cversion\u003e2.8.0\u003c/version\u003e \u003c/dependency\u003e PulsarClient client = PulsarClient.builder() .authentication(new AuthenticationToken(\"ADDON_PULSAR_TOKEN\")) .serviceUrl(\"ADDON_PULSAR_BINARY_URL\") .build(); String TOPIC = \"non-persistent://{}/{}/my-own-topic\" Producer\u003cString\u003e producer = client.newProducer(Schema.STRING) .topic(TOPIC) .create(); producer.send(\"Hello world!\"); Consumer consumer = client.newConsumer() .topics(Arrays.asList(TOPIC)) .consumerName(\"my-consumer-name\") .subscriptionName(\"my-subscription-name\") .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest) .subscribe(); while (!consumer.hasReachedEndOfTopic()) { Message\u003cString\u003e msg = consumer.receive(); // Got the message! } Python example There is an official Python Pulsar Client, import it in your requirements.txt:\npulsar-client==2.10.2 import pulsar import os import json from pulsar import AuthenticationToken from transfer import transfer client = pulsar.Client( os.getenv(\"ADDON_PULSAR_BINARY_URL\"), authentication=AuthenticationToken(os.getenv(\"ADDON_PULSAR_TOKEN\")), ) tenant = os.getenv(\"ADDON_PULSAR_TENANT\") namespace = os.getenv(\"ADDON_PULSAR_NAMESPACE\") topic = \"persistent://{}/{}/TOPIC_NAME\".format(tenant, namespace) producer = client.create_producer(topic) for i in range(10): producer.send(('Hello-%d' % i).encode('utf-8')) while True: msg = consumer.receive() print(\"Received message id='{}' with data\\n{}\\n\".format(msg.message_id(), msg.data())) # Acknowledge successful processing of the message consumer.acknowledge(msg) # Message failed to be processed client.close() Operations The Biscuit token provided by the Pulsar add-on allows you to run several operations on namespace, its policies and the related topics.\nThese operations might change in the future. Don’t hesitate to write to our support to ask for new operations!\nNamespace Authorized namespace operations:\nCREATE_TOPIC GET_TOPIC GET_TOPICS DELETE_TOPIC GET_BUNDLE CLEAR_BACKLOG UNSUBSCRIBE Topics Authorized topics operations:\nLOOKUP PRODUCE CONSUME COMPACT EXPIRE_MESSAGES OFFLOAD PEEK_MESSAGES RESET_CURSOR SKIP TERMINATE GET_BUNDLE_RANGE SUBSCRIBE GET_SUBSCRIPTIONS UNSUBSCRIBE GET_STATS GET_METADATA GET_BACKLOG_SIZE SET_REPLICATED_SUBSCRIPTION_STATUS Namespace and topic policies Authorized namespace/topic policies operations:\nALL_READ ANTI_AFFINITY_READ AUTO_SUBSCRIPTION_CREATION_READ AUTO_SUBSCRIPTION_CREATION_WRITE AUTO_TOPIC_CREATION_READ AUTO_TOPIC_CREATION_WRITE BACKLOG_READ BACKLOG_WRITE COMPACTION_READ COMPACTION_WRITE DEDUPLICATION_READ DEDUPLICATION_SNAPSHOT_READ DEDUPLICATION_SNAPSHOT_WRITE DEDUPLICATION_WRITE DELAYED_DELIVERY_READ DELAYED_DELIVERY_WRITE ENCRYPTION_READ ENCRYPTION_WRITE INACTIVE_TOPIC_READ INACTIVE_TOPIC_WRITE MAX_CONSUMERS_READ MAX_CONSUMERS_WRITE MAX_PRODUCERS_READ MAX_PRODUCERS_WRITE MAX_SUBSCRIPTIONS_READ MAX_SUBSCRIPTIONS_WRITE MAX_TOPICS_READ MAX_TOPICS_WRITE MAX_UNACKED_READ MAX_UNACKED_WRITE OFFLOAD_READ PARTITION_READ PARTITION_WRITE PERSISTENCE_READ PERSISTENCE_WRITE RATE_READ RATE_WRITE REPLICATION_RATE_READ REPLICATION_READ RESOURCEGROUP_READ RESOURCEGROUP_WRITE RETENTION_READ RETENTION_WRITE SCHEMA_COMPATIBILITY_STRATEGY_READ SCHEMA_COMPATIBILITY_STRATEGY_WRITE SUBSCRIPTION_AUTH_MODE_READ SUBSCRIPTION_AUTH_MODE_WRITE SUBSCRIPTION_EXPIRATION_TIME_READ SUBSCRIPTION_EXPIRATION_TIME_WRITE TTL_READ TTL_WRITE ","version#Version":"We maintain up-to-date Pulsar clusters based on the official Apache Pulsar release process. Your Pulsar add-on version is available in your add-on dashboard. Updates will be notified using Clever Cloud weekly updates on the blog."},"title":"Pulsar"},"/developers/doc/addons/redis/":{"data":{"":"","-rights-and-permissions#🔑 Rights and permissions":"Redis is an open source, in-memory data structure store, used as database, cache and message broker.\nVersion The version currently installed by the add-on are the following :\nDedicated v7.2.4 Database Daily Backup and Retention By default, Clever Cloud performs a free backup every day, with a retention of seven days. Retention and frequency can be customized for Premium customers.\nEach backup can be found in the add-on dashboard in the web console, along with the credentials.\nA backup is a tar.gz archive containing both the .rdb and .aof files. You can extract this archive and run redis-server in the extracted folder to access data.\nLeader / follower topology By default, all redis add-ons are configured as leaders. You can set up a redis add-on as a follower from the add-on panel (in the “Add-on information” tab). You need to set the leader information (host, port, password) to start the replication. The add-on panel will display the sync process status so that you know when the synchronisation is done.\nWhile a redis database is configured as a follower, it’s read-only.\nRedis-cli usage You can use Redis URI to connect to your databases with -u option. However, the generated URI in the information tab (REDIS_URL) of you add-on is not a legal syntax to use redis-cli.\nThis is the correct syntax for redis-cli URI : redis ://password@host:port[/database]\nDefault retention policy By default, the eviction policy is noeviction. If you plan to use Redis as a LRU cache, please contact the support to change its policy.\n🔑 Rights and permissions Add-ons are managed services, meaning that users have standard access to the database. Some operations like database and user creation, as well as some settings modifications aren’t available by default. This ensures optimal performances and security for managed services as configured by Clever Cloud.\nIf you think your system might require more advanced administrative access, contact Clever Cloud support to explain your use case and we will work with you to find a solution.","database-daily-backup-and-retention#Database Daily Backup and Retention":"","default-retention-policy#Default retention policy":"","leader--follower-topology#Leader / follower topology":"","redis-cli-usage#Redis-cli usage":"","version#Version":""},"title":"Redis"},"/developers/doc/administrate/":{"data":{"":" Application management Activity Application scaling CLAMAV CRON Database migration and security update Domain names Encryption at rest Installing TLS certificate Log management Network and IP adresses ranges Service dependencies SSH access to running instances TCP redirections with Clever Tools Varnish as HTTP cache Zone migration "},"title":"Administrate"},"/developers/doc/administrate/activity/":{"data":{"":"","re-deployment-triggered-by-you#Re-deployment triggered by you":"Follow your application activities and lifecycle from the Activity option in the application menu. Every time your application redeploys, a new block appears on the timeline. Re-deployment triggers can be either:\nAn action performed by you or by a member of your organization An action performed by Clever Cloud Re-deployment triggered by you This happens when you or a member of your organization performs an action on the application, like:\nRestart or rebuild from the Console or the CLI Push a new commit from Git or GitHub Here’s what you might see on the timeline:\nEach block indicates if the deployment was successful or unsuccessful, along with the following information:\nDate: when the activity happened and from where (Console, Git, Github or Monitoring) Author: which member of your organization triggered the activity Commit ID: on which commit the activity happened Redeploy this commit: the option to redeploy a previous commit (useful to quickly roll-back if needed) ","re-deployments-triggered-by-clever-cloud#Re-deployments triggered by Clever Cloud":"Clever Cloud might also trigger re-deployments, either when you’re being assisted by the Support, or automatically by the monitoring system. If the monitoring triggers a re-deployment, you’ll see no author and the message explaining the reason, like Monitoring/Unreachable. The messages you might get are the following:\nUnreachable: The monitoring servers couldn’t open a TCP connection with at least one monitoring agent hosted on instances of the application. Timeout: The monitoring servers has succeed to open TCP connections on all monitoring agents hosted on instances of the application, but at least one did not send its probes in time. Scaling: Clever Cloud triggers a new deployment with more instances (virtual machines) or more resources of the application as the platform detects that the consumption is greater that the determined threshold on memory or CPU usage. For further details, see Scalability Maintenance: Clever Cloud performed a maintenance deployment of the application to integrate new configurations, security patches, operating system updates, runtime updates and so on… DiskFull: Rarely appears, but you could see this message if you haven’t enabled the auto-scalability, after the app crashed and the monitoring restarted it. "},"title":"Activity"},"/developers/doc/administrate/apps-management/":{"data":{"":"","archivingunarchiving-your-application#Archiving/Unarchiving your application":"You can perform this operation in the Overview menu of your application in the Clever Cloud console. You will find an archive button. This will remove it from your application’s list, but you will stil be able to access your application and push to its git remote. If you want to unarchieve your application simply click the un-archive button where the archive button was.","deleting-your-application#Deleting your application":"You can perform this operation in the Information menu of your application in the Clever Cloud console. You will find a red remove this application button at the bottom. This will open a modal where you should type the name of your application. Click remove to finish the process. Your application will be deleted and no longer accessible.","deploy-an-old-commit#Deploy an old commit":"If you want to revert to a previous version of your code, you can go to the Activity menu of your application in the Clever Cloud console. You will find here all your previous commits. Just select redeploy this commit on the desired one. This will trigger a redeploy of your application at this version.","edit-application-configuration#Edit application configuration":"You can edit your application in the Information menu of your application in the Clever Cloud console. You can rename it, change description and deployment zone. You can also enable/disable:\nZero downtime deployment: During a deployment, old scalers are kept up until the new instances work. Updates are thus transparent to the user. Your application has to work correctly with several scalers in parallel (e.g. for connections to databases). pico and nano scalers are using this feature by default. Sticky sessions: When horizontal scalability is enabled, a user is always served by the same scaler. Some frameworks or technologies require this option. Dedicated build instance: Your application will build on a dedicated machine allowing you to use a small scaler to run your application. But, using this option will make your deployment slower (by ~10 seconds) Cancel ongoing deployment on new push: A “git push” will cancel any ongoing deployment and start a new one with the last available commit. Force HTTPS: Any non secured HTTP request to this application will be redirected to HTTPS with a 301 Moved Permanently status code. Do not forget to save after editing your configuration.\nEdit your application ","start-restart-and-stop#Start, restart and stop":"You can start, restart, and stop your application in the Overview menu of your application in the Clever Cloud console.\nStart: will restart a stopped application. This will not trigger a rebuild phase as it will use the build cache. Re-build and restart: Same as start but with a build phase and without using using the build cache. Restart last pushed commit: will start last commit on the tree even if you reverted deployments to a previous commit. Stop: will stop currently running instances of your application. Stop functionality is useful during the development of the application to limit its credit consumption.\nManage your application ℹ️ If you set CC_DISABLE_BUILD_CACHE_UPLOAD environment variable to true, the cache archive won’t be created nor uploaded. "},"title":"Application Management"},"/developers/doc/administrate/cache/":{"data":{"":"","configure-the-cache-size#Configure the cache size":"You can change the storage size specified in the varnish.params file with the CC_VARNISH_STORAGE_SIZE environment variable (the default value is 1G).\nCC_VARNISH_STORAGE_SIZE=2G ","enable-varnish-for-your-application#Enable Varnish for your application":"To enable it, you just have to create a varnish.vcl file in the /clevercloud folder. This file describes how Varnish caches your applications and how it decides to return a cached resource or not.\n⚠️ The vcl 4.1; and backend section of the varnish.vcl configuration file are not necessary as they are already handled by Clever Cloud. If you have a PHP FTP application or if your varnish.vcl file is on an FS Bucket, make sure you redeploy the application for the changes to take effect. To know how to write your varnish.vcl file, have a look at the Varnish 6 book.","example-files#Example files":"We provide some examples of Varnish configuration files that you can use for your application. Create a /clevercloud folder at the root of your application if it does not exist, rename the file to varnish.vcl and move it in the /clevercloud folder.","limitations#Limitations":"Varnish is only available on PHP, Go and Node.js applications. Support for other applications is in discussion.\nFor more information about it, contact us at support@clever-cloud.com.","listen-on-the-right-port#Listen on the right port":"Once varnish is enabled, your application should no longer listen on port 8080, but on port 8081. Because it’s Varnish that will listen on port 8080, and it will have in its configuration your application as backend.","overview#Overview":"Varnish is a HTTP proxy-cache, which works as a reverse proxy between your application and the client. Following rules defined by the user, Varnish will cache the data of an application to reduce the load on its server. We use Varnish 6.6.0 and varnish-modules 0.18.0.","varnish-6-migration#Varnish 6 migration":"If you already have a configuration for an older version of varnish, you can read this guide to upgrade to version 6.","varnish-with-a-monorepo#Varnish with a monorepo":"If you use a monorepo, you may want to use Varnish for only some of the applications inside it.\nIf you have a /clevercloud/varnish.vcl file at the root of your monorepo, all of your applications automatically start using Varnish.\nTo resolve this issue, you can create a symlink during the deployments.\nPut your varnish.vcl file anywhere but at the root of your monorepo. Create a symlink inside a CC_PRE_BUILD_HOOK. Here is an example :\nCC_PRE_BUILD_HOOK=\"mkdir $APP_HOME/clevercloud; ln -s $APP_HOME/path/to/your/file/varnish.vcl $APP_HOME/clevercloud/varnish.vcl\" Then add the CC_PRE_BUILD_HOOK as a variable to the app that needs to use Varnish. If you don’t add this variable, the application won’t use it."},"title":"Varnish as HTTP Cache"},"/developers/doc/administrate/clamav/":{"data":{"":"Clam AntiVirus is an open source (GPLv2) anti-virus toolkit, designed especially for e-mail scanning on mail gateways. It provides a number of utilities including a flexible and scalable multi-threaded daemon, a command line scanner and advanced tool for automatic database updates. The core of the package is an anti-virus engine available in a form of shared library.","activate-clamav#Activate ClamAV":"You can set the CC_CLAMAV environment variable to enable ClamAV for your application:\nCC_CLAMAV=true This variable is used to start these two services:\nclamav-daemon.service (multi-threaded daemon that uses libclamav to scan files for viruses). clamav-freshclam.service (used to update signature database sets to the latest version). The signature database is updated every 2 hours.","additional-configurations#Additional configurations":"CC_CLAMAV_MAXTHREADS: Maximum number of threads running at the same time.\nCC_CLAMAV_MAXQUEUE: Maximum number of queued items.\nIf you have special needs, you can make a request on our technical support:\nsupport@clever-cloud.com ","clamav-for-all-applications#ClamAV for all applications":"ClamAV is not enabled by default but it’s available for all Clever Cloud applications.","memory-consumption#Memory consumption":"ClamAV can consume a lot of resources, make sure you have a scaler with enough memory (at least 1GB available) to avoid a complete shutdown / crash of your application (OOM).","unix-andor-tcp-sockets-connections#Unix and/or TCP sockets connections":"The ClamAV daemon on Clever Cloud instances listens for incoming connections on the following sockets:\nUnix socket:\n/run/clamav/clamd.ctl TCP socket:\nlocalhost:3310 Be sure to use these settings when configuring your ClamAV client."},"title":"Clamav"},"/developers/doc/administrate/cron/":{"data":{"":"The configuration file used for crontab is \u003cPROJECT ROOT\u003e/clevercloud/cron.json.\n⚠️ Crons are not available in the Docker environment as it would require to set them up inside the Docker container. ","access-environment-variables#Access environment variables":"To have access to environment variable, you must wrap your commands in a bash script. Let’s say your command is bundle exec rake myapp:dosomething.\nYou need to put it in a bash script, starting with #!/bin/bash -l. The -l is very important:\n#! /bin/bash -l cd ${APP_HOME} # Which has been loaded by the env. bundle exec rake myapp:dosomething Then you need to commit an executable file:\nchmod +x crons/mycron.sh git add crons/mycron.sh git diff --cached $ diff --git a/crons/mycron.sh b/crons/mycron.sh $ old mode 100644 $ new mode 100755 git commit -m \"Make cron file executable\" Then, in clevercloud/cron.json:\n[ \"*/5 * * * * $ROOT/crons/mycron.sh\" ] Avoiding double bash You might be tempted to put the following in your cron.json file:\n[ \"*/5 * * * * /bin/bash $ROOT/crons/mycron.sh\" ] Do NOT do this. Invoking bash here will supersede the shebang and cancel the bash -l that loads the env. So just put the path to your executable mycron.sh.\nYou can refer to this list to see which variables are available.","deduplicating-crons#Deduplicating crons":"Crons are installed and executed on every scaler of an application. This means the same cron may be executed more than once.\nYou can use your own techniques to avoid that, like a shared task queue or some other locking system.\nIf you do want to stay stateless and simple, just your bash wrapper script by:\n#! /bin/bash -l if [[ \"$INSTANCE_NUMBER\" != \"0\" ]]; then echo \"Instance number is ${INSTANCE_NUMBER}. Stop here.\" exit 0 fi cd ${APP_HOME} # Which has been loaded by the env. # Your part here ⚠️ If Zero downtime deployment is activated, Crons might overlap for a couple of minutes until the old instance are deleted as two instances would have the same instance number You can prevent this by deactivating it. ","logs-collection#Logs collection":"Everything coming from stdout \u0026 stderr is forwarded to our logs collection system and is available in the web console / CLI logs.","restrictions#Restrictions":"There are two restrictions about the usage of crontab on our platform:\nThe special date @reboot is not available since the crontab is added after the startup of the instance You must use the absolute path of commands ⚠️ We do not currently support the clustering of cron tasks, you must manage it yourself if your application requires more than one instance. ","root#$ROOT":"You can use the special token $ROOT to refer to the root folder of your application.\nExample of clevercloud/cron.json which executes the file cron.php every 5 minutes:\n[ \"*/5 * * * * /usr/bin/php $ROOT/cron.php\" ] Note: $ROOT is only a token (not an actual variable) which is replaced when setting up the crons by the equivalent of the APP_HOME variable (/home/bas/\u003capp_id\u003e). Do not write ${ROOT}, only $ROOT will work.","syntax#Syntax":"Here is the general syntax:\n[ \"\u003cstring\u003e\", \"\u003cstring\u003e\" ] The string \u003cstring\u003e must use the cron format:\nM H d m Y command M: Minute [0,59] H: Hour [0,23] d: Day of the month [1,31] m: Month of the year [1,12] Y: Day of the week [0,6] (0 is Sunday) ⚠️ All the servers are configured to use Coordinated Universal Time (UTC), please keep it in mind when configuring cron tasks to run at a specific hour. For more information about the syntax, you can check the Wikipedia page of cron."},"title":"CRON"},"/developers/doc/administrate/database-migration/":{"data":{"":" Clever Cloud features a simple, elegant way of migrating your databases to change the size of the instance, or improving its security by updating the middleware on it. ","migrating-any-database-and-updating-its-security#Migrating any database and updating its security":"Our databases add-ons are deployed on immutable Virtual Machines. No updates are made on those VMs. To improve security, you need to perform a “migration”, which will boot a new VM with up-to-date system and database. Unless you want to upgrade your database to a new major version or to give it more resources, you just have to perform a migration on the same zone, same plan and same major version.\nThese updates are not related to your addon (PostgreSQL, MySQL…) major version. Only patches or minor versions of the addon software along with system upgrades (security patches and new kernel features) are performed. For example, you can keep PostgreSQL 11 if you want to.\n⚠️ We do not support the migration of read only users except for PostgreSQL addons. If you have any, you will have to create new ones at the end of the migration. ","migration-updating-step-by-step#Migration (updating) step-by-step":" Go to your database menu Go to the Migrate/Upgrade section You will see the disclaimer of the database migration assistant. It informs you that your databse will be read-only during the migration process and that the hostname and database name will be automatically changed.\nRegarding this, we strongly recommend that you make sure every linked application uses the database add-on environment variables so those values will be automatically updated in your application.\nClick on Migration Settings A menu will open, where you will see your current database informations.\nUnder you will see that you can select your new batabse size and pricing plan. Billing section in Summary will be edited accordingly.\nUnder Targeted version you can choose the desired database version.\nDowngrading database is currently not supported, you can however ask our support team to do it at support@clever-cloud.com.\nSelect Migrate the Database You will be prompted to confirm the migration.\nAs soon as you do so, the database will be set in read-only mode and the migration process will start.\nIf the process succeeds, you will get a success screen. Every linked applications will automatically restart to use the new configuration. Please make sure to update configuration that do not use environment variable if you have some.\nIn case the database migration fails, you will be informed at wich point it did and a button to contact our support team will appear. Reach out to them at support@clever-cloud.com with you add-on ID (available in the Addon Dashboard section) and they will help you finish the process."},"title":"Database migration"},"/developers/doc/administrate/domain-names/":{"data":{"":"","configuring-domain-names-by-region#Configuring Domain Names by Region":"It’s possible to point your personalized domain name to Clever Cloud with either a type A or CNAME record through your registrar.\n⚠️ The use of a CNAME record is highly recommended. With a CNAME record, your DNS configuration is always up-to-date. Using A records requires you to keep the DNS configuration up-to-date manually.\nWe also support wildcard personal domain names, to do so use the standard pattern to describe it: *.example.com\nEurope/Paris (PAR) Provide the following to your registrar:\nRecord Type Value CNAME\nRecommended {yoursubdomain} 10800 IN CNAME domain.par.clever-cloud.com. A\nOnly if CNAME is not available @ 10800 IN A 91.208.207.214\n@ 10800 IN A 91.208.207.215\n@ 10800 IN A 91.208.207.216\n@ 10800 IN A 91.208.207.217\n@ 10800 IN A 91.208.207.218\n@ 10800 IN A 91.208.207.220\n@ 10800 IN A 91.208.207.221\n@ 10800 IN A 91.208.207.222\n@ 10800 IN A 91.208.207.223 Europe/Paris onto Scaleway (SCW) Record Type Value CNAME\nRecommended {yoursubdomain} 10800 IN CNAME domain.scw.clever-cloud.com. A\nOnly if CNAME is not available @ 10800 IN A 212.129.27.239\n@ 10800 IN A 212.83.186.147\n@ 10800 IN A 212.83.186.216\n@ 10800 IN A 212.129.27.183 Europe/Roubaix (RBX) Record Type Value CNAME\nRecommended {yoursubdomain} 10800 IN CNAME domain.rbx.clever-cloud.com. A\nOnly if CNAME is not available @ 10800 IN A 87.98.177.176\n@ 10800 IN A 87.98.177.181\n@ 10800 IN A 87.98.180.173\n@ 10800 IN A 87.98.182.136 Europe/Roubaix HDS (RBXHDS) Record Type Value CNAME\nRecommended {yoursubdomain} 10800 IN CNAME domain.rbxhds.clever-cloud.com. A\nOnly if CNAME is not available @ 10800 IN A 135.125.16.47\n@ 10800 IN A 135.125.16.49 Europe/Warsaw (WSW) Record Type Value CNAME\nRecommended {yoursubdomain} 10800 IN CNAME domain.wsw.clever-cloud.com. A\nOnly if CNAME is not available @ 10800 IN A 145.239.17.127\n@ 10800 IN A 145.239.17.192 Europe/Gravelines (GRAHDS) Record Type Value CNAME\nRecommended {yoursubdomain} 10800 IN CNAME domain.grahds.clever-cloud.com. A\nOnly if CNAME is not available @ 10800 IN A 188.165.58.196\n@ 10800 IN A 188.165.58.200 North-America/Montreal (MTL) Provide the following to your registrar:\nRecord Type Value CNAME\nRecommended {yoursubdomain} 10800 IN CNAME domain.mtl.clever-cloud.com. A\nOnly if CNAME is not available @ 10800 IN A 158.69.109.229\n@ 10800 IN A 149.56.117.183 Asia/Singapore (SGP) Record Type Value CNAME\nRecommended {yoursubdomain} 10800 IN CNAME domain.sgp.clever-cloud.com. A\nOnly if CNAME is not available @ 10800 IN A 51.79.197.159\n@ 10800 IN A 51.79.197.160 Oceania/Sydney (SYD) Record Type Value CNAME\nRecommended {yoursubdomain} 10800 IN CNAME domain.syd.clever-cloud.com. A\nOnly if CNAME is not available Two records: @ 10800 IN A 139.99.253.215 @ 10800 IN A 139.99.253.237 ⚠️ You cannot use a CNAME on a top-level domain, or on a subdomain which already has DNS records. If you want to make your application available from a domain name which doesn’t support CNAME records (eg example.com in addition to www.example.com), check if your registrar provides a web redirection service. This way, you only have to make www.example.com point to Clever Cloud. Please note that web redirection provided by registrars only work over HTTP.\nRemember that DNS changes may take time to propagate (usually a few hours, sometimes up to a day or more). It depends on the TTL setting of your DNS configuration. For faster changes, you can lower the TTL value in advance, and rise it again afterwards.\nℹ️ *.example.com match for instance blog.example.com or www.example.com. But for the raw domain example.com, you have to add both *.example.com and example.com to your application. Contextual Example Domain Name Use Case CNAME config Record A config Web redirections www.example.com example.com Point www.example.com to domain.par/mtl.clever-cloud.com. No A record needed Redirect example.com to www.example.com www.example.com Point www.example.com to domain.par/mtl.clever-cloud.com. No A record needed No redirect needed example.com No CNAME record needed Point example.com to the two IP addresses of the selected region No redirect needed ","gandi-cname-configuration#Gandi CNAME configuration":"Here is an article that demonstrates a simple setup for Gandi CNAMEs.","path-routing#Path routing":"Requests are routed to applications based on the domain name, but you can also route depending on its path.\nFor instance, you can bind example.com to an app, and example.com/api to another one. All the HTTP requests on example.com where the path starts with /api are routed to the second app. The other requests are routed to the first app. You can add a path after every domain name you bind in the console (or with clever tools).\nNote that your path-routed application needs to have a /whatever route.\nThis will work:\nexample.com -\u003e myfirtapp-main-route example.com/api -\u003e mysecond-app-main-route/api This will NOT work:\nexample.com -\u003e myfirtapp-main-route (works) example.com/api -\u003e mysecondapp-main-route (404 response from mysecondapp) Path routing for static sites In the case of static files, you usually understand routes as paths in a file tree.\nThis will work:\nexample.com/api -\u003e my-static-site/api/index.php This will NOT work:\nexample.com/api -\u003e my-static-site/index.php ","testing-with-cleverappsio-domain#Testing with \u003ccode\u003ecleverapps.io\u003c/code\u003e Domain":"When creating an application, you have two (non-exclusive) choices for domain names:\nUsing a personal domain name Using a cleverapps.io free domain for development and testing purposes, with built-in SSL Add it in the application configuration: in the console, click application name in the first panel, then choose domain names. You’ll have to choose to add a custom domain name or use a subdomain under *.cleverapps.io.\nℹ️ You can link one or more domain names to the same application. On the other hand, you can add mydomain.com/app1 and mydomain.com/app2 to different Clever Cloud applications at the same time through path routing. Testing with cleverapps.io Domain ⚠️ Clever Cloud provides *.cleverapps.io domains for development and testing purposes. They point to specific reverse proxies and have the following drawbacks: the .io TLD isn’t made for production, and since we offer the domain, the likelihood of people abusing it can be very high. It’s therefore not possible to guarantee a high level of quality on cleverapps domains. In the console, in the domain name sub menu of your application, there is a default entry configured by default for every new app: yourAppID.cleverapps.io, which can be removed.\nIn your application’s domain section, just enter example.cleverapps.io. You have to choose a unique one. Trusted SSL is available on every subdomain.\n🌐 *.cleverapps.io certificate is only valid for the first subdomain level, it won’t work with a domain like blog.mycompany.cleverapps.io. "},"title":"Domain names"},"/developers/doc/administrate/encryption-at-rest/":{"data":{"":"","availability#Availability":"Encryption at rest is currently available for the following add-ons:\nPostgreSQL MySQL MongoDB Redis Elastic Stack Jenkins Only dedicated add-ons have the option. If your add-on is not encrypted, you can ask our support team to configure it. A migration will then be needed to encrypt your disk.","introduction#Introduction":"Encrypting your data at rest provides another security layer to protect your data from various security threats. By default and unless you implemented it in your code, the data stored on disk is not encrypted. Enabling encryption at rest allows you to make sure your data can’t be read by anyone having a physical access to the hard drive.\nEncryption at rest only protects the data “at rest”, meaning that if your data is sent over an unencrypted channel on the network, it could be read on the fly. The scenario encryption at rest covers are mostly hard drives stealing or unauthorized access once the hard drive got removed.\nHere at Clever Cloud, before removing a hard drive, either because it is faulty or not used anymore, we first shred the hard drive with multiple passes. Then it is physically damaged by the data center operators before being thrown away. If one of those steps are missing or fail for some reason, your data could still be read if you didn’t use encryption at rest. If you did, no one will be able to access it.","technical-details#Technical details":"Encryption at rest works by decrypting the encrypted data disk and exposing it to the system in an unencrypted volume. Each time you read data on this unencrypted volume, the system will fetch the data on the encrypted disk and decrypt it. If you write data, the opposite happens: the data to be written is encrypted and then its encrypted content is written to the encrypted disk.\nEach add-on has a randomly generated encryption key used to encrypt the data disk. The key will stay the same during the add-on life but can be changed if needed. In that case, a migration will use the new passphrase.\nWe use the cryptsetup tool to operate encrypted disks. Cryptsetup’s current default is LUKS2 with aes-xts as the encryption algorithm. This may be subject to change as cryptsetup and the security algorithms evolve.\nThe encryption key is only stored encrypted on our systems and is not stored on your add-on. When your add-on boots, the key is downloaded over HTTPS from our systems and the disk is then mounted.\nWe also have a small swap partition on add-ons to allow more available RAM for background services. This swap file is also encrypted to avoid any encrypted data leak.\nPerformances Performances may be a bit degraded with encryption enabled but in most of the cases under regular load, it is usually insignificant and an acceptable tradeoff.\nAlso, depending on whether you are using a single vCPU add-on or a multiple vCPU one, numbers can greatly vary. Single vCPU instances will switch between decrypting/encrypting the data and reading/writing it to the disk while multiple vCPU instances will be able to parallelize those operations, leading to better performance.\nNote that most of the databases either have an in-memory cache or use the system’s file cache so if the same data is often read, it may be available in the cache and no decryption occur leading to fast reads.\nThose tests were made using a 4 vCPU instance with 4 GiB of RAM. Before each test, the system’s cache was dropped to avoid having reads that are faster than they should be: sync; echo 1 \u003e /proc/sys/vm/drop_caches.\nNote: The dd tool wasn’t used for this benchmark as it does not represent a valid workload, leading to results that can greatly vary depending on disk performance.\nUsing pgbench for PostgreSQL Using pgbench with 20 jobs and 20 clients, we see a difference between 3% and 5% less transactions per second on the encrypted disk and no real CPU difference.\nWith encrypted disk, the number of transactions per second was 315. On the unencrypted one, it was 330 per second.\nUsing sysbench for MySQL Using sysbench with 6 threads, the difference is between 5% and 10% less transactions per second. The CPU usage is also between 5% and 10% higher depending on the work load (reads or writes).\nWith encrypted disk, the number of transactions per second was 635. On the unencrypted one, it was 703 per second."},"title":"Encryption at rest"},"/developers/doc/administrate/log-management/":{"data":{"":"Clever Cloud new logs stack is currently in public beta. Activated on-demand in the dedicated section of any application in the Console. It’s not available for add-ons yet. It’s based on Vector and Apache Pulsar. This Web Component allow you to check for live or past logs. You can target a specific time window, select logs lines and copy them in clipboard through keyboard and/or mouse.\nThere are two text filter modes: exact match (case-sensitive) and regular expression. Settings panel offers lots of parameters such as dark/light themes, line wrapping, ANSI codes escaping, etc. You can also choose the date/time format, UTC or local, to show the instances name or not.\nDuring beta, you can send us your feedback through our GitHub Community:\nGive your feedback about new Logs interface ℹ️ Logs are retained for 7 days, sometimes more for specific customers/needs. On our old stack, they are flushed daily at midnight. ","exporting-logs-to-an-external-tool#Exporting logs to an external tool":"You can use the logs drains to send your application’s logs to an external server with the following command.\nclever drain create [--alias \u003calias\u003e] \u003cDRAIN-TYPE\u003e \u003cDRAIN-URL\u003e [--username \u003cusername\u003e] [--password \u003cpassword\u003e] Where DRAIN-TYPE is one of:\nTCPSyslog: for TCP syslog endpoint; UDPSyslog: for UDP syslog endpoint; HTTP: for TCP syslog endpoint (note that this endpoint has optional username/password parameters as HTTP Basic Authentication); ElasticSearch: for Elasticsearch endpoint (note that this endpoint requires username/password parameters as HTTP Basic Authentication); DatadogHTTP: for Datadog endpoint (note that this endpoint needs your Datadog API Key). You can list the currently activated drains with this command.\nclever drain [--alias \u003calias\u003e] And remove them if needed\nclever drain remove [--alias \u003calias\u003e] \u003cDRAIN-ID\u003e If the status of your drain appears as DISABLED without you disabling it, it may be because it haven’t been able to send your application logs to your drain endpoint or because the requests timed out after 25 seconds.\nUse the logs drain to send your add-on’s logs by using --addon flag, the value must be the add-on ID starting by addon_.\nElasticsearch ElasticSearch drains use the Elastic bulk API. To match this endpoint, specify /_bulk at the end of your Elasticsearch endpoint.\nclever drain create ElasticSearch https://xxx-elasticsearch.services.clever-cloud.com/_bulk --username USERNAME --password PASSWORD Each day, we will create an index logstash-\u003cyyyy-MM-dd\u003e and push logs to it.\nIndex Lifecycle Management Depending on the amount of logs generated by your application, you might want to manage the lifecycle of your log indexes to prevent your Elasticsearch instance from running out of storage space.\nTo do so, Elasticsearch provides a feature called Index Lifecycle management that allows you to create a policy to delete indexes based on their creation date.\nWith our Elasticsearch add-on, you can choose to create a Kibana application in which you can create the policy and apply it to your indexes with an index template, but you can create them manually through API requests.\nHere is an example that will create a policy to delete indexes older than 30 days:\ncurl -X PUT \"https://username:password@xxx-elasticsearch.services.clever-cloud.com/_ilm/policy/logs_drain?pretty\" -H 'Content-Type: application/json' -d' { \"policy\": { \"phases\": { \"delete\": { \"min_age\": \"30d\", \"actions\": { \"delete\": {} } } } } } ' An index template example to apply the policy based on an index pattern:\ncurl -X PUT \"https://username:password@xxx-elasticsearch.services.clever-cloud.com/_index_template/logs_drain?pretty\" -H 'Content-Type: application/json' -d' { \"index_patterns\": [\"logstash-*\"], \"template\": { \"settings\": { \"index.lifecycle.name\": \"logs_drain\" } } } ' For more information, please refer to the official documentation.\nDatadog To create a Datadog drain, you just need to use:\nclever drain create DatadogHTTP \"https://http-intake.logs.datadoghq.com/v1/input/\u003cAPI_KEY\u003e?ddsource=clevercloud\u0026service=\u003cSERVICE\u003e\u0026hostname=\u003cHOST\u003e\" ⚠️ Datadog has two zones, EU and COM. An account on one zone is not available on the other, make sure to target the right intake endpoint (datadoghq.eu or datadoghq.com). NewRelic To create a NewRelic drain, use:\nclever drain create NewRelicHTTP \"https://log-api.eu.newrelic.com/log/v1\" --api-key \"\u003cAPI_KEY\u003e\" ⚠️ NewRelic has two zones, EU and US. An account on one zone is not available on the other, make sure to target the right intake endpoint (log-api.eu.newrelic.com or log-api.newrelic.com). OVHcloud Logs Data Platform To export logs from an application or an add-on to OVHcloud Logs Data Platform, use the following setup:\nA TCP drain log with clever drain create TCPSyslog Your Logs Data Platform host with port 514 (SSL ports aren’t supported for TCP drains) The write token for your stream (provided on your Logs Data Platform console) On your terminal, use the following command:\nApplicationAdd-on Exporting logs from an application:\nclever drain create TCPSyslog tcp://\u003chost\u003e:514 -app \u003capplication-id-or-name\u003e --sd-params=\"X-OVH-TOKEN=\\\"\u003ctoken\u003e\\\"\" Replace the following values:\n\u003chost\u003e \u003capplication-alias\u003e \u003ctoken\u003e Exporting logs from an add-on:\nclever drain create TCPSyslog tcp://\u003chost\u003e:514 -addon \u003caddon_id\u003e --sd-params=\"X-OVH-TOKEN=\\\"\u003ctoken\u003e\\\"\" Replace the following values:\n\u003chost\u003e \u003caddon_id\u003e \u003ctoken\u003e Community software ℹ️ Community software isn’t directly supported by Clever Cloud. It’s developed by our community. We don’t guarantee their maintenance or correct functioning. You are better off opening issues on their GitHub repositories than contacting Clever Cloud support. HTTPS-based solution Some tools available on GitHub enable to create a drain to collect logs through an HTTPS endpoint. This project, for example, is fully compatible with Clever Cloud.\nYou could host it as an app and an add-on on Clever Cloud. A complete README explains all the features.","get-continuous-logs-from-your-application#Get continuous logs from your application":"Log management is also available through Clever Tools and our APIv4. They’re collected and sent through the Vector service enabled in every application deployed on Clever Cloud. To disable it, set the CC_PREVENT_LOGSCOLLECTION environment variable to true. You can see logs with the command down below.\nclever logs You can add --since, followed by a duration or a date (ISO8601 format). The --until flag should be followed by a date (ISO8601 format).\nclever logs --since 2h clever logs --until 2024-04-15T13:37:42Z You can also get your add-on’s logs by using --addon flag, the value must be the add-on ID starting by addon_.\nclever logs --addon \u003caddon_xxx\u003e ⚠️ With add-ons, only the last 1000 lines of logs are got by clever logs. Access logs It contains all incoming requests to your application. Here is an example:\n255.255.255.255 - - [06/Feb/2020:07:59:22 +0100] \"GET /aget/to/your/beautiful/website -\" 200 1453 They are available in different formats, the most common is CLF which stands for Common Log Format.\nYou can see access logs with the following command:\nclever accesslogs As with the logs command, you can specify --before and --after flags. If you don’t specify any options, the logs display continuously.\nTo change the output, specify the --format flag with one of these values:\nsimple: 2021-06-25T10:11:35.358Z 255.255.255.255 GET /\nextended: 2021-06-25T10:11:35.358Z [ 255.255.255.255 - Nantes, FR ] GET www.clever-cloud.com / 200\nclf: 255.255.255.255 - - [25/Jun/2021:12:11:35 +0200] \"GET / -\" 200 562\njson:\n{ \"t\":\"2021-06-25T10:11:35.358209Z\", \"a\":\"app_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", \"adc\":\"clevercloud-adc-nX\", \"o\":\"orga_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", \"i\":\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", \"ipS\":\"255.255.255.255\", \"pS\":58477, \"s\":{ \"lt\":50.624, \"lg\":3.0511, \"ct\":\"Nantes\", \"co\":\"FR\" }, \"ipD\":\"46.252.181.17\", \"pD\":14001, \"d\":{ \"lt\":45.7059, \"lg\":4.7444, \"ct\":\"Chaponost\", \"co\":\"FR\" }, \"vb\":\"GET\", \"path\":\"/\", \"bIn\":658,\"bOut\":562, \"h\":\"www.clever-cloud.com\", \"rTime\":\"31ms\", \"sTime\":\"75μs\", \"scheme\":\"HTTPS\", \"sC\":200,\"sT\":\"OK\", \"w\":\"WRK-01\", \"r\":\"01F91AEG8Z9RJKYB7JY7H56FNB\", \"tlsV\":\"TLS1.3\" } "},"title":"Logs management"},"/developers/doc/administrate/network/":{"data":{"":"","custom-network-services#Custom network services":"","the-other-regions#The other regions":"The other regions we provide are hosted by other providers (OVHCloud, Scaleway, Oracle Cloud).\nIn this case, we use the IPs they provide to us and have no control over the ranges.","the-paris-region#The \u0026ldquo;Paris\u0026rdquo; region":"Some services external to Clever Cloud require filtering their clients’ source IPs. They may call it “whitelist” or “allowlist”. Since your applications may be deployed “somewhere” inside your chosen zones, you cannot predict the IP they are going to come from.\nHere’s a bit more insight on the subject:\nCustom network services Unique IP service For each region, we provide a unique IP service. This service allows your queries to some external services to come from a fixed and unique IP.\nThis service does not appear in the Console at the moment. The best is to ask the support team that will set it up for you and provide you with the needed information. At the time of writing this doc, this service was billed 30€/month. The price does not change with the number of applications that will use it.\nThe IP depends on the zone, so ask the support about it.\nVPN service Some external services, customers or providers may propose/require a encrypted Virtual Private Network between Clever Cloud’s regions and their datacenter to secure the traffic.\nWe provide three kinds of VPN technologies:\nWireguard: our favorite VPN technology. Has been adopted by most major “off-the-shelf” VPNs (like the ones that sponsor Youtubers 😉). IPSec: used by a lot of companies. It might be their only available VPN technology. OpenVPN: less used by companies, but still quite common. If you are interested, please ask the support / your sales contact for a quote.\nThe “Paris” region The Paris region is owned and handled by Clever Cloud. We own or entrust the associated AS’s and IP addresses ranges.\nHere are the current four addresses ranges your application may have an outgoing IP in:\n91.208.207.0/24 185.133.116.0/22 Clever Cloud may change these ranges at any moment while we expand our infrastructure. If filtering source IPs is important to you, please check this page, or opt into our Unique IP service or a VPN Service.\nPlease note that allowing all four ranges means you “allow” all Clever Cloud applications running in the Paris region to access that service. This means you should not base all that service security solely on filtering source IPs!"},"title":"Networking and IP addresses ranges"},"/developers/doc/administrate/scalability/":{"data":{"":"When your application is running, you don’t have the same number of users all the time. During an event for example, the number of users can increase, as will the load on the server. If too many requests are done on your server at the same time, the response time will increase and could slow down your website.\nTo avoid this problem and keep a fast website, the main solution is to deploy more Scalers for your application to support the load. That’s what scaling is: adapting automatically the number of Scalers and their size to fit the load of your application, without any action from you.\nClever Cloud gives you the ability to fine tune your application’s scaling by managing both horizontal and vertical scaling. These two parameters can be combined to adapt to your needs.","combination-of-both-scalings#Combination of both scalings":"When both scalings are set up, vertical scaling is privileged over horizontal scaling. In the case you set the vertical scaling from S to L, and the horizontal scaling from 2 Scalers to 4 Scalers, Clever Cloud will firstly increase the size of the 2 Scalers already launched.\nIf the 2 initials Scalers are at their maximum size, Clever Cloud will launch new Scalers with the maximum Scalers size. This is how it’ll be done:\n2-S =\u003e 2-M =\u003e 2-L =\u003e 3-L =\u003e 4-L.","horizontal-scaling#Horizontal scaling":"You can enable it by defining how many maximum instances you need under the “Horizontal scaling” section of the “Scaling” menu.\nIn case of large traffic, we detect a high load on your application and spawn another instance in parallel. This will automatically set up another identical application with same size. Both will run in parallel with load balancing. If the traffic grows even more, we will repeat the process until the maximum instances count you defined.\nℹ️ The maximum number of Scalers you can set for an application is 40. This process is exactly the opposite when the load decreases. A Scaler is removed and so on till a minimum reasonable level is reached.\nThe following scheme depicts a Scaler replication in case of a load increase:\nHorizontal scaling: you can define the min and max numbers of Scalers you need. Horizontal scaling: the amount of Scalers will evolve between 1 and 15. ","vertical-scaling#Vertical scaling":"In case of large traffic, we detect a high load on your application and set up a new larger Scaler.\nℹ️ The maximum Scaler size is 3XL: 16 vCPUs and 32 GiB of memory. In case of low traffic, we detect a low load and set up a new smaller Scaler.\nYou give more power to your application by setting up a larger instance that will replace the previous one. The more the load, the larger the instance.\nThe following scheme depicts a larger Scaler replacement in case of a load increase:\nvertical scaling You can choose the size of Scalers you want by defining a maximum instance size manually:\nVertical scaling: the Scaler size will go from S to XL. ","what-is-a-scaler#What is a Scaler?":"A Scaler is a Clever Cloud “instance”. It is an individual and independent virtual machine hosting your application. A Scaler is defined by two factors: RAM and CPU.\nWith the Scalers, Clever Cloud gives you the ability to scale your application up and down with two non exclusive methods: horizontal and vertical scaling.\nEnable auto-scalability To enable the scalability of your application, open the console and go in the “scalability” section of your application. Then, enable the auto-scalability."},"title":"Application scaling"},"/developers/doc/administrate/service-dependencies/":{"data":{"":"On Clever Cloud, each application depends on one or more backing add-ons. Each add-on exposes configuration, which allows the user to choose which add-on link to an application.\nIn a micro services architecture, backing services can be add-ons or other applications. Clever Cloud allows you to declare the dependencies between applications in the same way you can declare a dependency from an application to an add-on.\nClever Cloud allows to declare the topology of your micro services graph by letting you link applications in the same way you can link add-ons.\nService dependencies To link an application to another, go to the “Service Dependencies” tab and add the applications you depend on.","exposed-configuration#Exposed configuration":"Each application can expose configuration to be used by other applications. For instance an API can expose its URL and credentials to access it. The exposed configuration will be injected in the dependent applications' environment.\n⚠️ The configuration exposed by an application is available in the environment variables of the dependent applications, but not in the environment of the application itself. Redeploy on configuration update When an application updates its exposed configuration, all applications depending on it are automatically redeployed.\nAutomatic redeployment "},"title":"Service Dependencies"},"/developers/doc/administrate/ssh-clever-tools/":{"data":{"":"","access-your-applications-folder#Access your application\u0026rsquo;s folder":"","overview#Overview":"","purpose#Purpose":"","requirements#Requirements":"","show-your-applications-logs#Show your application\u0026rsquo;s logs":"Overview Clever Cloud allows you to connect to running instances via SSH.\nWhile direct SSH access to instances is not recommended in an immutable infrastructure setup, it can be useful for debugging purposes.\nPurpose Clever Cloud instances are to be seen as read-only resources. Any change made on an instance will not be persisted. You can use SSH access for quick tests, but if you want to persist changes, you need to commit them in your repository. Changes made on instances are not kept across deployments.\n⚠️ For security reasons, you can’t connect on the instance that hosts your Docker application. Instead, if bash is installed in your Docker application, you will be able to connect directly inside your container. Contact the support if you need help to debug your Docker applications. Requirements You need to have at least one of the following installed locally:\nthe Clever Tools CLI(/doc/cli) an SSH client (e.g putty for windows users) Make sure you have a properly configured SSH key To use SSH access, you need to have a SSH key properly configured in your Clever Cloud account. Please refer to the SSH keys section of the documentation to know how to set up your SSH keys.\nUsing Clever Tools CLI In order to access the machine via SSH using the Clever Tools CLI you need to have an application running on Clever Cloud and have linked it with your local repository using the Clever Tools CLI with clever link --org \u003cyour_application's_organization_id\u003e \u003cyour_application_id\u003e\nAccessing your machine You can access running instances of a linked application with $ clever ssh in the linked application’s repository locally.\nclever ssh \u003e Opening an ssh shell \u003e bas@67fbf787-3518-47bb-abd9-2c2575844edd ~ $ If multiple instances are running, you will be asked which one to use:\nclever ssh \u003e 1) Sleepy Ponita - Instance 0 - UP (11281f38-31ff-43a7-8595-a2d82630c32b) \u003e 2) Tense Caterpie - Instance 1 - UP (b10d19d9-5238-408b-b038-3e32c7a301c2) \u003e Your choice: 1 \u003e Opening an ssh shell \u003e bas@11281f38-31ff-43a7-8595-a2d82630c32b ~ $ You are now connected to the machine. Note for Windows users $ clever ssh command will fail on PowerShell or cmd.exe if there is no ssh.exe in your path. The most straightforward solution is to start $ clever ssh from git-bash but you can also add ssh.exe in your path..\nUsing an SSH client You can connect using only your ssh client:\nssh -t ssh@sshgateway-clevercloud-customers.services.clever-cloud.com \u003capp_id\u003e You can omit the application ID. In that case, you will be prompted to choose an organization and an application.\nYou can validate connection to remote server with this fingerprint :\nED25519 key fingerprint is SHA256:lys1oC3plDGyAsWD7Yd5fJVKQUV/Pbn/M5KI5GyAj5s. RSA key fingerprint is SHA256:0odQb8NQPKYNCme2Nf3Xrz3Bc9kmrDK6eSJGIzj9aEA. ⚠️ The -t flag is mandatory for the ssh connection to work properly. If your terminal hangs and you see pseudo-terminal will not be allocated because stdin is not a terminal, it’s likely you’ve forgotten the -t flag. Access your application’s folder No matter wich way you’ve decided to use to SSH to the machine, your application’s folder is located at: /home/bas/\u003capp_id\u003e.\nShow your application’s logs If you want to show your application’s logs while you debug:\njournalctl -efa -u bas-deploy.service You can also use journalctl with other options if you need to.","using-an-ssh-client#Using an SSH client":"","using-clever-tools-cli#Using Clever Tools CLI":""},"title":"SSH access to running instances"},"/developers/doc/administrate/ssl/":{"data":{"":"","getting-certificates-with-lets-encrypt#Getting Certificates with \u003cem\u003eLet\u0026rsquo;s Encrypt\u003c/em\u003e":"TLS certificates (updated, more secure, version of SSL) are necessary to enable secure HTTPS connections between a browser and your application. These certificates can be bought online, or generated by Clever Cloud. In that case, we manage the whole process for you.\nThere is two ways to get HTTPS for your apps:\nLet’s Encrypt: Provided by default by Clever Cloud. Free. Nothing to configure. Your own certificates: If you already have a certificate, you can upload it securely. Getting Certificates with Let’s Encrypt We automatically generate certificates when you add a domain name to your app. It’s all you have to do, our internal certificate generator will create a TLS certificate for a domain or a sub-domain.\nWe do not support wildcard Let’s Encrypt certificates at the moment. If you need a wildcard certificate, you can either generate a Let’s Encrypt certificate yourself or buy one (we can resell one to you, in which case we will deal with the csr generation ourselves, contact the support to know more).\nCloudflare configuration If you use Cloudflare to manage your domain, the certificate generation could fail depending on your SSL/TLS settings, you will encounter 502 HTTP errors if Cloudflare expects SSL/TLS strict mode and automatically redirects to HTTPS.\nTo prevent this from happening you can create a page rule to bypass this policy as Let’s Encrypt needs to access the route /.well-known/acme-challenge* via HTTP to generate the certificate:\nDefine a page rule Create a bypass page rule We also recommend to disable the cache level.\nTurn off HTTP to HTTPS redirection on Cloudflare Turn off automatic HTTPS redirection You can enable Force HTTPS in the information tab of your Clever Cloud application instead.\n💡 If Let’s Encrypt fails to generate the certificate, you can test that the acme-challenge url works by running the command below: $ curl http://\u003cyour-domain\u003e/.well-known/acme-challenge/test test It should return a HTTP 200 OK with the string “test” as the body. If it does not, check your Cloudflare configuration.","sending-certificates-manually#Sending Certificates Manually":" 👎 You should be aware that sending certificates manually is NOT RECOMMENDED.\nPrefer another method, such as the certificate generation integrated into Let’s Encrypt, or using our certificate upload tool ↗.\nIf you have no other choice, then do not send these files by a means that is not secure. The integrity of your certificate will no longer be guaranteed. In the event that you request the installation of a certificate by the support team, this operation will be charged on a one-off basis for each request. Please contact us for installation rates.\nSharing Certificates via Keybase Another way to transmit your certificates is Keybase.\nKeybase is an encrypted social networking service providing a key directory that maps social media identities to encryption keys (including, but not limited to PGP keys) in a publicly auditable manner. Additionally it offers an end-to-end encrypted chat, you can use to share sensitive informations, such as SSL/TLS certificates.\nIf your are a Keybase.io user, you can find us at keybase.io/clevercloud.\nSharing Certificates via GPG Email can be a secure way to transfer your certificates when using a signed and encrypted email with GPG. Our dedicated email for receiving certificates is ssl@clever-cloud.com.\nfingerprint: 03943517934C1FA5ED4E2F61218B86BD5278470F 64-bit: 218B86BD5278470F -----BEGIN PGP PUBLIC KEY BLOCK----- Comment: GPGTools - https://gpgtools.org mQINBFa4bJMBEAC21vsfJ1ay5iVUcKsP8X8GziZu8daV5G4Lqpns54zN/GB05f9+ 3jV1RYRMweq7RC6XU/GDZo20ksvDw0N963/WCswCt0MyzM1O105tZ/ZbYyVV/w5w 763DXCUPdBhzcA7o31A7JgPimiceP/BcyA8CniLSD4nfzD0CiM74kdG5/vx2Ve9T vkJ0wX5qWFvEivBPf/+jUfmdwtx5RLjH783xRuh0wWcz9ey/hsuLxJmdDuIlUccu yH0itAMiLmI0yGscTVQ6pmLmEY1GZY3GSrTZbDOrKbJLxPjtRAtW8JvE1UD9AOqs yvJ+QYp+6viEkQg0Fq2agCkpWTEy/6INGvjwexHkq9zUBe/Dm0awcqg46GSY8cwA gqaaV32hPwv4fYMsz8fH50DDIAmKjJspWTeehnaXUSmr9lHpYH/l1mHPOtCvBL2e m52YAKF5bCQEwn1p/UsysxtTaOrLO3ZoRTpM9lAeR3SfM768lnLzpI2AcpyJ95jg btibuy59WvCQMdbA6UneaWxaOhSAtAB3OzHauXhQzru1BXfy5VOva5YHgH+4xS9n 7aqMxG0uB9X7wcPPV9FHFv+6QnKZ1fHLf6zN0tUjoXTIS6egbJqtYcTbDE8nRgoU rwEadolEVSNnTEX3cfdueUHslMZwF+U30RG2bHSJTmUTOnVT6g1zk2hxwwARAQAB tD5DbGV2ZXIgQ2xvdWQgKENsZXZlciBDbG91ZCdzIFNTTCBlbWFpbCkgPHNzbEBj bGV2ZXItY2xvdWQuY29tPokCPQQTAQoAJwUCVrhskwIbAwUJB4YfgAULCQgHAwUV CgkICwUWAgMBAAIeAQIXgAAKCRAhi4a9UnhGDwbQD/49Ol6HlYivxbxHi+uZdI2V RoRLQlbTjrpIWc3ENJSjo19w7ntirsTkAmwh80Uvf72dLTPT3/dAa7qDiLHbaEPq 1Qr9XWgvb1rs/iXaJyEG/bhPEYoB/cvV+C921vArx6R8ZaUV0GZnZraOQgXCXq/y a7QdM+wnh2abRwEOUFqVc2q2/N/1SjCKx9cCk2v4s3/chC/EZfUw3AoDQSwRkKYk JD8r5r7TP7m048KreIKL5YNh9M6ybfsXPAtVRT3qIXFFDhrTcTvRokf50EFDwGVC 7miSaDDBLzQOJaaAD4j7I+QsiiKJSE41bymPcNNtZ/StILVTtmUSWSZAYC5Ke/PI 78o/0Hp3vT2WUw3w4iAHhbDhaPk+swC1rzTvPUXNb0ELVZb23ouPGqn0gMFcv0I5 ojQ+hH/J5kQ2VvRUc7aCzA6Cqqavn9FljlwbI/Vro562GTkHQnmvKAnTYLomhFyL TLrCs8vnLIVBJiSO4v/di6GhderDGjeeEgKXN+BuxU+V1u4kTp9uRjlNtEHoGPo7 n38nChtFmRkfCp8eBXKDTZllxHUoiBSbEpY64zr3D3X9KTRBbS+JJXFpTcHJXeC2 Ifc+5rOeJFjjmQ7iui0u0wwGaXY5WaQYd7zQ2rQz8pDaINsOAMTdaRJ5rPFBmAAn KX7GBYRhPwWB0sjSHhRttLkCDQRWuGyTARAAp2fLCM77rmEREyt4Rn2Psd+RU6Ad 4k5Zlug6JE0BC9H340RKo3ViXV258Yqg2ra8rr9anJ4qX+T5ZsgVQ6daRstE7l9N d62w+86ZcI+av3ncAKAihZsuZeZiI4NldCFoaJUu2Ixt/Bk4ppY+Uo0MkdL3Rq/6 pEt4WGjOm+KMY38mSYGgzkdyOrncZ8+XY8UFvza/MAu4ukuduh+uozXRvCiaeiEx 4OhPR4TksZ6RrP++f/ZywTf19Qn3/7ickW4TU7F/khGMg+xtTkgFA+pdes2JrfgF G7zvLIsQqfB7rNTNPHaQhazdQDWX9ylzg+Az/uoF3nMcEgLdawm2X70cyzo0ogt1 F1f+juMvJJ+W7ao7Dfve0qoSQtEOmmR8sc4vVBzdPAFCOh8QYqm1z4JGbDcmWfG4 ypGbBXBiGLyeJRm3o4iRBkAl7jkSNJeDnO4ajrTmZYSpO/NecbWAiybIxpoqQ3Yy 36XyTJJp6sie/6BWEF+tJUC4w4jQiuGeE+As9VwkGnsH0+m9gOwiO/TUocrxOHal W2GB6s9V2zBqMFHEwKZgGZXLMG7IbiHS72QnrynwZpkAW328SUb/DgkI5DbbeVDG tFNHBDiqxFgREv7c8DpnnJK7WX59HAZlXDcz1jfc6oKCFILDB0ujfuceRMGCxZ7m Slkp3cHibEvsW18AEQEAAYkCJQQYAQoADwUCVrhskwIbDAUJB4YfgAAKCRAhi4a9 UnhGD1zuD/99suvRucY3IJXHFCsV4wHIVgerU86sx3w0Nu5p18feqEf6K9tODZ32 NcFKaWKVZ7tK1G0fzOnoLiT/Pzhu2pjq+cFN9t1CQy5U2cyFRRbrkd64LsIU6Nln BVLNTje+akWnF3ezOSYvU02LElt4HQgTE1fMh7lolNcDrsg3hAd7vWJsr5r9MNtL hxKrRjT1P+5op+lomSHeeWMnj2DxnwyA4es7fRfHcqC6fCW39Plhl6uCGaKNaR4n wr4ht/n06QsBcGyIJrrkTrRGiHx9z9McNdI3hGZijBFYtPGfSsDFtipf8sOXIok3 rQ3NGoRYb9siJKupaMNXhhr8awXX36DlWIoS6m0pnlD9F3ZC+iWMQMpAFTg/8+ZU IfFBXZpXGw8WLiLNiBWcxVrgPDNm0IJFoOd52fyFRyDGukhJFUJXWyQK2bKvOZdk jUWMNJ2sQTFMlIAnhgeWnalMU4GOgSumxGozZ7fYGQJdPdclIrMSJFdHghsaX5PM lxA/k5PoRGfhx2p+REbdgvD3oN11Kep2Y6/PEC9n0wPU9VHk+R8Ab9jLekQjcfLB bvoe/dzJcoT/thvBKpxgRCoEFI0ozYUnU9L288hPg3ctLR6k8e7ALMbPk13BFbJa S1G9NpEsu94rDq7yehVOpGv0bCav2xtDIAgQW+ZRpRoipu5KSsUAzg== =DNbu -----END PGP PUBLIC KEY BLOCK----- ","uploading-my-own-certificates#Uploading my own certificates":"You can upload certificates yourself: https://api.clever-cloud.com/v2/certificates/new ↗\nPrerequisites You need to paste a PEM bundle containing (in this order):\nthe private key the certificate itself intermediate certificates (optionnal) ⚠️ Only certificates with RSA 2048 and RSA 4096 keys are supported.\nECDSA certificates are not currently handled. You should create a file.pem containing:\nfile.pem-----BEGIN PRIVATE KEY----- \u003cthe private key\u003e -----END PRIVATE KEY----- -----BEGIN CERTIFICATE----- \u003cthe certificate\u003e -----END CERTIFICATE----- You may need to mention the algorithm in the footer and header. For instance, if the previous format doesn’t work, try to use\n-----BEGIN RSA PRIVATE KEY----- and -----END RSA PRIVATE KEY-----\nYou can add optionnal intermediate certificates by appending them to the file as\n-----BEGIN CERTIFICATE----- \u003cthe certificate\u003e -----END CERTIFICATE----- You should note that `.pem`` files use the unix way of terminating lines with a single line feed character. Make sure your text editor does the same.\nCertificate Submission Checklist You .pem file must be correctly formatted to successfully upload your certificate. This checklist might help you troubleshoot uncesuccessful certificate submission.\nCertificate Specifications ✅ The private key is included ✅ Keys lenght are RSA and either 2048 or 4096 ✅ ECDSA is not used to create your certificate ✅ The line feed (LF) characters at the end ✅ The certificate chain include your certificate together with all the intermediary CA certificates that signed it, in that order "},"title":"Installing TLS Certificates"},"/developers/doc/administrate/tcp-redirections/":{"data":{"":" ⚠️ TCP redirections are currently available free of charge as long as the feature is in BETA stage. Once the feature leaves the BETA stage, it won’t be free anymore. ","creating-a-new-tcp-redirection#Creating a new TCP redirection":"With the console From your console, select your application. In the secondary menu, go to TCP redirections. From there, you can create a TCP redirection for a specific namespace (see namespaces doc)\nThe creation is instantaneous. Find the TCP redirection port on this page.\nWith the Clever CLI You can use the following command to create a TCP redirection from the CLI:\nclever tcp-redirs add --namespace default Depending on your situation, you should replace default with the appropriate namespace.\nThe port assigned to your application displays right after the TCP redirection creation. You can then contact your application over TCP using tcp://your-domain-name:the-port/.","managing-redirections#Managing redirections":"Listing active redirections To visualize your application’s redirections:\nfrom your console, an active redirection has a green tick next to it from the Clever CLI, you can use: clever tcp-redirs Deleting redirections To delete a redirection on an application:\nfrom your console, use the delete button next to the redirection from the Clever CLI, use: clever tcp-redirs remove (port) --namespace (namespace) Example: if your redirection is on port 5500 and the default namespace, the command would be\nclever tcp-redirs remove 5500 --namespace default ","what-is-a-namespace#What is a namespace?":"Clever cloud manages a fleet of reverse proxies that fulfill different purposes, depending on their type and region. A namespace is a group of reverse proxies. You may encounter:\ndefault: the stable public group of your region cleverapps: the group behind all the cleverapps.io domains dedicated name: if you are a premium customer with dedicated reverse proxies Use default or dedicated namespace for applications with a custom domain name.\nUse cleverapps for applications under the cleverapps.io domain. If your application has both a custom domain name and a cleverapps.io one, you may activate TCP redirections on both of them. Note that this generates two different ports, one for each domain.\nYou should use one or the other depending on the domain name you use in your request.\nTo list the possible redirections available to your application, you can use the following:\nclever tcp-redirs list-namespaces ","what-is-a-tcp-redirection#What is a TCP redirection?":"Every application hosted Clever Cloud must listen on port 8080 and answer to HTTP traffic. This is useful for both routing requests and monitoring purposes.\nHowever, some applications might additionally require binary protocol, with raw TCP interactions. In that case, you can use a TCP redirection to route TCP traffic, through Clever Cloud reverse proxies, to your application.\nEvery application can be configured to receive TCP traffic on the port 4040. Clever Cloud then assigns a specific port to your application to expose it to TCP traffic. This port is chosen at random above 5000.\nUse this specific port to send and receive TCP traffic.\n⚠️ The application must still be listening to the 8080 port, regardless of TCP configuration. "},"title":"TCP redirections"},"/developers/doc/administrate/zone-migration/":{"data":{"":"In this document, we will see how you can migrate your Clever Cloud services from one zone to another zone, for example from Paris to Montreal.\nFor most of the services, you will be able to migrate them as-is. For others, you will need to create them and do a manual migration.\nKeep in mind that our support team remains available, should you have any questions regarding zone migration.","add-on-migration#Add-on migration":"Add-ons can be migrated from one zone to another. For some of them, our support team can help you do it.\nPostgreSQL, MySQL, MongoDB, Redis These add-ons can be migrated using the Migration Tool.\nOnce your migration is over, the services connecting to the add-on might be impacted by an increased latency due to DNS updates. The domain of your add-on will have its DNS records changed but it will take up to 1 hour for them to propagate. This means that during that time, your services might still connect to the old zone, which will then redirect to the target zone where your database has been migrated.\nJenkins, Elasticsearch, Cellar, Pulsar These add-ons can not be automatically migrated across zones. Please reach out to our support team so we can assist you further for this migration.\nFSBucket FSBuckets can not be migrated across zones either. You will have to create a new FSBucket in the target zone and transfer its content from the old to the new one.\nTo do so, you can use the LFTP or Rclone tools. Or you can ask our support team and we will be able to do it for you.\n⚠️ In case of a FSBucket add-on (and not a PHP+FTP add-on), remember to link it to your application once it has been migrated to the new zone. ","application-migration#Application migration":"Most of the applications will migrate without issues. If one of your applications matches any criteria is in the list below, you will need extra steps described in the following sub-sections.\nAny application that uses a FSBucket add-on PHP applications In this case, please read the prerequisites below first and then follow the right sub-section.\nPrerequisites Besides redeploying your application in your target zone, you have to keep a few things in mind:\nIncreased latency might be observed during DNS propagation (more below) You will need to update your DNS settings, so make sure you have access to your DNS registrar One of the first things you can do is to lower your DNS records TTL (time to live). In order to speed up the DNS propagation during the update of your domains DNS records.\nOn your registrar’s interface, find your application’s domain. Usually, the DNS record will be domain.tld IN CNAME domain.\u003ccurrent-zone\u003e.clever-cloud.com with a certain TTL. Edit that TTL to 60 seconds instead of the existing value, and wait for this change to propagate (wait as much time as the old TTL value). This change will allow a faster DNS propagation when you have to update the CNAME record value to domain.\u003ctarget-zone\u003e.clever-cloud.com, lowering the amount of time your users will experience an increased latency.\nℹ️ After the migration, you can set back your old TTL value. Increased latency Once your application has been redeployed to your target zone, your application’s domain will still have its DNS pointing to the old zone. As a consequence, the latency may increase for your users. For example, if you are migrating from Paris (PAR) to Montreal (MTL), your visitors will connect to our Paris infrastructure, which will then redirect the traffic to our Montreal infrastructure, leading requests to take more time.\nYou might also experience an increased latency between your application and other services (like a PostgreSQL add-on for example). If your application has switched to the Montreal zone and your PostgreSQL add-on is still in Paris, your application will need extra time to query the database.\nDNS updates Once your application has been migrated to your target zone, you will find in the Domain names section the new A and CNAME DNS records to use for your application’s domains. If you were using A records, update the records (there might be more or fewer of them than what you had previously, this is normal). If you used a CNAME record, simply change the value.\nOnce done, it will take as much time to propagate as the TTL defined for that record. If you followed the prerequisites above, it should take a few minutes tops.\nMigration If your application doesn’t match any criteria of the list in the Application migration section, then you can go to the Information pane of your application. Under the Zone label, chose your target zone. Once selected, you can save your changes using the Save button at the bottom of the page.\nAfter saving, you can now redeploy your application in the Overview, it will redeploy on the new zone.\nApplications using an FSBucket FSBuckets can only be mounted by applications on the same zone. This means that you cannot use an FSBucket add-on hosted in Paris, if your application is in Montreal.\nTo migrate FSBuckets, see the section below.\nPHP Applications Because of technical reasons, a PHP application can not be migrated to another zone. In this case, you will have to re-create the application. When domains are switched from the old application to the new one, a small downtime may occur. 404 or 503 errors might happen for a few seconds.\nFirst, create a new PHP application on your target zone. Then, you can easily copy / paste the environment variable from the old application to the new one using the Expert mode of our environment variables interface. Don’t forget to link all services that were linked to your old application. Linking multiple times the same service to different application doesn’t cause any issue. Make sure the Scalability section of your application is the same as the old one, as well as the various options you can find in the Information pane (HTTPS redirection, build cache, …).\nOnce everything is setup again, we can push the code. If you are using Git, you can find the new Git URL in the Information panel. If you are using FTP, please read the FSBucket migration section.\nYour new application should now be deployed. You can update the domain names: for each domain of your old application, delete it and add it to the new application.\nYou can use the CLI to do it and minimize the downtime:\nclever -a \u003cold-application-alias\u003e domain rm \u003cdomain\u003e; clever -a \u003cnew-application-alias\u003e domain add \u003cdomain\u003e You can now update your DNS as described in the DNS updates section."},"title":"Zone Migration"},"/developers/doc/applications/":{"data":{"":"","choose-your-stack#Choose your Stack":"","environment-variables#Environment Variables":"You can control deployments and set your application configuration with environment variables: Common to all applicationsSet by the deployment process. DefineVariables you can define. CacheControl the build and deployment cache. RunControl the deployment behavior. HooksDefine commands to run between various steps of the deployment. How toHow to to configure your application with environment variables. Common to All Applications Applications on Clever Cloud listen on port 8080. Be sure you application is able to listen on port 8080 before deploying. Deployments on Clever Cloud are immutable: if your app restarts, last pushed commit will be deployed with your current environment variables. ℹ️ Learn more about immutablity and application management. ","how-to-deploy-x-if-it-isnt-natively-supported#How To Deploy X if It Isn\u0026rsquo;t Natively Supported":"Choose your Stack Find here specific instructions related to your application’s language.\nDocker Go Haskell Java Node.js Ruby PHP Python Rust Scala Elixir .NET .Static How To Deploy X if It Isn’t Natively Supported If your favorite runtime is not available, you can deploy it on Clever Cloud by Dockerizing it and make it run in a Docker instance. You will probably find a basic Docker file for your technology on the Docker hub.\nRefer to the Docker section of this documentation to know how to deploy your Dockerized application.\nIf you are out of options, contact our support team and we’ll come up with a solution with you."},"title":"Applications"},"/developers/doc/applications/docker/":{"data":{"":"","configure-your-docker-application#Configure your Docker application":"","enable-health-check-during-deployment#Enable health check during deployment":" Clever Cloud offers support for Docker containers. These are deployed inside virtual machines to guarantee a secure level of isolation. Overview Docker containers can encapsulate any payload, and will run consistently on and between virtually any server. The same container that a developer builds and tests on a laptop will run at scale, in production, on VMs, bare-metal servers, public instances, or combinations of the above.\nClever Cloud allows you to deploy any application running inside a Docker container. This page will explain how to set up your application to run it on our service.\nℹ️ Clever Cloud supports many languages, but some users have specific application needs. With Docker, they can create custom stacks without relying on Clever Cloud’s specific support. ⚠️ FS Buckets access, Dockerfile validation, and Docker Compose functionalities are not supported. How it works When you create a Docker application on Clever Cloud, the deployment process involves the following steps:\nInstall/Login: The system checks for a Dockerfile and an entrypoint. It logs into the docker registry that you configured in the Dockerfile, if any, to find the necessary image (note: the name of the Docker registry may vary depending on the provider. It’s called “container registry” in GitHub, for instance) Build: The application pulls the specified image and execute commands you specified in Dockerfile. Note: This step focuses on executing commands in your Dockerfile and doesn’t require build instructions if you are using a pre-compiled image. Run: The application starts in a Docker container and exposes the service on port 8080 by default. If you need to expose your application on a different port, you can specify this using the environment variable CC_DOCKER_EXPOSED_HTTP_PORT. Setting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Docker application Mandatory configuration Be sure that you:\npush on the master branch. have and commit a file named Dockerfile or use the CC_DOCKERFILE environment variable if your Dockerfile has a different name, Here is what it will look like. run the application with CMD or ENTRYPOINT in your Dockerfile. listen on HTTP port 8080 by default (you can set your own port using CC_DOCKER_EXPOSED_HTTP_PORT=\u003cport\u003e environment variable). Dockerfile contents You can virtually put everything you want in your Dockerfile. The only mandatory (for us) instruction to put in it is:\nCMD \u003ccommand to run\u003e command to run: this is the command that starts your application. Your application must listen on port 8080. It can be easier for you to put a script in your docker image and call it with the CMD instruction.\nMemory usage during building If the building step of your app crashes because it uses more memory that it’s available, you’ll have to split the building and running steps and enable Dedicated build instance\n# The base image FROM outlinewiki/outline:version-0.44.0 # Run the memory intensive build on an instance with 4 GB of memory (M) RUN yarn install \u0026\u0026 yarn build # Start the app on a smaller instance (nano) CMD yarn start TCP support Clever Cloud enables you to use TCP over Docker applications using the environment variable CC_DOCKER_EXPOSED_TCP_PORT=\u003cport\u003e. Refer to the documentation page to know how to create TCP redirections.\nDocker socket access Some containers require access to the docker socket, to spawn sibling containers for instance.\n⚠️ Giving access to the docker socket breaks all isolation provided by docker. DO NOT give socket access to untrusted code. You can make the docker socket available from inside the container by adding the CC_MOUNT_DOCKER_SOCKET=true environment variable. In that case, docker is started in the namespaced mode, and in bridge network mode.\nPrivate registry We support pulling private images through the docker build command. To login to a private registry, you need to set a few environment variables:\nCC_DOCKER_LOGIN_USERNAME: the username to use to login CC_DOCKER_LOGIN_PASSWORD: the password of your username CC_DOCKER_LOGIN_SERVER (optional): the server of your private registry. Defaults to Docker’s public registry. This uses the docker login command under the hood.\nEnable IPv6 networking You can activate the support of IPv6 with a IPv6 subnet in the docker daemon by adding the CC_DOCKER_FIXED-CIDR-V6=\u003cIP\u003e environment variable.\nBuild-time variables You can use the ARG instruction to define build-time environment variables.\nEvery environment variable defined for your application will be passed as a build environment variable using the --build-arg=\u003cENV\u003e parameter during the docker build phase.\nDockerized Rust application Deployment To make your dockerized application run on clever Cloud, you need to:\nexpose port 8080 in your docker file run the application with CMD or ENTRYPOINT For instance, here is the Dockerfile used for the Rust application:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # rust tooling is provided by `archlinux-rust` FROM geal/archlinux-rust MAINTAINER Geoffroy Couprie, contact@geoffroycouprie.com # needed by rust ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib # relevant files are in `./source` ADD . /source WORKDIR /source # Clever Cloud expects your app to listen on port 8080 EXPOSE 8080 RUN rustc -V # Build your application RUN cargo build # Run the application with `CMD` CMD cargo run Dockerized HHVM application Deployment Deploying a HHVM application is a bit trickier as it needs to have both HHVM and nginx running as daemons. To be able to have them running both, we need to put them in a start script:\n1 2 3 4 5 6 7 8 9 10 11 #!/bin/sh hhvm --mode server -vServer.Type=fastcgi -vServer.Port=9000\u0026 service nginx start composer install echo \"App running on port 8080\" tail -f /var/log/hhvm/error.log Since the two servers are running as daemons, we need to start a long-running process. In this case we use tail -f. We then add start.sh as the CMD in the Dockerfile\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # We need HHVM FROM jolicode/hhvm # We need nginx RUN sudo apt-get update \\ \u0026\u0026 sudo apt-get install -y nginx ADD . /root RUN sudo chmod +x /root/start.sh # Nginx configuration ADD hhvm.hdf /etc/hhvm/server.hdf ADD nginx.conf /etc/nginx/sites-available/hack.conf RUN sudo ln -s /etc/nginx/sites-available/hack.conf /etc/nginx/sites-enabled/hack.conf # Checking nginx config RUN sudo nginx -t RUN sudo chown -R www-data:www-data /root WORKDIR /root # The app needs to listen on port 8080 EXPOSE 8080 # Launch the start script CMD [\"sudo\",\"/root/start.sh\"] Sample dockerized applications We provide a few examples of dockerized applications on Clever Cloud.\nElixir App Haskell App Hack / HHVM App Seaside / Smalltalk App Rust App Environment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Docker"},"/developers/doc/applications/dotnet/":{"data":{"":"","configure-your-dotnet-application#Configure your Dotnet application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","enable-health-check-during-deployment#Enable health check during deployment":"Overview Clever Cloud allows you to deploy .NET web applications. This page explains you how to set up your application to run it with the .NET runtime.\nYou don’t need to change a lot in your application, the requirements section explains how to configure your apps with some mandatory files to add, and properties to setup.\n⚠️ If you encounter an issue, please contact the support. Create an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Dotnet application .NET version The versions used on Clever Cloud are the following:\nDefault Version Accepted Versions 6.0 8.0 You can change the default version by setting the CC_DOTNET_VERSION environment variable to 6.0. Clever Cloud doesn’t support non-LTS and older versions.\nRequirements Be sure that:\nYou have pushed in master branch. You listen on port 8080, by default each .NET application is created with the ASPNETCORE_URLS=\"http://0.0.0.0:8080\" environment variable. You have committed the different files of your project and the corresponding project file (.csproj, .fsproj or .vbproj). Take an example with the cc-dotnet-demo.\nIf needed, you could add the APP_FOLDER=\u003cyour_app_folder\u003e environment variable to define the application folder inside the Git repository (where .*proj is stored).\nDuring deployment, the runtime automatically detects the cc-dotnet-demo.csproj file and the target framework net8.0. Then, it publishes the .NET project:\ndotnet publish --framework net8.0 --configuration Release No additional configuration is required (unless multiple project files or target frameworks are present, see the documentation below).\nMultiple project files in the repository If multiple project files are present in your repository, you can specify the file to use (without the .*proj extension) with the CC_DOTNET_PROJ environment variable.\nCC_DOTNET_PROJ=cc-dotnet-demo Multiple binary targets If your project file defines multiple targets, like :\n1 2 3 4 5 6 \u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e \u003cPropertyGroup\u003e \u003cTargetFramework\u003enet6.0;net8.0\u003c/TargetFramework\u003e \u003c/PropertyGroup\u003e ... You must specify the one you want to run, with the CC_DOTNET_TFM environment variable.\nIf CC_DOTNET_TFM is specified, then the executable produced by this target is used to start the application.\nCC_DOTNET_TFM=net6.0 Dependencies Make sure to list all your dependencies in your project file. For example:\n1 2 3 4 5 6 7 ... \u003cItemGroup\u003e \u003cPackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"5.0.1\" /\u003e \u003cPackageReference Include=\"Microsoft.SyndicationFeed.ReaderWriter\" Version=\"1.0.2\" /\u003e \u003c/ItemGroup\u003e \u003c/ItemGroup\u003e \u003c/Project\u003e Compiled dependencies are cached by default to speed up deployments. You can turn off dependencies caching completely by removing the CC_CACHE_DEPENDENCIES environment variable.\nIf you want to rebuild your application from scratch, you can select “rebuild and restart” from the console or launch clever restart --without-cache from CLI\nConfigure profile The default profile is Release but you can use the CC_DOTNET_PROFILE environment variable to change this configuration.\nCC_DOTNET_PROFILE=Debug Custom run command If you need to run a custom command (or just pass options to the program), you can specify it through the CC_RUN_COMMAND environment variable.\nFor instance, you can have CC_RUN_COMMAND=./bin/Release/net6.0/exherbo-x64/myapp \u003coptions\u003e.\nPrivate dependencies Clever Cloud supports private dependency management with NuGet package manager.\nAdd the configuration file nuget.config :\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cconfiguration\u003e \u003cpackageSources\u003e \u003cclear /\u003e \u003cadd key=\"my_nuget_repo\" value=\"%PACKAGE_REGISTRY_URI%\" /\u003e \u003c/packageSources\u003e \u003cpackageSourceCredentials\u003e \u003cmy_nuget_repo\u003e \u003cadd key=\"Username\" value=\"%PACKAGE_REGISTRY_USERNAME%\" /\u003e \u003cadd key=\"ClearTextPassword\" value=\"%PACKAGE_REGISTRY_PASSWORD%\" /\u003e \u003c/my_nuget_repo\u003e \u003c/packageSourceCredentials\u003e \u003c/configuration\u003e Set environment variables in the console according to your own information : PACKAGE_REGISTRY_URI, PACKAGE_REGISTRY_USERNAME and PACKAGE_REGISTRY_PASSWORD\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nTo access environment variables from your code, you can use System.Environment.GetEnvironmentVariable(\"MY_VARIABLE\")\".\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":".NET"},"/developers/doc/applications/elixir/":{"data":{"":"","build-deployment-phases-and-custom-configuration#Build, deployment phases and custom configuration":"","configure-your-elixir-application#Configure your Elixir application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"Overview Clever Cloud supports Elixir based applications.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Elixir application Mandatory configuration Get your Elixir version in your console with $ elixir -v and set the environment variable CC_ELIXIR_VERSION to its value. Available versions as of today are the following:\nDefault Version Accepted Versions 1.16 1.8 1.9 1.10 1.11 1.12 1.13 1.14 1.15 Compatibility between Elixir and Erlang/OTP Each version of Elixir uses the most recent compatible version of Erlang, based on the compatibility table provided in the official Elixir documentation. If you deploy a Phoenix application Edit the file config/prod.secret.exs to replace System.get_env(\"DATABASE_URL\") with System.get_env(\"POSTGRESQL_ADDON_URI\"). Generate a secret token with $ mix phx.gen.secret. set environment variable SECRET_KEY_BASE to the value obtained with $ mix phx.gen.secret previously set environment variable CC_PHOENIX_RUN_ECTO_MIGRATE to true if you need to trigger the command $ mix ecto.migrate Build, deployment phases and custom configuration Once you push your code to Clever Cloud, the following commands are run:\nmix deps.get mix deps.compile npm install These commands will compile your dependencies at the root of your project folder. If you want to use another folder for npm install, specify it via the environment variable CC_PHOENIX_ASSETS_DIR. To change the folder for the entire build / run process, you should use APP_FOLDER environment variable.\nThen mix compile is run. If you want to override this behavior, you can set the environment variable CC_MIX_BUILD_GOAL to the value you desire.\nAt this point, there is the command npm run deploy.\nThen mix phx.digest is run. You can override this one with the variable CC_PHOENIX_DIGEST_GOAL.\nFinally, mix phx.server is invoked, and as always, you can override this behavior, either with CC_RUN_COMMAND where you have to specify the full command, or CC_PHOENIX_SERVER_GOAL where it will be a mix task by default.\nNote: If you need to specify the timezone of your application, you can do it with the variable TZ set to the usual timezone format, for instance Europe/Paris.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Elixir"},"/developers/doc/applications/golang/":{"data":{"":"","configure-your-go-application#Configure your Go application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","enable-health-check-during-deployment#Enable health check during deployment":"Overview Clever Cloud allows you to deploy any Go application. This page explains how to set up your project to run it on our service. You won’t need to change a lot, the requirements will help you configure your applications with some mandatory files to add, and properties to set up.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Go application Mandatory needs By default, we consider that your repository contains a single application. Be sure that:\nIt listens to the wild network 0.0.0.0, not only localhost or 127.0.0.1 It listens on port 8080 You follow our build/run instructions In most cases you won’t need to change anything to your application, except host/port and some configuration variables.\nComplementary runtime If you need a runtime environment such as Node.js or tools to build a frontend for example, some are available in our Go instances. You can use them through scripts launched by deployments hooks and Environment variables sometimes allow you to configure them. So if you need a specific version of Node.js, set CC_NODE_VERSION (it could be node (latest), lts/*, 20 or 21.5.0).\nModern Go project structure There are multiple ways to build/run a Go application, and this has evolved over the years. In its modern form a Go project can be a:\nPackage: one or more .go files you can build or run. main package and main() function are the default entry point Module: one or more packages you can install, defined in a go.mod file (go.sum for checksums) Workspace: one or more modules seamlessly combined, defined in a go.work file Install any module locally or from a remote repository by passing its URL to the install command. A Makefile is sometimes used to define how to build, run and/or clean a Go project. The lightest form of a Go project is a main.go file to build. The src/ folder was often used for source code, but using the cmd/ folder instead is now a common practice.\nIf you want to limit from where a package can be imported, place it in a folder named ìnternal/. Access to functions in .go files is defined depending on their name: if it starts with a capital letter it’s a public function, if not it’s a private function.\nFor a complete project, a common files/folders organization can be: application-root/ go.work Makefile cmd/ main.go other-file.go other-package.go … module/ go.mod go.sum main.go other-module-file.go internal/ internal-package/ internal-package-file.go Go build and deploy on Clever Cloud In such a situation, our strategy is to let the user choose how to build/run its application and make the deployment easy anyway. At first, we used the goget method, which is now deprecated. Thus, you can now use gobuild (for packages), gomod (for modules) or makefile. The latter will allow you to define custom build steps and a main executable to start the application.\nℹ️ If the required Go version declared in the go.mod is superior to the version built in the instance, it will be automatically updated. Environment variables If you don’t want to add a file to your project, you can set one of these environment variables:\nName Description CC_GO_BUILD_TOOL Available values: gomod, gobuild, makefile. Build and install your application. goget still exists but is deprecated. CC_GO_BINARY Mandatory for a Makefile build, path to the built binary, used to launch your application. CC_GO_PKG Tell the CC_GO_BUILD_TOOL which file contains the main() function, default main.go. CC_GO_RUNDIR Run the application from the specified path, relative to $GOPATH/src/, now deprecated. ℹ️ The default GO_PATH is ${HOME}/go_home. The command executed to launch the application is go install $CC_GO_PKG. Your project may include vendored dependencies (in the vendor/ folder). gobuild To build a Go package. CC_GO_PKG can be set to define the main file of your application (default main.go).\ngomod To build a Go module, be sure that the go.mod file is in your git tree and at the root of your application. Your project’s entry point should be in the same folder as the go.mod file and be named main.go. If it isn’t, you have to set CC_GO_PKG=path/to/entrypoint.go.\nmakefile To build a Go project with a Makefile. You have to set CC_GO_BINARY with the path to the built binary, used to launch your application. If a Makefile is present with a CC_GO_BINARY set and no go.mod file at the root of your project, the makefile method will automatically be used.\nAn example of a Makefile, to use with CC_GO_BINARY=bin/myApp:\nMakefileBINARY=bin/myApp build: #\tTo install a specific Go version, you can add: #\tgo install golang.org/dl/gox.xx.x@latest #\t${HOME}/go_home/bin/gox.xx.x download #\tThen use `${HOME}/go_home/bin/gox.xx.x` instead of `go` echo \"Build the application as ./${BINARY}\" go build -o ${BINARY} main.go You’ll find a more complex project using a Go Workspace and a Makefile here.\n⚠️ Using clevercloud/go.json to define Makefile and binary paths is a deprecated method and should no longer be used. Environment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nTo access environment variables from your code, just get them from the environment with PATH: os.Getenv(\"MY_VARIABLE\").\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"","overview#Overview":"","see-also#See also":" Deploy EchoIP guide ","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Go"},"/developers/doc/applications/haskell/":{"data":{"":"","configure-your-haskell-application#Configure your Haskell application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"Overview Haskell is a purely functional language, especially suited for robust web applications.\nThere are many ways to write web applications in Haskell, from raw WAI to full-stack frameworks like Yesod, simple libraries like scotty or type-safe solutions like servant.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Haskell application Mandatory configuration Be sure that:\nyou have pushed in master branch you listen on port 8080 you have one and only one binary target in your .cabal file your project has a stack.yaml file The steps ran in order are:\nstack setup stack install --only-dependencies stack install ./\u003cpath\u003e/my-exe (or the contents of CC_RUN_COMMAND) The executable built by stack build (or the command you specify) must start a web server listening on 0.0.0.0:8080.\nFor instance, a minimal scotty application can look like this:\n1 2 3 4 5 6 7 {-# LANGUAGE OverloadedStrings #-} import Web.Scotty main = scotty 8080 $ do get \"/\" $ do html $ \"Hello world\" Dependencies Make sure to list all your dependencies in your .cabal file.\nFor the example above, you need:\n1 2 3 4 executable myfirstapp main-is: Main.hs build-depends: base , scotty Cached dependencies You can enable dependencies caching by adding the CC_CACHE_DEPENDENCIES=true.\nIt is enabled by default only for rust and haskell applications.\nTo disable dependencies caching completely, you can remove the CC_CACHE_DEPENDENCIES environment variable or by setting it to false.\nTo fully remove cached dependencies, you have to rebuild your application from scratch.\nYou can select rebuild and restart from the console or launch clever restart --without-cache with the Clever Tools CLI.\nCustom run command If you need to run a custom command (or just pass options to the binary built by stack), you can specify it through the CC_RUN_COMMAND environment variable.\nFor instance, for a hakyll website, you can define:\nCC_RUN_COMMAND=\"~./local/bin/site server --host 0.0.0.0 --port 8080\" To access environment variables from your code, just get them from the environment with getEnv :: String -\u003e IO String in System.Environment.\nIf some environment variables are critical to your application, here is an approach you can use:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 {-# LANGUAGE OverloadedStrings #-} module Main where import Data.Text.Lazy (pack) import System.Environment (getEnv) import Web.Scotty (get, html, scotty) envVar = getEnv \"MY_VAR\" main = do myVar \u003c- envVar scotty 8080 $ do get \"/\" $ do html . pack $ \"Hello world \" ++ myVar This loads the environment variable in your main function and tests it. This way, the application will refuse to start with an helpful error message if MY_VAR is not defined.\nSpecify Stack package target You may have several packages in your application which can be time consuming when building them, if you don’t want to build every packages you can target a package by using the CC_HASKELL_STACK_TARGET environnement variable.\nCC_HASKELL_STACK_TARGET=\"mypackage\" Git Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Haskell"},"/developers/doc/applications/java/":{"data":{"":"","#":" Find detailed instructions according to your framework Gradle Jar Maven War/Ear Play 1 Play 2 More Frameworks Looking for instructions on a specific framework deployment?\nCheck our Guides "},"title":"Java"},"/developers/doc/applications/java/java-gradle/":{"data":{"":"","available-java-versions#Available Java versions":"","configure-your-java-application#Configure your Java application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","custom-run-command#Custom run command":"","enable-health-check-during-deployment#Enable health check during deployment":"Overview Clever Cloud offers you to run your Gradle projects. You can deploy this kind of project without changing your code, but running it on Clever Cloud needs some configuration files or environment variables, to add parameters like your gradle task for example.\nGradle is a project automation tool that builds upon the concepts of Apache Ant and Apache Maven and introduces a Groovy-based domain-specific language (DSL) instead of the more traditional XML form of declaring the project configuration.\nNote : like other runtimes, Java application need listen on 0.0.0.0:8080\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nAvailable Java versions Set the environment variable CC_JAVA_VERSION to the version you want.\nWe follow the official Java roadmap by supporting both LTS and latest non-LTS versions.\nWe are using OpenJDK distribution for mentioned Java versions.\nEvery non-LTS versions where Premier support ends will be removed without warning as you should be able to switch to the next available non-LTS version without any trouble.\nAccepted values are the following:\nDefault Version Accepted Versions 11 22 21 17 11 8 7 graalvm-ce (graalvm-ce for GraalVM 21.0.0.2, based on OpenJDK 11.0)\nConfigure your Java application You must provide a clevercloud/gradle.json file (gradle.json file in clevercloud folder which is at the root of your repository) that contains at least the following:\n{ \"deploy\": { \"goal\": \"grails:run\" } } That is the only option you really need to supply.\nOptional configuration The full configuration can look like the following:\n{ \"build\": { \"type\": \"\u003cstring\u003e\", \"goal\": \"\u003cstring\u003e\" }, \"deploy\": { \"goal\": \"\u003cstring\u003e\" } } You can use the following properties:\nUsage Field Description Optional build → type can be maven, gradle or ant Optional build → goal is the target you want to use to build your project Required deploy → goal the goal/target and options you want to execute to deploy/run you project Custom run command If you need to run a custom command you can specify it through the CC_RUN_COMMAND environment variable. This will override the default way of running your application.\nExample:\nCC_RUN_COMMAND=\"java -jar somefile.jar \u003coptions\u003e\" Environment injection Clever Cloud can inject environment variables that are defined in the dashboard and by add-ons linked to your application.\nFor Java applications, the environment is injected in the System.getProperties() object.\nSo, to use a variable, you just need System.getProperties().getProperty(\"MY_VARIABLE\").\nFor Groovy applications, just use the System.getProperty(\"MY_VARIABLE\").\nThe Gradle Wrapper Since Gradle can come in many versions, Clever Cloud automatically support the Gradle Wrapper ↗.\nJust create and commit the gradlew file and the wrapper jar and properties files. Your working repository should look like this:\n. clevercloud gradle.json gradlew graddle wrapper gradle-wrapper.jar gradle-wrapper.properties src Monitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","more-configuration#More configuration":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":"","the-gradle-wrapper#The Gradle Wrapper":""},"title":"Gradle"},"/developers/doc/applications/java/java-jar/":{"data":{"":"","available-java-versions#Available Java versions":"","configure-your-java-application#Configure your Java application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","custom-run-command#Custom run command":"","enable-health-check-during-deployment#Enable health check during deployment":"Overview Clever Cloud offers you to run any Java ARchive file. You do not need to change your code, but running it on Clever Cloud needs some configuration files or environment variable to specify the JAR path.\nNote : like other runtimes, Java application needs to listen on 0.0.0.0:8080\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nAvailable Java versions Set the environment variable CC_JAVA_VERSION to the version you want.\nWe follow the official Java roadmap by supporting both LTS and latest non-LTS versions.\nWe are using OpenJDK distribution for mentioned Java versions.\nEvery non-LTS versions where Premier support ends will be removed without warning as you should be able to switch to the next available non-LTS version without any trouble.\nDefault Version Accepted Versions 11 22 21 17 11 8 7 graalvm-ce (graalvm-ce for GraalVM 21.0.0.2, based on OpenJDK 11.0)\nConfigure your Java application You must either have the CC_JAR_PATH environment variable containing the path to your jar or provide a clevercloud/jar.json file (jar.json file in clevercloud folder which is at the root of your repository) that contains at least the following:\n{ \"deploy\": { \"jarName\": \"path/to/jar\" } } That is the least you need to do. Note that path/to/jar must not start with a / and that the path should be relative to your repository’s root.\nBuild options You do not need to build and commit a JAR. Instead you can push your sources and build them with either gradle, ant or maven. Here is the configuration you need to provide in the clevercloud/jar.json file:\n{ \"build\": { \"type\": \"maven\"|\"gradle\"|\"ant\", \"goal\": \"package\" } } The goal field is what will be asked to the build command, like mvn package for a maven build with the package goal.\nAn configuration example with a maven build that generates a JAR with embedded dependencies is:\n{ \"build\": { \"type\": \"maven\", \"goal\": \"package\" }, \"deploy\": { \"jarName\": \"target/myproject-1.0-jar-with-dependencies.jar\" } } An example of full configuration You can pass extra arguments to the java command by using the environment variable CC_EXTRA_JAVA_ARGS and to your JAR by using CC_JAR_ARGS\nThe full configuration can look like the following:\n{ \"build\": { \"type\": \"\u003cstring\u003e\", \"goal\": \"\u003cstring\u003e\" }, \"deploy\": { \"goal\": \"\u003cstring\u003e\", \"jarName\": \"\u003cstring\u003e\" } } You can use the following properties:\nUsage Field Description Optional build → type can be maven, gradle or ant Optional build → goal is the target you want to use to build your project Optional deploy → goal the goal/target and options you want to execute to deploy/run you project Required build → jarName jar file name of your application Monitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nCustom run command If you need to run a custom command (or just pass options to the program), you can specify it through the CC_RUN_COMMAND environment variable. This will override the default way of running your application.\nExample:\nCC_RUN_COMMAND=\"java -jar somefile.jar \u003coptions\u003e\" Environment injection Clever Cloud can inject environment variables that are defined in the dashboard and by add-ons linked to your application.\nFor Java applications, the environment is injected in the System.getProperties() object.\nSo, to use a variable, you just need System.getProperties().getProperty(\"MY_VARIABLE\").\nFor Groovy applications, just use the System.getProperty(\"MY_VARIABLE\").\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Jar"},"/developers/doc/applications/java/java-maven/":{"data":{"":"","available-java-versions#Available Java versions":"","configure-your-java-application#Configure your Java application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","custom-run-command#Custom run command":"","enable-health-check-during-deployment#Enable health check during deployment":"Overview Clever Cloud offers you to run your Java Maven projects. You can deploy this kind of project without changing your code, but running it on Clever Cloud needs specific environment variables or configuration files, to add parameters like your targeted container for instance.\nNote : like other runtimes, Java application needs to listen on 0.0.0.0:8080\nMaven is essentially a project management and comprehension tool and as such provides a way to help with managing:\nBuilds Documentation Reporting Dependencies SCMs Releases Distribution Create an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Java application About Cargo To run your app, you can, for example, use plugins like cargo (Find it here). Your application must be set to listen on the port 8080.\nAvailable Java versions Set the environment variable CC_JAVA_VERSION to the version you want.\nWe follow the official Java roadmap by supporting both LTS and latest non-LTS versions.\nWe are using OpenJDK distribution for mentioned Java versions.\nEvery non-LTS versions where Premier support ends will be removed without warning as you should be able to switch to the next available non-LTS version without any trouble.\nDefault Version Accepted Versions 11 22 21 17 11 8 7 graalvm-ce (graalvm-ce for GraalVM 21.0.0.2, based on OpenJDK 11.0)\nMandatory configuration Option 1: JSON file in repository The clevercloud/maven.json (maven.json file in clevercloud folder which is at the root of your repository) file must contain the goal field to indicate how to start your application:\n{ \"deploy\": { \"goal\": \"yourgoal\" } } An example of what can be found as a goal value is:\n\"-Dtest.active=false -Dexec.mainClass=\\\"com.example.Main\\\" assembly:jar-with-dependencies exec:java\" Option 2: Environment variable If you don’t want to add a file to your repository, or if you’re using a monorepo with multiple applications in directories configured with the APP_FOLDER environment variable, you’ll probably prefer to use an environment variable for deployment configuration.\nSimply define MAVEN_DEPLOY_GOAL=\"yourgoal\" and it’s OK\nEg. MAVEN_DEPLOY_GOAL=\"spring-boot:run\" for a Spring Boot application with spring-boot-maven-plugin\nOptional configuration The full configuration can look like the following:\n{ \"build\": { \"type\": \"\u003cstring\u003e\", \"goal\": \"\u003cstring\u003e\" }, \"deploy\": { \"goal\": \"\u003cstring\u003e\" } } You can use the following properties:\nUsage Field Description Optional build → type can be maven, gradle or ant Optional build → goal is the target you want to use to build your project Required deploy → goal the goal/target and options you want to execute to deploy/run you project Specifying a profile If you need to specify a maven profile (either for the build or the deploy goal, you can add it in the goal section:\n\"-Pmyprofile package\" Or use the CC_MAVEN_PROFILES environment variable.\nEg. CC_MAVEN_PROFILES=\"prod\".\nCustom run command If you need to run a custom command you can specify it through the CC_RUN_COMMAND environment variable. This will override the default maven run we use to run your application.\nExample:\nCC_RUN_COMMAND=\"java -jar somefile.jar \u003coptions\u003e\" Monitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Maven"},"/developers/doc/applications/java/java-war/":{"data":{"":"","available-containers#Available containers":"","available-containers-for-warjson#Available containers for war.json":"","available-java-versions#Available Java versions":"","configure-your-java-application#Configure your Java application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","custom-run-command#Custom run command":"","enable-health-check-during-deployment#Enable health check during deployment":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"Overview Clever Cloud allows you to run WAR or EAR applications. You can deploy these projects without changing your code. We just need a configuration file with your targeted container.\nIn JEE , application modules are packaged as EAR and WAR based on their purpose.\nWAR : Web modules which contains Servlet class files, JSP FIles, supporting files, GIF and HTML files are packaged as JAR file with .war extension.\nEAR : *.war and *.jar files are packaged as JAR file with .ear extension and deployed into Application Server. EAR file contains configuration such as application security role mapping, EJB reference mapping and context root URL mapping of web modules.\nNote : like other runtimes, Java application needs to listen on 0.0.0.0:8080\nAvailable containers Clever Cloud supports many servlet containers. The supported containers are listed below:\nApache Tomcat Jetty Payara Wildfly Apache Tomcat 6.0 (TOMCAT6) Jetty 9.0 (JETTY9) Payara 5.2022 (PAYARA5) WildFly 26.0.0 (WILDFLY26) Apache Tomcat 8.8 (TOMCAT8) Jetty 11.0.6 (JETTY11) Payara 6.2023 (PAYARA6) WildFly 27.0.1 (WILDFLY27) Apache Tomcat 10.0 (TOMCAT10) WildFly 33.0.1 (WILDFLY33) Create an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nAvailable Java versions Set the environment variable CC_JAVA_VERSION to the version you want.\nWe follow the official Java roadmap by supporting both LTS and latest non-LTS versions.\nWe are using OpenJDK distribution for mentioned Java versions.\nEvery non-LTS versions where Premier support ends will be removed without warning as you should be able to switch to the next available non-LTS version without any trouble.\nDefault Version Accepted Versions 11 22 21 17 11 8 7 graalvm-ce (graalvm-ce for GraalVM 21.0.0.2, based on OpenJDK 11.0)\nConfigure your Java application ⚠️ You must provide a clevercloud/war.json file in your application repository. Full configuration example Here’s what your configuration file can look like:\n{ \"build\": { \"type\": \"maven\", \"goal\": \"package\" }, \"deploy\": { \"container\": \"TOMCAT8\", \"war\": [ { \"file\": \"target/my-app-1.0-SNAPSHOT.war\", \"context\": \"/app1\", \"checkMe\": \"/app1/ping\" }, { \"file\": \"my-second-app.war\", \"context\": \"/app2\", \"checkMe\": \"/app2/web/foobar\" } ] } } Breaking down the configuration Requirements Here are the mandatory fields:\n{ \"deploy\": { \"container\":\"\u003cstring\u003e\", \"war\": [ { \"file\": \"\u003cstring\u003e\", \"context\": \"/\u003cstring\u003e\", \"checkMe\": \"/\u003cstring\u003e\" } ] } } Usage Field Description Required container Name of the container to use. Should contain one of the values inside parentheses in the containers table (uppercase). Required file Should contain the path of the war/ear file relative to your application root. Optional context - Must start with a slash (/), can be “/” - Defines the base path you want your app to be under. If your app has a /foobar endpoint, it will be available under the /{my-context}/foobar path. - Not needed for an ear file. - The default value for a war is the name of the war without the extensions: helloworld-1.0.war will be deployed under the /helloworld-1.0 context. Optional checkMe - This field is recommended. - A path to GET in order to test if the application is really running. - By default we will consider that the application is up if the container is up. - With this option, we will try to GET /{checkMe} for each one of your wars and consider the app down until every single checkMe path that replies a 200. Let Clever Cloud build your application The mandatory part alone is enough… if you directly push a dry war file to deploy. You might want to just push your code to Clever Cloud and let us build the app and generate the war.\nThat you can do, by setting the “build” field object in the war.json file:\n{ \"build\": { \"type\": \"\u003cstring\u003e\", \"goal\": \"\u003cstring\u003e\" } } Usage Field Description Required type - The tool you want to use to build your app. - Can be “maven”, “gradle”, “sbt” or “ant” Required goal - The goal you want the tool to execute.\n- Basically, for maven, you want to put “package” in here. Available containers for war.json Here’s the list of the configuration values for the “container” field in war.json:\nValue Description GLASSFISH3 Use Glassfish 3.x (see https://glassfish.java.net/) GLASSFISH4 Use Glassfish 4.x (see https://glassfish.java.net/) JBOSS6 Use JBoss AS 6.x (see https://www.jboss.org/jbossas) JBOSS7 Use JBoss AS 7.x (see https://www.jboss.org/jbossas) RESIN3 Use Resin AS 3.x (see https://www.caucho.com/resin-3.1/doc/) RESIN4 Use Resin AS 4.x (see https://www.caucho.com/resin-4/doc/) JETTY6 Use Jetty servlet container 6.x (see https://jetty.codehaus.org/jetty/) JETTY7 Use Jetty servlet container 7.x (see https://www.eclipse.org/jetty/) JETTY8 Use Jetty servlet container 8.x (see https://www.eclipse.org/jetty/) JETTY9 Use Jetty servlet container 9.x (see https://www.eclipse.org/jetty/documentation/current/) TOMCAT4 Use Tomcat servlet container 4.x (see https://tomcat.apache.org/) TOMCAT5 Use Tomcat servlet container 5.x (see https://tomcat.apache.org/) TOMCAT6 Use Tomcat servlet container 6.x (see https://tomcat.apache.org/) TOMCAT7 Use Tomcat servlet container 7.x (see https://tomcat.apache.org/) TOMCAT8 Use Tomcat servlet container 8.x (see https://tomcat.apache.org/) PAYARA4 Use Payara servlet container 4.x (see https://www.payara.fish/) WILDFLY9 Use Wildfly servlet container 9.x (see https://wildfly.org/) WILDFLY17 Use Wildfly servlet container 17.x (see https://wildfly.org/) WILDFLY23 Use Wildfly servlet container 23.x (see https://wildfly.org/) Enable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN Custom run command If you need to run a custom command you can specify it through the CC_RUN_COMMAND environment variable. This will override the default way of running your application.\nExample:\nCC_RUN_COMMAND=\"java -jar somefile.jar \u003coptions\u003e\" Monitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"War/Ear"},"/developers/doc/applications/javascript/":{"data":{"":"","#":" Find detailed instructions according to your framework Meteor.js Node.js More Frameworks Looking for instructions on a specific framework deployment?\nCheck our Guides "},"title":"JavaScript"},"/developers/doc/applications/javascript/meteor/":{"data":{"":"","configure-your-meteorjs-based-application#Configure your Meteor.js based application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","enable-health-check-during-deployment#Enable health check during deployment":"Overview Clever Cloud allows you to deploy any Meteor.js application. This page will explain how to set up your application to run it on our services.\nBe sure your .meteor folder is in your git repository.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Meteor.js based application Mandatory configuration Set up environment variables To run your Meteor.js application you need a few mandatory environment variables:\nMONGO_URL: this is the mongo uri you can find in your mongodb’s dashboard, it has to start with mongodb:// ROOT_URL: this is your application’s root url. It has to start with http:// or https:// PORT: keep the current value of 8080 With Meteor 2.6.n comes MongoDB 5.n and the new npm driver. You need to append ?directConnection=true in your MONGO_URL to avoid the new mongo driver Service Discovery feature.\nOptional Meteor settings as environment variable Some application require a settings.json file to store api keys and other various private and public Meteor variables. You can declare a METEOR_SETTINGS environment variable and past the content of the json file as the value of this key.\nSpecify required Node.js version Since building with the latest version of Node.js might fail, you should specify in the package.json file of the application the version needed for your Meteor application ; as shown in Deploying Node.js apps documentation. To find out which version is required by your application type the following command meteor node -v inside root folder.\nCurrently with Meteor 2.6.1 the Node.js version is 14.18.3 so you should add the following inside the package.json file.\n... \"engines\": { \"node\": \"14.18.3\" }, ... You may change the node version value according to the application requirements.\nActivate the dedicated build Meteor.js uses a lot of memory during the build. You most likely will need to activate the dedicated build feature and set your vertical scaling size at least to M.\nIf your build still fails after you enabled the feature, please contact us on the support so we can set you a bigger scaler.\nAutomatic HTTPS redirection You can use the force-ssl atmosphere package to redirect your users to the HTTPS version of your application.\nCustom start parameters If you want to set custom start parameters, the main entry point of built meteor applications is: .build/bundle/main.js. Add in the scripts.start field of the package.json: node .build/bundle/main.js \u003cparameters\u003e\nDeployment process on Clever Cloud At each deployment, the needed Meteor.js version will be read from .meteor/release and installed. Your application will then be built using meteor build --server-only and deployed from the files created by this command.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nOplog Tailing Oplog tailing is supported on dedicated databases (starting from Hazelnut size). Contact the support to enable oplog. Once enabled, set the following environment variable:\nMONGO_OPLOG_URL: mongodb://[…]mongodb.services.clever-cloud.com:{DB_PORT}/local?authSource={DB_NAME} Since Meteor 2.6.n the mongo driver detect the MONGO_OPLOG_URL by itself and you should not add this to your environment variables.\nMigrate from a Node.js instance If you want to migrate from your classic node.js app to a meteor application, contact our support in the console or at support@clever-cloud.com with the application id.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","migrate-from-a-nodejs-instance#Migrate from a Node.js instance":"","more-configuration#More configuration":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":"","specify-required-nodejs-version#Specify required Node.js version":""},"title":"Meteor.js"},"/developers/doc/applications/javascript/nodejs/":{"data":{"":"","automatic-https-redirection#Automatic HTTPS redirection":"","configure-your-nodejs-application#Configure your Node.js application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","deployment-video#Deployment video":" ","enable-health-check-during-deployment#Enable health check during deployment":"Overview Clever Cloud allows you to deploy any Node.js application. We do support any stable version of Node.js. Their release schedule is available here. This page explains how to set up your application to run it on our service.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Node.js application Mandatory configuration Be sure that:\nyou listen on HTTP port 0.0.0.0:8080 you have a package.json file your package.json either has a scripts.start or main field the folder /node_modules is mentioned in your .gitignore file you enable production mode by setting the environment variable NODE_ENV=production Set Node.js version You can use the engines.node field in package.json to define the wanted version, if not provided we will use the latest LTS version available on Clever Cloud.\nDefault Version v20.15.0 About package.json The package.json file should look like the following:\n{ \"name\" : \"myapp\", \"version\" : \"0.1.0\", \"main\" : \"myapp.js\", \"scripts\" : { \"start\" : \"node myapp.js\" }, \"engines\" : { \"node\" : \"^20\" } } The following table describes each of the fields formerly mentioned:\nUsage Field Description At least one scripts.start This field provides a command line to run. If defined, npm start will be launched. Otherwise, we will use the main field. See below to know how and when to use the scripts.start field. At least one main This field allows you to specify the file you want to run. It should be the relative path of the file starting at the project’s root. It’s used to launch your application if scripts.start is not defined. Optional engines.node Sets the Node.js version you app runs with. Any A.B.x or ^A.B.C or ~A.B version will lead to run the application with the latest A.B local version. If this field is missing, we use the latest LTS available. If you want to ensure that your app will always run, please put something of the form ^A.B.C and avoid setting only \u003e=A.B.C. Dependencies If you need some modules you can easily add some with the dependencies field in your package.json. Here is an example:\n1 2 3 4 5 6 7 8 9 { \"name\" : { ... }, \"engines\": { ... }, \"dependencies\": { \"express\": \"4.x\", \"socket.io\": \"4.7.x\", \"underscore\": \"1.13.6\" } } If your application has private dependencies, you can add a Private SSH Key.\nDevelopment Dependencies Development dependencies will not be automatically installed during the deployment. You can control their installation setting CC_NODE_DEV_DEPENDENCIES environment variable to install or ignore. This variable overrides the default behavior of NODE_ENV.\nHere are various scenarios:\nCC_NODE_DEV_DEPENDENCIES=install: Development dependencies will be installed. CC_NODE_DEV_DEPENDENCIES=ignore: Development dependencies will not be installed. NODE_ENV=production, CC_NODE_DEV_DEPENDENCIES=install: Development dependencies will be installed. NODE_ENV=production, CC_NODE_DEV_DEPENDENCIES=ignore: Development dependencies will not be installed. NODE_ENV=production: Package manager (NPM / Yarn) default behavior. Development dependencies will not be installed. Neither NODE_ENV nor CC_NODE_DEV_DEPENDENCIES are defined: Package manager (NPM / Yarn) default behavior. Development dependencies will be installed. Supported package managers We support any package manager compatible with Node.js. The environment variable CC_NODE_BUILD_TOOL allows you to define which one you want to use. The default value is set to npm, but it can be any of these values:\nnpm-install: uses npm install npm-ci: uses npm clean-install npm: Defaults to npm-install yarn: uses yarn@1 yarn2: uses yarn@2 or later versions custom: use another package manager (bun, pnpm, etc.) with CC_CUSTOM_BUILD_TOOL If a yarn.lock file exists in your application’s main folder, yarn will be set as package manager. To overwrite this behavior, either delete the yarn.lock file or set the CC_NODE_BUILD_TOOL environment variable.\nYarn 3.x and 4.x support With recent versions of Yarn, you need to put the global folder within your application to manage restarts from build cache. You can do it by setting YARN_GLOBAL_FOLDER to $APP_HOME/.yarncache/ for example, in the Console or through Clever Tools:\nclever env set YARN_GLOBAL_FOLDER '$APP_HOME/.yarncache/' Corepack and packageManager support Since Node.js v14.19.0 and v16.9.0, you can use Corepack as an experimental feature to set a package manager from npm, pnpm or yarn, and its version. It can be achieved through a simple command (e.g.: corepack use yarn@*) or the packageManager field in package.json. If you use pnpm or yarn, you should always set CC_NODE_BUILD_TOOL and CC_CUSTOM_BUILD_TOOL for pnpm.\nCustom build phase The build phase installs the dependencies and executes the scripts.install you might have defined in your package.json. It’s meant to build the whole application including dependencies and / or assets (if there are any).\nAll the build part should be written into the scripts.install field of the package.json file. You can also add a custom bash script and execute it with: \"scripts.install\": \"./build.sh\". For more information, see the npm documentation\nCustom run phase The run phase is executed from scripts.start if defined. It’s only meant to start your application and should not contain any build task.\nCustom run command If you need to run a custom command (or just pass options to the program), you can specify it through the CC_RUN_COMMAND environment variable. For instance, to launch scripts.start with a yarn based application, you must have CC_RUN_COMMAND=\"yarn start\".\nAlternative runtimes There are multiples JavaScript server runtimes out there. On Clever Cloud, you can deploy your applications with the one of your choice. You’ll find guides for Bun or Deno for example.\nUse private repositories with CC_NPM_REGISTRY and NPM_TOKEN Since April 2015, npm allows you to have private repositories. If you want to use such a feature, you only need to provide the auth token. Add it to your application through the NPM_TOKEN environment variable:\nNPM_TOKEN=\"00000000-0000-0000-0000-000000000000\" Then, the .npmrc file will be created automatically for your application, with the registry URL and the token.\n//registry.npmjs.org/:_authToken=00000000-0000-0000-0000-000000000000 To authenticate to another registry (like GitHub), you can use the CC_NPM_REGISTRY environment variable to define its host.\nCC_NPM_REGISTRY=\"npm.pkg.github.com\" NPM_TOKEN=\"00000000-0000-0000-0000-000000000000\" //npm.pkg.github.com/:_authToken=00000000-0000-0000-0000-000000000000 Monitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nTo access environment variables from your code, you can use process.env.MY_VARIABLE.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nExample: Deploy with pnpm To deploy an application with pnpm, set the following environment variables:\nnpm Corepack Install with npm:\nCC_NODE_BUILD_TOOL=\"custom\" CC_PRE_BUILD_HOOK=\"npm install -g pnpm\" CC_CUSTOM_BUILD_TOOL=\"pnpm install \u0026\u0026 pnpm build\" Enable with Corepack:\nCC_NODE_BUILD_TOOL=\"custom\" CC_PRE_BUILD_HOOK=\"corepack enable pnpm\" CC_CUSTOM_BUILD_TOOL=\"pnpm install \u0026\u0026 pnpm build\" This performs the following steps:\nCC_NODE_BUILD_TOOL indicates that your applications is using a custom build tool CC_PRE_BUILD_HOOK installs/enable pnpm globally CC_CUSTOM_BUILD_TOOL installs the dependencies and builds the app Depending on your stack, you may also need to add CC_RUN_COMMAND to your environment variables, with the appropriate command to run your application. For example, to deploy an Astro application in a Node.js runtime, use CC_RUN_COMMAND=\"pnpm start --port 8080 --host 0.0.0.0\".\nℹ️ CC_RUN_COMMAND depends on your framework and your stack. The one in this example starts an Astro app, which takes the port and the host as arguments. To run your app, make sure you are using the correct command by checking the accurate framework documentation. Automatic HTTPS redirection You can use the X-Forwarded-Proto header to enable it.\nIf you are using Express.js, you can use express-sslify by adding:\napp.use(enforce.HTTPS({ trustProtoHeader: true })); Troubleshooting your application If you are often experiencing auto restart of your Node.js instance, maybe you have an application crashing that we automatically restart. To target this behavior, you can gracefully shut down with events handlers on uncaughtExeption unhandledRejection sigint and sigterm and log at this moment, so you can fix the problem.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","environment-injection#Environment injection":"","environment-injection-1#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":"","troubleshooting-your-application#Troubleshooting your application":""},"title":"Node.js"},"/developers/doc/applications/php/":{"data":{"":"","available-extensions-and-modules#Available extensions and modules":"","composer#Composer":"","configure-apache#Configure Apache":"","configure-monolog#Configure Monolog":"","configure-the-session-storage#Configure the session storage":"","configure-your-php-application#Configure your PHP application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","deploy-on-clever-cloud#Deploy on Clever Cloud":"","development-dependencies#Development Dependencies":"","enable-health-check-during-deployment#Enable health check during deployment":"Overview PHP is a widely-used general-purpose scripting language that is especially suited for Web development and can be embedded into HTML.\nThe HTTP server is Apache 2, and the PHP code is executed by PHP-FPM.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your PHP application Choose your PHP version Set the CC_PHP_VERSION environment variable to one of the following versions.\nDefault Version Accepted Versions 8.3 5.6 7 7.2 7.3 7.4 8 8.0 8.1 8.2 8.3 All new PHP applications are created with a default CC_PHP_VERSION. You can of course change it whenever you want then redeploy your application to use the version you want. We only support values based on the first two digits (X or X.Y, not X.Y.Z).\nThe configuration file for your PHP application must be /clevercloud/php.json, that is a php.json file in a /clevercloud folder at the root of your application.\nChange the webroot Since one of the best practices of PHP development is to take the libraries and core files outside the webroot, you may want to set another webroot than the default one (the root of your application).\nUsing an environment variable Add a new environment variable called CC_WEBROOT and set /public as its value.\nclever env set CC_WEBROOT /public Using a configuration file To change the webroot, just set the key webroot in the deploy part of the configuration file clevercloud/php.json with the absolute path (from the root of your application) of your new public folder.\nIn the following example we want to set the webroot to the folder /public:\n{ \"deploy\": { \"webroot\": \"/public\" } } ⚠️ Note the absolute path style: /public. The change of the webroot will be rejected during the deployment if the target directory does not exist or is not a directory. Change PHP settings PHP settings Most PHP settings can be changed using a .user.ini file.\nIf you want the settings to be applied to the whole application, you should put this file in your webroot. If you did not change it (see above), then your webroot is the root of the repository.\nIf you put the .user.ini file in a subdirectory; settings will be applied recursively starting from this subdirectory.\nNote: .user.ini files are not loaded by the PHP CLI by default.\nTo do so, you can use a tiny trick:\nAdd the PHP_INI_SCAN_DIR=:/home/bas environment variable in your application. This way the PHP CLI will try to find a .ini file in /home/bas after loading all other configuration files.\nRun the following script in a deployment hook (e.g. in the pre-run hook):\n#!/bin/bash -l test -f ${APP_HOME}${CC_WEBROOT}/.user.ini \u0026\u0026 \\ cp ${APP_HOME}${CC_WEBROOT}/.user.ini ${HOME}/user.ini Timezone configuration All instances on Clever Cloud run on the UTC timezone. We recommend to handle all your dates in UTC internally, and only handle timezones when reading or displaying dates.\nAdditionally, you can set PHP’s time zone setting with .user.ini. For instance, to use the french time zone, edit .user.ini to add this line:\ndate.timezone=Europe/Paris Header injection Usually, you can use an .htaccess file to create / update / delete headers. You won’t be able to do it from the .htaccess file if the headers come from a .php file, because php-fpm ignores the mod_headers plugin. It works fine for static files directly served by apache.\nSo if you need to inject headers on HTTP responses (for instance for CORS), you have to do it from PHP (you can’t do it from .htaccess).\nheader(\"Access-Control-Allow-Origin: *\"); If you want to keep this separate from your application, you can configure the application to execute some code on every request.\nIn .user.ini, add the following line (you need to create inject_headers.php first):\nauto_prepend_file=./inject_headers.php Please refer to the official documentation for more information.\nYou can review the available directives; all the PHP_INI_USER, PHP_INI_PERDIR, and PHP_INI_ALL directives can be set from within .user.ini.\nclevercloud/php.json settings Other settings than the one mentioned above can be changed by adding the following line in clevercloud/php.json:\n{ \"configuration\": { \"my.setting\": \"value\" } } Here is the list of available settings:\nmbstring.func_overload pm.max_children Note: You can send a request to the support if you need to change a setting which cannot be changed via a .user.ini file and is not in this list.\nMemory Limit When php-fpm spawns a worker it allocates a smaller part of the application’s memory to the worker, here is the allocated memory for each flavor:\nFlavor Memory Limit Pico 64M Nano 64M XS 128M S 256M M 384M L 512M XL 768M 2XL 1024M 3XL 1536M 4XL+ 2048M To change this limit you can define MEMORY_LIMIT environment variable.\nIf you define a limit exceeding the application memory it will use the default one.\npm.max_children: Maximum PHP Children per instance You can fix the maximum number of PHP running processes per instance by setting pm.max_children (see above).\nThis setting is useful if you need to limit the number of running processes according to the maximum connections limit of your MySQL or PostgreSQL database.\nBy default, pm.max_children is set to 10.\nConfigure Apache We use Apache 2 as HTTP Server. In order to configure it, you can create a .htaccess file and set directives inside this file.\nhtaccess The .htaccess file can be created everywhere in you app, depending of the part of the application covered by directives.\nHowever, directives who applies to the entire application must be declared in a .htaccess file to the application root.\nhtpasswd You can configure basic authentication using environment variables. You will need to set CC_HTTP_BASIC_AUTH variable to your own login:password pair. If you need to allow access to multiple users, you can create additional environment CC_HTTP_BASIC_AUTH_n (where n is a number) variables.\nDefine a custom HTTP timeout You can define the timeout of an HTTP request in Apache using the HTTP_TIMEOUT environment variable.\nBy default, the HTTP timeout is set to 3 minutes (180 seconds).\nForce HTTPS traffic Load balancers handle HTTPS traffic ahead of your application. You can use the X-Forwarded-Proto header to know the original protocol (http or https).\nPlace the following snippet in a .htaccess file to ensure that your visitors only access your application through HTTPS.\nRewriteEngine On RewriteCond %{HTTPS} off RewriteCond %{HTTP:X-Forwarded-Proto} !https RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] Prevent Apache to redirect HTTPS calls to HTTP when adding a trailing slash DirectorySlash is enabled by default on the PHP scalers, therefore Apache will add a trailing slash to a resource when it detects that it is a directory.\nE.g. if foobar is a directory, Apache will automatically redirect http://example.com/foobar to http://example.com/foobar/.\nUnfortunately the module is unable to detect if the request comes from a secure connection or not. As a result it will force an HTTPS call to be redirected to HTTP.\nIn order to prevent this behavior, you can add the following statements in a .htaccess file:\nDirectorySlash Off RewriteEngine On RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^(.+[^/])$ %{HTTP:X-Forwarded-Proto}://%{HTTP_HOST}/$1/ [R=301,L,QSA] These statements will keep the former protocol of the request when issuing the redirect. Assuming that the header X-Forwarded-Proto is always filled (which is the case on our platform).\nIf you want to force all redirects to HTTPS, you can replace %{HTTP:X-Forwarded-Proto} with https.\nChange the FastCGI module You can choose between two FastCGI modules, fastcgi and proxy_fcgi.\nTo choose between these two modules you must use the CC_CGI_IMPLEMENTATION environment variable with fastcgi or proxy_fcgi as a value.\nℹ️ We recommend preferring proxy_fcgi over fastcgi. The fastcgi implementation is not maintained anymore, but has been kept as default to prevent unexpected behaviors with historical applications. If you have issues with downloading content, it could be related to the fastcgi module not working correctly in combination with the deflate module, as the Content-Length header is not updated to the new size of the encoded content.\nTo resolve this issue, we advise you to switch the value of CC_CGI_IMPLEMENTATION from default to proxy_fcgi.\nEnvironment injection As mentioned above, Clever Cloud can inject environment variables that are defined in the dashboard and by add-ons linked to your application.\nTo access the variables, use the getenv function. So, for example, if your application has a postgresql add-on linked:\n$host = getenv(\"POSTGRESQL_ADDON_HOST\"); $database = getenv(\"POSTGRESQL_ADDON_DB\"); $username = getenv(\"POSTGRESQL_ADDON_USER\"); $password = getenv(\"POSTGRESQL_ADDON_PASSWORD\"); $pg = new PDO(\"postgresql:host={$host};dbname={$database}, $username, $password); ⚠️ Environment variables are displayed in the default output of phpinfo(). If you want to use phpinfo() without exposing environment variables, you have to call it this way: phpinfo(INFO_GENERAL | INFO_CREDITS | INFO_CONFIGURATION | INFO_MODULES | INFO_LICENSE) Composer We support Composer build out of the box. You just need to provide a composer.json file in the root of your repository and we will run composer.phar install --no-ansi --no-progress --no-interaction --no-dev for you.\nYou can also set the CC_COMPOSER_VERSION to 1 or 2 to select the composer version to use.\nℹ️ If you encounter any issues, add your own composer.phar file in the root of your repository which will override the version we use. You can perform your own composer.phar install by using the Post Build hook.\nExample of a composer.json file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { \"require\": { \"laravel/framework\": \"4.1.*\", \"ruflin/Elastica\": \"dev-master\", \"shift31/laravel-elasticsearch\": \"dev-master\", \"natxet/CssMin\": \"dev-master\" }, \"repositories\": [ { \"type\": \"vcs\", \"url\": \"https://GitHub.com/timothylhuillier/laravel-elasticsearch.git\" } ], \"autoload\": { \"classmap\": [ \"app/controllers\", \"app/models\", \"app/database/migrations\", \"app/database/seeds\" ], \"psr-0\": { \"SomeApp\": \"app\" } }, \"config\": { \"preferred-install\": \"dist\" }, \"minimum-stability\": \"dev\" } Example of a minimalist PHP application using composer and custom scripts: php-composer-demo\nDevelopment Dependencies Development dependencies will not be automatically installed during the deployment. You can control their installation by using the CC_PHP_DEV_DEPENDENCIES environment variable which takes install value.\nAny other value than install will prevent development dependencies from being installed.\nGitHub rate limit Sometimes, you can encounter the following error when downloading dependencies:\nFailed to download symfony/symfony from dist: Could not authenticate against GitHub.com To prevent this download dependencies’s fails that is often caused by rate limit of GitHub API while deploying your apps, we recommend you to add oauth token in your composer configuration file or in separate file named as described in composer FAQ (API rate limit and OAuth tokens).\nYou can find more documentation about composer configuration at getcomposer.com.\nExample You use Artisan to manage your project and you want to execute artisan migrate before running your app.\nTo do this, we use a post build hook, you have to set a new environment variable on your Clever application as following:\nCC_POST_BUILD_HOOK=php artisan migrate --force Note: You must add the execute permission to your file (chmod u+x yourfile) before pushing it.\nFrameworks and CMS The following is the list of tested CMS by our team.\nIt’s quite not exhaustive, so it does not mean that other CMS can’t work on the Clever Cloud platform.\nDrupalDeploy a Drupal-based website on Clever Cloud LaravelDeploy a Laravel app on Clever Cloud SymfonyDeploy a Symfony application on Clever Cloud WordPressDeploy WordPress on Clever Cloud MoodleFull Moodle installation and configuration guide Others PHP frameworks tested on Clever Cloud:\nPrestashop Dokuwiki Joomla SugarCRM Drupal Magento Status.net Symfony Thelia Laravel Sylius Available extensions and modules You can check enabled extensions and versions by viewing our phpinfo() example for:\nPHP 5.6 PHP 7.2 PHP 7.3 PHP 7.4 PHP 8.0 PHP 8.1 PHP 8.2 PHP 8.3 Warning: some extensions need to be enabled explicitly\nClever Cloud PHP application enables the following PHP extensions by default: amqp, bcmath, bz2, ctype, curl, date, dba, dom, exif, fileinfo, filter, ftp, gd, gettext, gmp, gRPC, hash, icon, imap, imagick, intl, json, ldap, libsodium, mbstring, mcrypt, memcached, memcache, mongodb, mysqli, mysqlnd, odbc, opcache, openssl, pnctl, pcre, PDO, pgsql, Phar, posix, protobuf, Pspell, random, readline, redis, reflection, session, simplexml, soap, sockets, solr, SPL, ssh2, sqlite3, tidy, tokenizer, xml, xmlreader, xmlwriter, xsl, zip, zlib\nYou can add DISABLE_\u003cextension_name\u003e: true in your environment variable to disable them.\nIf you have a request about modules, feel free to contact our support at support@clever-cloud.com.\n⚠️ On PHP 7, the memcache extension is not available; only memcached is available. Enable specific extensions Some extensions need to be enabled explicitly. To enable these extensions, you’ll need to set the corresponding environment variable:\nAPCu: set ENABLE_APCU to true.\nAPCu is an in-memory key-value store for PHP. Keys are of type string and values can be any PHP variables.\nCouchbase: set ENABLE_COUCHBASE and ENABLE_PCS to true\nCouchbase is a document database with a SQL-based query language that is engineered to deliver performance at scale.\nElastic APM Agent: set ENABLE_ELASTIC_APM_AGENT to true (default if ELASTIC_APM_SERVER_URL is defined).\nElastic APM agent is Elastic’s APM agent extension for PHP. The PHP agent enables you to trace the execution of operations in your application, sending performance metrics and errors to the Elastic APM server. Warning: This extension is available starting PHP 7.2.\nEvent: set ENABLE_EVENT to true.\nEvent is an extension to schedule I/O, time and signal based events.\nGEOS: set ENABLE_GEOS to true.\nGEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).\nGnuPG: set ENABLE_GNUPG to true.\nGnuPG is an extension that provides methods to interact with GNU Privacy Guard (OpenPGP implementation).\nIonCube: set ENABLE_IONCUBE to true.\nIonCube is a tool to obfuscate PHP code. It’s often used by paying Prestashop and WordPress plugins.\nMailparse: set ENABLE_MAILPARSE to true.\nMailparse is an extension for parsing and working with email messages. It can deal with RFC 822 and RFC 2045 (MIME) compliant messages.\nMongo: set ENABLE_MONGO to true.\nMongoDB is a NoSQL Database. This extension allows to use it from PHP. Warning: this extension is now superseded by the mongodb extension. We provide it for backward compatibility.\nNewRelic: set ENABLE_NEWRELIC to true.\nNewrelic Agent for PHP. Newrelic is a software analytics tool.\nOAuth: set ENABLE_OAUTH to true.\nOAuth consumer extension. OAuth is an authorization protocol built on top of HTTP.\nPCS: set ENABLE_PCS to true.\nPCS provides a fast and easy way to mix C and PHP code in your PHP extension.\nRdkafka: set ENABLE_RDKAFKA to true.\nPHP-rdkafka is a thin librdkafka binding providing a working PHP 5 / PHP 7 Kafka client.\nSqreen: The Sqreen agent is started automatically after adding the environment variables (SQREEN_API_APP_NAME and SQREEN_API_TOKEN).\nUopz: set ENABLE_UOPZ to true. The uopz extension is focused on providing utilities to aid with unit testing PHP code.\nUploadprogress: set ENABLE_UPLOADPROGRESS to true. The uploadprogress extension is used to track the progress of a file download.\nXDebug: set ENABLE_XDEBUG to true.\nXDebug is a debugger and profiler tool for PHP.\nConfigure the session storage By default, a FS Bucket is created for each PHP applications. It is used to store session files, so that session data is available on each instance.\nThis FS Bucket is also used to store TMP files by default. You can change this behaviour by setting the TMPDIR environment variable. You can set it to /tmp for example.\nSpeed up or disable the session FS Bucket You can set the following environment variables:\nCC_PHP_ASYNC_APP_BUCKET=async to mount the session FS Bucket with the async option. It speeds up the FS Bucket usage, but it can corrupt files in case of a network outage. CC_PHP_DISABLE_APP_BUCKET=(true|yes|disable) to entirely prevent the session FS Bucket from being mounted. Use this if you don’t use the default PHP session library. It will speed up your application but users might lose their session across instances and deployments. Use Redis to store PHP Sessions We provide the possibility to store the PHP sessions in a Redis database to improve reliability.\nIf your application is under heavy load, redis persistence for sessions can improve latency.\nTo enable this feature, you need to:\nenable Redis support on the application (create an environment variable named ENABLE_REDIS with the value true.) create and link a Redis add-on create an environment variable named SESSION_TYPE with the value redis. ⚠️ You must have a Redis add-on linked with your application to enable PHP session storage in Redis. If no Redis add-on is linked with your application, the deployment will fail. Sending emails The PHP language has the mail function to directly send emails. While we do not provide a SMTP server (needed to send the emails), you can configure one through environment variables.\nWe provide Mailpace addon to send emails through PHP mail() function. You have to turn TLS on with port 465 (environment variable CC_MTA_SERVER_USE_TLS=true) to make Mailpace working.\nWe also recommend you to use Mailgun or Mailjet if your project supports it. These services already have everything you need to send emails from your code.\nConfigure the SMTP server Services like Mailgun or Mailjet provide SMTP servers. If your application has no other way but to use the mail function of PHP to send emails, you have to configure a SMTP server. This can be done through environment variables:\nCC_MTA_SERVER_HOST: Host of the SMTP server. CC_MTA_SERVER_PORT: Port of the SMTP server. Defaults to 465 whether TLS is enabled or not. CC_MTA_AUTH_USER: User to authenticate to the SMTP server. CC_MTA_AUTH_PASSWORD: Password to authenticate to the SMTP server. CC_MTA_SERVER_USE_TLS: Enable or disable TLS. Defaults to true. CC_MTA_SERVER_STARTTLS: Enable or disable STARTTLS. Defaults to false. CC_MTA_SERVER_AUTH_METHOD: Enable or disable authentication. Defaults to on. Configure Monolog A lot of frameworks (including Symfony) use Monolog to handle logging. The default configuration of Monolog doesn’t allow to log errors into the console.\nHere is a basic configuration of Monolog to send your application’s logs into our logging system and access them into the Console:\nmonolog: handlers: clever_logs: type: error_log level: warning You can change the level to whatever level you desire. For Symfony, the configuration file is app/config/config_prod.yml.\nLaravel doesn’t need Monolog to retrieve logs via Clever console or Clever CLI. Here, ensure that you have the following line in config/app.php:\nreturn [ // ... 'log' =\u003e env('APP_LOG'), // ... ]; Then, set APP_LOG=syslog as Clever application environment variable.\nUsing HTTP authentication Using basic HTTP authentication, PHP usually handles the values of user and password in variables named $_SERVER['PHP_AUTH_USER'] and $_SERVER['PHP_AUTH_PW'].\nAt Clever Cloud, we have enabled an Apache option to pass directly the Authorization header, even though we are using FastCGI; still, the header is not used by PHP, and the aforementioned variables are empty.\nYou can do this to fill them using the Authorization header:\nlist($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']) = explode(':' , base64_decode(substr($_SERVER['Authorization'], 6))); Monitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nMonitor your application with Blackfire You can use Blackfire to monitor your application on Clever Cloud.\nPlease refer to our Blackfire documentation to configure it for your application.\nDeploy on Clever Cloud Application deployment on Clever Cloud is via Git or FTP.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nFTP Deployment Make sure you have Filezilla or an other FTP software installed in your machine.\nWhen you chose to deploy your application via FTP at the application creation, the system creates a free FS Bucket with an ID matching your application’s ID.\nFind the FTP credentials in the configuration tab of this particular FS Bucket.\nJust follow the instructions of your FTP Software to send code to Clever Cloud.\n⚠️ An FTP application automatically starts once you create the application, even if you don’t send any code yet.\nRefer to Quick Start - FTP deployment for more details.\nProxySQL ProxySQL is a tool that acts like a proxy between your application and your MySQL add-on. Instead of connecting to your MySQL add-on, you can connect to the local ProxySQL and it will forward all your requests to your MySQL add-on.\nThis allows you to let ProxySQL take care of some interesting features like connection pooling or leader / follower setup.\nYou can learn more about ProxySQL on the dedicated documentation page\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","frameworks-and-cms#Frameworks and CMS":"","ftp-deployment#FTP Deployment":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","more-configuration#More configuration":"","overview#Overview":"","proxysql#ProxySQL":"","sending-emails#Sending emails":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":"","using-http-authentication#Using HTTP authentication":""},"title":"PHP"},"/developers/doc/applications/python/":{"data":{"":"","celery-apps#Celery apps":"","configure-your-python-application#Configure your Python application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","enable-health-check-during-deployment#Enable health check during deployment":"Overview Python is a programming language that lets you work more quickly and integrate your systems more efficiently.\nSupported Versions The default version of Python on Clever Cloud is the latest we support from branch 3.x. If you want to use Python 2.x, create an environment variable CC_PYTHON_VERSION set to 2, it will default to Python 2.7. Other supported values are :\nDefault Version Accepted Versions 3.12 2 3 3.7 (deprecated) 3.8 3.9 3.10 3.11 3.12 ⚠️ Python 3.7 is end of life since 27 June 2023, we considered it as deprecated. It will be removed from our images starting December, 1st.\nLatest 3.x version will be used after this date. To prevent this, upgrade your CC_PYTHON_VERSION towards your needs. Create an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Python application General configuration Python apps can be launched in a variety of ways. You can specify how to start your application (for instance which module to run) by setting environment variables.\nTo select which module you want to start, use the CC_PYTHON_MODULE environment variable.\nCC_PYTHON_MODULE=\"mymodule:app\" The module (without .py) must be importable, i.e. be in PYTHONPATH. Basically, you should just point to a WSGI capable object.\nFor example with Flask, it’s gonna be the name of your main server file, followed by your Flask object: server:app for instance if you have a server.py file at the root of your project with a Flask app object inside.\nYou can also use CC_RUN_COMMAND to launch Python application your way. In such case, it must listen on port 9000.\nUse uv as a package manager Built in Rust, uv is a modern package and project manager for Python. It’s fast to install dependencies, can be used as a drop-in replacement for pip and to sideload unsupported versions of Python. For example to use it with a app.py file, you just need to set CC_RUN_COMMAND=\"uv run app.py\". If your application listens on port 9000 with 0.0.0.0 as host, it will work fine on Clever Cloud.\nLearn more about uv ℹ️ uv is part of our Enthusiast tools initiative, it’s included and can be used, but there is no active support for it yet. Select the python backend Currently, we support daphne, gunicorn, uvicorn and uwsgi for Python backends. If not specified, the default backend is uwsgi.\nTo select one, set the CC_PYTHON_BACKEND environment variable with either daphne, gunicorn, uvicorn or uwsgi.\nPlease contact the support if you need another backend.\nDependencies If you do not have a requirements.txt file to commit you can obtain it via the command pip freeze \u003e requirements.txt (or pip3 freeze \u003e requirements.txt if you use Python 3.x) at the root of your project folder in your terminal.\nFor example to install PostgreSQL and don’t want to use the pip freeze command above you have to create a file requirements.txt at the root of your application folder:\npsycopg2\u003e=2.7 --no-binary psycopg2 Note: We recommend using psycopg2\u003e=2.7 --no-binary psycopg2 to avoid wsgi issues.\nYou can define a custom requirements.txt file with the environnement variable CC_PIP_REQUIREMENTS_FILE for example: CC_PIP_REQUIREMENTS_FILE=config/production.txt.\nCached dependencies Enabling dependencies caching You can enable dependencies caching by adding the CC_CACHE_DEPENDENCIES=true environment variable in your application. It is enabled by default only for rust and haskell applications.\nDisabling dependencies caching You can disable dependencies caching completely by removing the CC_CACHE_DEPENDENCIES environment variable from the Clever Cloud console, in the Environment variables menu of your application.\nOr by setting it to CC_CACHE_DEPENDENCIES=false\nTo fully remove cached dependencies, you have to rebuild your application from scratch.\nYou can select “rebuild and restart” from the Clever Cloud console or launch clever restart --without-cache with the Clever Tools CLI.\nUse setup.py We support execution of a single setup.py goal. Usually, this would be to execute custom tasks after the installation of dependencies.\nThe goal will be launched after the dependencies from requirements.txt have been installed.\nTo execute a goal, you can define the environment variable PYTHON_SETUP_PY_GOAL=\"\u003cyour goal\u003e\".\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nTo access environment variables from your code, just get them from the environment with:\nimport os os.getenv(\"MY_VARIABLE\") Manage your static files To enable Nginx to serve your static resources, you have to set two environment variables.\nSTATIC_FILES_PATH: should point to a directory where your static files are stored.\nSTATIC_URL_PREFIX: the URL path under which you want to serve static files (e.g. /public).\nAlso, you are able to use a Filesystem Bucket to store your static files. Please refer to the File System Buckets section.\nNote: the path of your folder must be absolute regarding the root of your application.\nNote: setting the STATIC_URL_PREFIX to / will cause the deployment failure.\nStatic files example Here is how to serve static files, the test.png being the static file you want to serve:\n├── \u003capp_root\u003e │ ├── flask-app.py │ ├── static │ │ └── test.png │ └── requirements.txt Using the environment variables STATIC_FILES_PATH=static/ and STATIC_URL_PREFIX=/public the test.png file will be accessed under: https://\u003cdomain.tld\u003e/public/test.png.\nuWSGI, Gunicorn and Nginx configuration uWSGI, gunicorn and nginx settings can be configured by setting environment variables:\nuWSGI HARAKIRI: timeout (in seconds) after which an unresponding process is killed. (Default: 180) WSGI_BUFFER_SIZE: maximal size (in bytes) for the headers of a request. (Default: 4096) WSGI_POST_BUFFERING: buffer size (in bytes) for uploads. (Default: 4096) WSGI_WORKERS: number of workers. (Default: depends on the scaler) WSGI_THREADS: number of threads per worker. (Default: depends on the scaler) uWSGI asynchronous/non-blocking modes To enable uWSGI asynchronous mode, you can use these two environment variables:\nUWSGI_ASYNC: number of cores to use for uWSGI asynchronous/non-blocking modes. UWSGI_ASYNC_ENGINE: select the asynchronous engine for uWSGI (optional). Gunicorn GUNICORN_WORKER_CLASS: type of worker to use. Default to sync. Available workers CC_GUNICORN_TIMEOUT: gunicorn timeout. Defaults to 30 Nginx NGINX_READ_TIMEOUT: a bit like HARAKIRI, the response timeout in seconds. (Default: 300) ENABLE_GZIP_COMPRESSION: “on|yes|true” gzip-compress the output of uwsgi. GZIP_TYPES: the mime types to gzip. Defaults to text/* application/json application/xml application/javascript image/svg+xml. Basic authentication If you need basic authentication, you can enable it using environment variables. You will need to set CC_HTTP_BASIC_AUTH variable to your own login:password pair. If you need to allow access to multiple users, you can create additional environment CC_HTTP_BASIC_AUTH_n (where n is a number) variables.\nNginx optional configuration with clevercloud/http.json Nginx settings can be configured further in clevercloud/http.json. All its fields are optional.\nlanguages: configure a default language and redirections error_pages: configure custom files for error pages force_https: automatically redirect HTTP traffic to HTTPS aliases: set up redirections charset: force a specific charset { \"languages\": { \"default\": {\"rewrite\": \"en\"}, \"fr\": {\"rewrite\": \"en\"} }, \"error_pages\": { \"404\": \"path/to/page\" }, \"force_https\": true, \"aliases\": { \"/path\": \"redirection\" }, \"charset\": \"latin-1\" } Using the Gevent loop engine Whether you use uwsgi or gunicorn, you can enable the Gevent loop engine.\nTo do so, add the CC_PYTHON_USE_GEVENT environment variable to your application, with the true value.\nMonitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nCelery apps Note: Please note that Celery support is not available yet for gunicorn.\nWe also support celery apps out of the box. To deploy a celery app, use the CC_PYTHON_CELERY_MODULE environment variable:\nCC_PYTHON_CELERY_MODULE=\"mymodule\" ⚠️ Celery needs to be defined as a dependency in your requirements.txt. Otherwise the deployment will be aborted if Celery support is enabled. You can also activate beat with CC_PYTHON_CELERY_USE_BEAT=true and provide a given log dir for celery with CC_PYTHON_CELERY_LOGFILE=\"/path/to/logdir\".\nThe CC_PYTHON_CELERY_LOGFILE path is relative to the application’s path.\n⚠️ There is a bug in versions \u003c4.2 of Celery. You need to add the CELERY_TIMEZONE = 'UTC' environment variable. The bug is documented here: https://GitHub.com/celery/celery/issues/4184. Git Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Python"},"/developers/doc/applications/ruby/":{"data":{"":"","configure-your-ruby-on-rails-application#Configure your Ruby on Rails application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","enable-health-check-during-deployment#Enable health check during deployment":"Overview Ruby on Rails is an open source web application framework which runs on the Ruby programming language. It is a full-stack framework: it allows creating pages and applications that gather information from the web server, talk to or query the database, and render templates out of the box. As a result, Rails features a routing system that is independent of the web server.\nClever Cloud allows you to deploy any Ruby on Rails application. This page will explain you how to set up your application to run it on our service. You do not need to change a lot in your application, the requirements will help you configure your applications with some mandatory files to add, and properties to setup.\nYou can find here an example of Ruby on Rails application on Clever Cloud.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Ruby on Rails application Mandatory configuration Be sure that:\nyou push to the master branch you commit your gems.locked or Gemfile.lock file you have a config.ru file (this one is most of the time generated by rails) you have gem puma in your Gemfile (puma is the default application server from rails, when creating a new ruby application, an environment variable is automatically added: CC_RACKUP_SERVER=puma) You need to provide a gems.locked or Gemfile.lock file. To do that ensure you have at least once run bundle install in your terminal at the root of your rails project.\nChoose ruby version If you specify a ruby version in your gems.rb of Gemfile, we’ll use it, otherwise; keep reading.\nOn your Clever Cloud application create an environment variable CC_RUBY_VERSION=rubyversion where rubyversion represents:\n“3” will select the greatest “3.X.Y” version available. “3.3” will select the greatest “3.3.Y” version available. “3.3.1” will select the “3.3.1” version. Due to current landscape in ruby applications, the default version is the greatest 3.3.Y. We also provide versions 2.3.Y, 2.4.Y, 2.5.Y, 2.6.Y and 2.7.Y.\nIf given rubyversion does not match any available version, your deployment will fail.\nChoose your environment You can set the RUBY_ENV environment variable to the value you want. By default it is set to production. Most used values are production and development but you can use any custom one as long as you have set up of the required variables for this environment in your ./config/ folder files.\nSecure configuration of secret key There are many way to add secret key to your environment and each one is valid. Clever Cloud provides you a secure way so you don’t have to commit any file containing it.\ngenerate the secret key locally with rake secret add it to your environment in ./config/secret.yml with: production: secret_key_base: \u003c%= ENV[\"SECRET_KEY_BASE\"] %\u003e Configure Rake goals You can specify a list of rake goals to execute before the deployment of your application by using the CC_RAKEGOALS environment variable.\nThe value of this variable must be a comma-separated list of goals, for instance:\nCC_RAKEGOALS=\"db:migrate, assets:precompile\" We do not execute any rake goals by default.\nConfigure Sidekiq To run a Sidekiq process in background you will need to enable it with the CC_ENABLE_SIDEKIQ=true environment variable.\nPlease note you will need a Redis instance to use this feature.\nYou can specify multiple Sidekiq configuration files with the CC_SIDEKIQ_FILES environment variable.\nThe value of this variable must be a comma-separated list of files:\nCC_SIDEKIQ_FILES=\"./config/sidekiq_1.yml,./config/sidekiq_2.yml,./config/sidekiq_3.yml\" Note: CC_SIDEKIQ_FILES have precedence over CC_ENABLE_SIDEKIQ which means that even if CC_SIDEKIQ_FILES is defined and CC_ENABLE_SIDEKIQ is set to false, Sidekiq will still be enabled.\nEach path is the path from the root of the repository to a sidekiq configuration file.\nEach file might contain something like this standard sidekiq.yml file:\n--- :concurrency: 4 :pidfile: tmp/pids/sidekiq_1.pid :queues: - [critical, 2] - default production: :logfile: ./log/sidekiq.log --- Manage your static files and assets Static files are configured with environment variables:\nSTATIC_FILES_PATH: should point to a directory where your static files are stored.\nSTATIC_URL_PREFIX: the URL path under which you want to serve static files (for example /public/)\nNote: the path of your folder must be absolute regarding the root of your application.\nNote: setting the STATIC_URL_PREFIX to / will make the deployment to fail.\nIf you use the asset pipeline, make sure to include the assets:precompile task in the CC_RAKEGOALS environment variable value.\nCC_RAKEGOALS=\"db:migrate, assets:precompile\" Note: if your project uses webpacker, make sure to enable the dedicated build instance option in the Information menu of your application in the Clever Cloud console because webpacker needs a lot a resources when starting.\nUsing Active Storage and Cellar S3 Only for Rails \u003e= 5.2.\nEnable Active Storage for your application: $ rails active_storage:install then $ rake db:migrate\nAdd gem \"aws-sdk-s3\", require: false to your Gemfile, run $ bundle install\nAdd config.active_storage.service = :clevercloud in config/environments/production.yml\nAdd in config/storage.yml:\nclevercloud: service: S3 access_key_id: \u003c%= ENV['CELLAR_ADDON_KEY_ID'] %\u003e secret_access_key: \u003c%= ENV['CELLAR_ADDON_KEY_SECRET'] %\u003e region: us-east-1 bucket: \u003c%= ENV['CELLAR_ADDON_BUCKET_NAME'] %\u003e endpoint: \u003c%= ENV['CELLAR_ADDON_ENDPOINT'] %\u003e force_path_style: true In the clever cloud console create a Cellar S3 storage add-on, name it, link it to your rails application and create a bucket.\nIn the environment variables section of your Ruby on Rails application on Clever Cloud add the following environment variables:\nCELLAR_ADDON_BUCKET_NAME=\"\u003cyour bucket name\u003e\" CELLAR_ADDON_ENDPOINT=\"https://cellar-c2.services.clever-cloud.com\" You can now commit and push your changes.\nAlso, you are able to use a Filesystem Bucket to store your static files. Please refer to the File System Buckets section.\nNGINX configuration NGINX settings can be configured with environment variables:\nNGINX_READ_TIMEOUT: the response timeout in seconds. (Default: 300) Basic authentication If you need basic authentication, you can enable it using environment variables. You will need to set CC_HTTP_BASIC_AUTH variable to your own login:password pair. If you need to allow access to multiple users, you can create additional environment CC_HTTP_BASIC_AUTH_n (where n is a number) variables.\nNGINX optional configuration with clevercloud/http.json NGINX settings can be configured further in clevercloud/http.json. All its fields are optional.\nlanguages: configure a default language and redirections error_pages: configure custom files for error pages force_https: automatically redirect HTTP traffic to HTTPS aliases: set up redirections charset: force a specific charset { \"languages\": { \"default\": {\"rewrite\": \"en\"}, \"fr\": {\"rewrite\": \"en\"} }, \"error_pages\": { \"404\": \"path/to/page\" }, \"force_https\": true, \"aliases\": { \"/path\": \"redirection\" }, \"charset\": \"latin-1\" } Puma configuration Puma reads its configuration from the config/puma.rb file. See the puma documentation for more information.\nYou can override this configuration with environment variables. Each of them, when specified, will be preferred over the setting from config/puma.rb.\nCC_PUMA_WORKERS overrides the number of workers (for example, CC_PUMA_WORKERS=2) CC_PUMA_THREADS overrides the number of threads per worker, can be a raw number or a range (for example, CC_PUMA_THREADS=6 or CC_PUMA_THREADS=4:8) If they are not defined in the environment nor in config/puma.rb we will setup the values depending on the size of the scaler your application is running on. We also fill the WEB_CONCURRENCY and RAILS_MAX_THREADS environment variable if they are not present as they may be used by rails’ puma configuration.\nOverriding rackup application server You can override the puma default server by setting an environment variable CC_RACKUP_SERVER=yourserver. We do not recommend you do it.\nMonitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nTo access environment variables from your code, just get them from the environment with ENV[\"MY_VARIABLE\"].\nMake sure to log on stdout Since January 2024, your logs may no longer show in your Clever Cloud console. In production.rb, you should find something like:\nif ENV['RAILS_LOG_TO_STDOUT'].present? logger = ActiveSupport::Logger.new($stdout) logger.formatter = config.log_formatter config.logger = ActiveSupport::TaggedLogging.new(logger) end It means you need to add RAILS_LOG_TO_STDOUT=true in your environment variables.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","make-sure-to-log-on-stdout#Make sure to log on stdout":"","more-configuration#More configuration":"","overriding-rackup-application-server#Overriding rackup application server":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Ruby on Rails"},"/developers/doc/applications/rust/":{"data":{"":"","configure-your-rust-application#Configure your Rust application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","enable-health-check-during-deployment#Enable health check during deployment":"Overview Rust is a system programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety. You can build Rust web services with frameworks like Actix or Iron.\nClever Cloud allows you to deploy Rust web applications. This page will explain you how to set up your application to run it on our service.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Rust application Mandatory configuration Make sure that:\nyou have pushed in master branch you listen on port 8080 you have committed Cargo.lock you have at least one binary target in Cargo.toml The result of cargo build --release --locked must be an executable which starts a web server listening on 0.0.0.0:8080.\nFor instance, a minimal iron application can look like this:\nextern crate iron; use iron::prelude::*; use iron::status; fn main() { fn hello_world(_: \u0026mut Request) -\u003e IronResult\u003cResponse\u003e { Ok(Response::with((status::Ok, \"Hello World!\"))) } let _server = Iron::new(hello_world).http(\"0.0.0.0:8080\").unwrap(); println!(\"On 8080\"); } Multiple binary targets If your Cargo.toml defines multiple targets, you must specify the one you want to run, with the CC_RUST_BIN environment variable. If CC_RUST_BIN is specified, then the executable produced by this target is used to start the application.\nCustom run command If you need to run a custom command (or just pass options to the program), you can specify it through the CC_RUN_COMMAND environment variable.\nFor instance, you can have CC_RUN_COMMAND=./target/release/myapp \u003coptions\u003e.\nDependencies Make sure to list all your dependencies in Cargo.toml. For the example above, you need:\n[package] name = \"my-app\" version = \"0.1.0\" authors = [] [dependencies] iron = \"0.4.0\" Cached dependencies Enabling dependencies caching You can enable dependencies caching by adding the CC_CACHE_DEPENDENCIES=true environment variable in your application.\nDisabling dependencies caching You can disable dependencies caching completely by removing the CC_CACHE_DEPENDENCIES environment variable from the Clever Cloud console, in the Environment variables menu of your application. Or by setting it to CC_CACHE_DEPENDENCIES=false.\nTo fully remove cached dependencies, you have to rebuild your application from scratch. You can select “rebuild and restart” from the Clever Cloud console or launch clever restart --without-cache with the Clever Tools CLI.\nPrivate dependencies If you use dependencies on a private git repository inside your project, it needs a bit of configuration until this cargo issue has been resolved.\nFirst, you need to use the HTTPS url as the git url for your dependency in your Cargo.toml:\nprivate-dep = { git = \"https://github.com/user/my-private-dep.git\" }\nThen, you need to create a personal access token. It allows to not use your password:\nGithub: https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/ Gitlab: https://docs.gitlab.com/ce/user/profile/personal_access_tokens.html (API rights are needed) Once you have the token, we need to tell Git to use a credential store. For that, we are going to create it.\nCreate a clevercloud/pre-build.sh file at the root of your application and paste:\n#! /usr/bin/env bash git config --global credential.helper store echo \"https://${GIT_USERNAME}:${GIT_PASSWORD}@gitlab.com\" \u003e ~/.git-credentials chmod 600 ~/.git-credentials If you have multiple private repositories, add them accordingly.\nNow, go into the environment variables page of your application and create those environment variables:\nGIT_USERNAME: your Github / gitlab / other username GIT_PASSWORD: your Github / gitlab / other password CC_PRE_BUILD_HOOK: clevercloud/pre-build.sh CC_POST_BUILD_HOOK: rm /home/bas/.git-credentials This adds the git configuration before the build start and it cleans it after the build has been done.\nRust channels By default, your application is built with the latest stable rust version. If you require beta, nightly or a specific Rust version, you can set CC_RUSTUP_CHANNEL environment variable value to beta, nightly or a specific version (eg. 1.36.0).\nThe build uses rustup to select the Rust version you need.\nCargo features You can enable specific features for your crate by settings the CC_RUST_FEATURES environment variable to the list of features to enable.\nTo access environment variables from your code, just get them from the environment with std::env::var(\u003cKEY_NAME\u003e).\nIf some environment variables are critical to your application, here is an approach you can use:\nuse std::env; fn main() { let my_config_value = env::var(\"MY_VAR\").expect(\"Missing env var `MY_VAR`\"); something_that_runs_a_web_server(my_config_value); } This loads the environment variable in your main function and use .expect to fail early. This way, the application will refuse to start with an helpful error message if MY_VAR is not defined.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nDeployment Video Linking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Rust"},"/developers/doc/applications/scala/":{"data":{"":"","configure-your-scala-application#Configure your Scala application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","enable-health-check-during-deployment#Enable health check during deployment":"Overview Clever Cloud allows you to deploy Scala (and Java) applications built with SBT. This document will explain you how to set up your app to run it on our service.\nIf you’re looking to deploy a Play Framework application, you can have a look at our dedicated deployment guide for play framework applications\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Scala application Mandatory configuration Your application has to listen on port 8080 for worldwide connections (0.0.0.0). We set the system variable http.port to 8080 for you so in many cases (like for play applications) you don’t have anything to do. You need to use the sbt-native-packager in your project.\nThe sbt-native-packager We rely on sbt-native-packager to run applications. This plugin provides a stage task which is run during deployment.\nIf your project doesn’t already use sbt-native-packager, you need to add it to project/plugins.sbt. Please make sure you use an up-to-date version.\nIn project/plugins.sbt:\naddSbtPlugin(\"com.typesafe.sbt\" % \"sbt-native-packager\" % \"1.7.0\") Then you need to configure the package type:\nIn build.sbt:\nenablePlugins(JavaAppPackaging) # Disable javadoc packaging mappings in (Compile, packageDoc) := Seq() For more information, please have a look at the documentation for sbt-native-packager\nCustom sbt goal By default, the deployment system execute sbt stage and runs the first binary found into /target/universal/stage/bin. If you want to run another goal, you can specify it with the SBT_DEPLOY_GOAL environment variable.\nMulti-module build If you have a single repository with multiple modules or want to build a specific module in a monorepo (and no top-level stage task), then you can specify the sbt task with SBT_DEPLOY_GOAL.\nCC_SBT_TARGET_DIR must be set to the relative path of the module and CC_SBT_TARGET_BIN to the name of the binary to run.\nFor instance, if you want to deploy a module named service1 that produce a binary named “my-binary”, you have to define the following variables:\nSBT_DEPLOY_GOAL=service1/stage CC_SBT_TARGET_DIR=service1 CC_SBT_TARGET_BIN=my-binary Check details on environment variables.\nOur engine will execute the sbt service1/stage and will run service1/target/universal/stage/bin/my-binary\nNote: even when CC_RUN_COMMAND is configured CC_SBT_TARGET_DIR and CC_SBT_TARGET_BIN should be set to the correct values.\nHOCON users If you’re using HOCON configuration files, then you can have direct acces to environment variables from the configuration file:\napplication.secret=${APPLICATION_SECRET} Monitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nTo access environment variables from your code, just get them from the environment with System.getenv(\"MY_VARIABLE\"). Be aware that it can return null.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Scala"},"/developers/doc/applications/static/":{"data":{"":"","apache-configuration-with-cc_webroot#Apache Configuration with \u003ccode\u003eCC_WEBROOT\u003c/code\u003e":"Overview If you only need to serve static files without executing any code on the backend, for instance for a javascript Single Page Application (SPA), you can create a static application.\nThis runtime is based on apache, so shares a lot with the PHP runtime. This means you can use .htaccess files for redirection or access control.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nApplication deployment on Clever Cloud is via Git or FTP.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nFTP Deployment Make sure you have Filezilla or an other FTP software installed in your machine.\nWhen you chose to deploy your application via FTP at the application creation, the system creates a free FS Bucket with an ID matching your application’s ID.\nFind the FTP credentials in the configuration tab of this particular FS Bucket.\nJust follow the instructions of your FTP Software to send code to Clever Cloud.\n⚠️ An FTP application automatically starts once you create the application, even if you don’t send any code yet.\nRefer to Quick Start - FTP deployment for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nServing index.html for SPA (Single Page Application) routers When you work with an SPA framework like React, Vue.js, Angular…, you’re using client side routing. This means when you click on a link going to /the-page, your browser doesn’t make an HTTP request for /the-page. Instead, the client side router highjacks the clicks on links, changes the DOM to display the page and ask the browser to change the URL in the address bar to /the-page.\nWhat happens if you try to refresh the page? If you do this, the browser will try to make an HTTP request for /the-page. In most situations, SPA only have one HTML document at the root called index.html. This is why, you’ll probably get a 404 error.\nTo fix this, most people using SPA frameworks configure their HTTP server to serve the index.html for all unkown requests. By this we mean for all requests that don’t have a matching file on disk to serve.\nTo do this with our static applications, you need a .htaccess file like this at the root of your project:\nRewriteEngine On # If an existing asset or directory is requested, serve it RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR] RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d RewriteRule ^ - [L] # If the requested resource doesn't exist, use index.html RewriteRule ^ /index.html Apache Configuration with CC_WEBROOT If you set the CC_WEBROOT = /\u003cweb-folder\u003e environment variable, make sure you put your .htaccess file at the root of your /\u003cweb-folder\u003e. This is where Apache will look for directives when you deploy an application in a Static runtime.\nIf you don’t set the CC_WEBROOT environment variable, the root of your project is the root of your web server.","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","environment-injection#Environment injection":"","ftp-deployment#FTP Deployment":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"","overview#Overview":"","serving-indexhtml-for-spa-single-page-application-routers#Serving index.html for SPA (Single Page Application) routers":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Static"},"/developers/doc/best-practices/":{"data":{"":" Blue/green deployment Cloud storage Load testing The Twelve-Factor app "},"title":"Best practices"},"/developers/doc/best-practices/12-factors/":{"data":{"":"The twelve-factor app is a methodology for writing software delivered as a service, which is what you are doing by pushing your code to Clever Cloud and for container deployment in general. By writing code following these principles, your application will be cloud ready by design.\nAs a lot has already been written on the subject, we strongly recommend that you read some of the following links to begin with this methodology:\nhttps://en.wikipedia.org/wiki/Twelve-Factor_App_methodology https://www.clearlytech.com/2014/01/04/12-factor-apps-plain-english/ https://12factor.net/ Happy learning !"},"title":"The Twelve-Factor App"},"/developers/doc/best-practices/blue-green/":{"data":{"":"Blue/Green deployment is a technique used in automated deployment of applications, databases and services. Its main goal is to minimize the downtime and risks of an application by running two identical environment instances, one called Blue and the other one called Green.","contextual-example#Contextual example":"Let’s say you have a production environment called Blue, running for instance an e-commerce application. Your customers are routed to this Blue instance. In parallel, you will have a “sleeping clone” of Blue, named Green. Now let’s say you have achieved a new feature and want your customers to benefit of it. Using the “Blue/Green” technique, the new code will be used in Green. Once Green is ready, you will redirect your customers to Green, and we will put Blue in “sleeping mode”. When you will add new modification you will do it on Blue this time, then on Green again, and so on.\nThere are many benefits to this approach:\nif Green fails to deploy there will be no downtime for your customers or users as you will not use the broken Green and stay on “Blue” until you fix your code so it can start if you are not happy with the changes you added in Green, you can “awake” Blue and get back to the previous version easily by routing the traffic to it ","in-the-clever-cloud-context#In the Clever Cloud context":"When you push your source code to the Clever Cloud git remote, Clever Cloud will automatically use the “Blue/Green” pattern to apply your changes to your production.\nA new VM, let’s call it Blue is created. The deployment is successful when there’s no error in the build phase and the deployment healthcheck is successful. And that’s it, you will use the new version on production within seconds.\nIf you push new changes, a Green VM will be created.\nDeployment succeeds If the deployment succeeds, Green will be the version in production and Blue will be turned off minutes later. This way, if you are not happy with the changes you made, just go the Clever Cloud web console, select your application and in the Overview menu, click the “Start last pushed commit” button, this will “awake” Blue and reverse your changes in production within a few minutes.\nDeployment fails If there is an error during the build phase or if the Green servers answers an error code on :8080/, we will alert you by email and Blue will remain the production server.\nNext time you push code a new Green VM will be created, then a Blue one, and so on.\nYou also may see some deployments that you haven’t triggered in your logs. It is because Clever Cloud uses “Blue/Green” pattern to update VMs, either security patches or versions updates."},"title":"Blue/Green Deployments"},"/developers/doc/best-practices/cloud-storage/":{"data":{"":"You want to store files but you can’t decide between FS Buckets and Cellar. This article will compare them: usage, pros/cons, pricing.\nClever Cloud uses immutable disposable VMs. Every time you redeploy your application, you lose the old instances and all the files stored on their filesystems. If you want to avoid that, you have to store your important files outside of your instances.\nCellar and FS Buckets both allow you to store files outside of your instances for later use. But there are some differences between them.\nℹ️ If you are coding a new project and need to store files, use Cellar. It will be cheaper and give you way more flexibility. If your want to run a WordPress site or some OSS PHP application and are in a hurry, you may not get to choose: use FS Buckets. ","what-is-cellar#What is Cellar?":"Cellar is an Amazon S3 API implementation using Ceph Rados Gateway. It provides an HTTP API that can be used with any S3 API Client. Clients exist for a lot of languages. You can use any S3 Client, from the official Amazon ones to the community ones.\nIf you already use S3, you will be in your element.\nTo store a file, issue a PUT HTTP request to Cellar’s API. To get a file, issue a GET request to the API. You need secret and public keys to authenticate your requests. You can manage ACLs and generate signed URLs with an expiration date.\nUpsides of Cellar You can move the file uploads to your client entirely. Just give it a temporary signed URL (generated by your backend) and it will be able to upload directly to Cellar. That way, you don’t have to handle the receive-and-upload part on the server side.\nYour files are stored in a secure way outside of your apps FS. So an attacker will have a harder time to find it.\nYou can delegate the authorization part to Cellar by giving signed urls for file downloads and uploads.\nThe files are stored with a replication factor of 3, meaning that there are 2 replicas in addition of the original data.\nDownsides of Cellar When deploying an application you did not write, file uploads may already be developed using local files. Like in WordPress, PrestaShop, etc. So you would have to use plugins or hack it to upload to Cellar.","what-is-fs-bucket#What is FS Bucket?":"Configuring FS Buckets in your application will give you a folder in your filesystem. This folder is shared between instances/applications. It’s mounted over the network. As for any network filesystem there are upsides and downsides.\nUpsides of FS Bucket If your application manages files on a filesystem, you don’t have to change anything. Just setup your FS Bucket to mount on a given folder, setup your application to write in that folder and you are good to go!\nSince the folder is mounted over the network, multiple instances/applications can read it like any file on the system. At the same time.\nDownsides of FS Bucket Since it’s a file on a filesystem, you can be tempted to store a SQLite (or equivalent) database in it. This would be wrong. If many instances try to write in it at the same time, you might end up with a corrupted database.\nFor the same reason, anything accessing a file in write at the same time might corrupt the data you put in it.","what-should-i-choose#What should I choose?":"Well, you read the upsides and downsides of both. You may understand where our preference goes, by now! If you can, use Cellar. S3 Client library exist in almost all languages. It’s cheaper. It’s more resilient to hardware failures. It gives you free processing power: when using files on your filesystem, you have to process them yourself. When using Cellar, you can delegate the handling of the upload to Cellar itself.\nIf you don’t have a choice, use whatever you have to use."},"title":"Cloud Storage"},"/developers/doc/best-practices/load-testing/":{"data":{"":"","considerations-to-take-into-account#Considerations to take into account":"In the event that you use public front-ends, it is necessary to notify the support. Indeed, depending on the nature of the load, it is possible that a form of network blocking is performed by our teams if they are not notified.\nIn case you have dedicated frontends, note that too much load could impact your other applications behind this frontend. Because in general, the amount of private front-ends is lower than the number of public front-ends (new public front-ends are added on a regular basis).","online-and-local-load-tools#Online and local load tools":"Choosing a load-testing solution will depend on several factors. If simplicity and speed are the most important factors, online tools are the most appropriate. On the other hand, if you have to test particular protocols, and have fine configuration options via a little programming / scripting and for a lower cost, you may want to use dedicated, local solutions.\nOnline Online services are available to perform your tests. Most offer typical user journey scenarios to allow you to simulate a user:\nK6 Octoperf Loader.io Local, with open-source alternatives Some open source services to be installed on an infrastructure (workstation or IaaS in the best case) are also available:\nGatling Drill Locust Jmeter ","overview#Overview":"Overview Performing a performance test is the best way to determine how your application will perform under heavy load.\nIn general, these tests make it possible to identify:\nthe maximum number of concurrent users whether the current resources are sufficient to operate your application in good conditions and the maximum operational capacity of your application ","why-carry-out-these-tests#Why carry out these tests":"Performing these tests will allow you:\nto have perspective on the performance and stability of your infrastructure. to be able to identify bottlenecks in particular stress scenarios to identify and remove any weaknesses in architectures via supervision and performance management strategies and increase scalability The determining elements are:\nThe response time of your transactions (poorly optimized requests, etc.) The performance of the application (single-threaded application, expectations of external services, generation of logs in a file, etc.) The performance of managed services such as databases (lack of indexes, unnecessary iterations, etc.) Software design in general Hardware limitations such as CPU, RAM, network, etc. bad middleware configurations (databases, server, etc.) The response time between the client and the application "},"title":"Load testing"},"/developers/doc/billing/":{"data":{"":" Analytics consumption Payments \u0026 invoicing Pricing Unified invoicing "},"title":"Billing"},"/developers/doc/billing/analytics-consumption/":{"data":{"":"","billing-calculation#Billing calculation":"","upscale--downscale-impacts#Upscale \u0026amp; Downscale Impacts":"Clever Cloud’s billing is based on several types of products: applications (Java, PHP, Jenkins, etc.), managed services (MySQL, PostgreSQL, etc.), storage services (via FTP with FS Buckets, or via the S3 protocol with Cellar) and other services (Heptapod, Pulsar, etc).\nBilling calculation The calculation of consumption is based on the second of running. Once your monthly bill has been generated, you can refer to it to find out by service:\nthe size of the instances used the execution time the unit price per second the total monthly amount To find your consumption history, it is visible in the Metrics in Grafana service via a specific Grafana dashboard. This is called the Uptime Service.\nThe Uptime Service dashboard in Grafana Upscale \u0026 Downscale Impacts If the auto-scalability option is activated, it is possible that the size of the instances of your applications will vary during the month. This variation will not be systematically identical from one month to the next, which explains the variation in the amount of your bills.\nMost of our cutomers apps running with auto-scaling enabled have less than a ±5% variation between consecutive months in their invoice. Especially because upscale events don’t last for long before a downscale occurs, usually after 2-3 hours. High traffic is most of the time temporary (a newsletter sendings, a TV show appearance, Techcrunch effect etc.).\nIn the end, auto-scaling is pretty useful to avoid applications slowdown without a significant impact on your billing."},"title":"Analytics and consumption"},"/developers/doc/billing/payments-invoicing/":{"data":{"":"","change-billing-information#Change Billing Information":" for personal account: available in Profile \u003e Informations\nfor organization: available in Information \u003e Billing details\nOrganization information ","invoices#Invoices":"Invoices are available in the Invoices tab in the sidebar of the organization section. Once paid, invoices are moved to the “Paid invoice” table.\nReceive invoices You can change the billing email for an organization in Information \u003e Billing details \u003e Billing email.\nAlso an organization member with the accountant role can receive invoices as described in the organization roles.","make-a-payment#Make a payment":"In the sidebar of the organization section, there are three alternatives to buy credit for your applications:\nCredit card (powered by Stripe) Paypal Bank transfer: we accept international bank transfers. This option will generate a reference that you will have to add to your bank transfert, as a note. SEPA Direct Debit: we support payment via SEPA debit. More information in the SEPA Direct Debit section ","sepa-direct-debit#SEPA Direct Debit":"When adding your IBAN in the admin console, you accept the following SEPA Direct Debit Mandate:\nBy providing your IBAN or confirming this payment, you are authorizing Clever Cloud and Stripe, our payment service provider, to send instructions to your bank to debit your account and your bank to debit your account in accordance with those instructions. You also agree to be debited in the future 2 days after receiving a debit notification.\nYou are entitled to a refund from your bank under the terms and conditions of your agreement with your bank. A refund must be claimed within 8 weeks starting from the date on which your account was debited.\nDebit instructions are issued in the following cases:\nwhen you confirm an invoice payment; starting 5 days after issuing the invoice, would you set your IBAN as default payment method; would the first debit fail, new attempts will be made every day up to 15 days after invoice issuance and every 5 days after that. Your rights are explained in a statement that you can obtain from your bank. About invoices issuance and notifications As explained in the Monthly Invoice documentation, Clever Cloud issues an invoice at the beginning of every month. The invoice is emailed to you. In accordance with SEPA rules and the mandate your agreed to, this email also notifies you that a debit will be attempted 5 days after invoice issuance."},"title":"Payments \u0026 invoicing"},"/developers/doc/billing/pricing/":{"data":{"":"Our up-to-date prices (as well as a pricing calculator) is available on the pricing page."},"title":"Pricing"},"/developers/doc/billing/unified-invoices/":{"data":{"":"Each month, for each organization, a single invoice is generated, including the whole activity (credits, add-on etc).","managed-services#Managed Services":"While applications are billed on a per second basis, this may be different for managed services. From a billing point of view there are X categories\ntime-based billing (per second) resource consumption billing For example, dedicated databases are charged by the second, just like applications. In contrast, services such as Cellar object storage or Pulsar are charged according to the volume of data stored and the volume of outgoing traffic.","management-of-payment-methods#Management of payment methods":"For each organisation it is possible to register one or more payment methods (see list of payment methods here). Invoices will be automatically paid with the default payment method a few days after their generation. For the one-off invoices mentioned above, the invoice must be paid manually, via the invoice page via the “Pay” button.","monthly-invoice#Monthly invoice":"At the beginning of each month, a new invoice is generated for each organisation. It details the consumption of services, and the provisioning of your account for the coming month.\nThe invoice is made up of three distinct sections:\nA summary of the total amount to be paid for the current month An exploded view of the invoice calculation, including credits used, coupons, provision for the coming month etc. and full details of the operating time of each service, of each service invoiced, of storage used etc. To find your invoices, go to your organisation and click on Invoices to see a list of them and their payment status:\nThe list of invoices First section This first section shows the fee for the use of Clever Cloud over a month. Any discounts are explained here.\nThe second section of the invoice Second section This part details line by line the evolution of your credit with:\nThe balance of free credits (a) Pre-paid credits (b) The use of free credits (c) Expired credits (d) Use of your prepaid credits (e) Estimated consumption for the next period (f) Invoiced credits pending payment (g) Amount of prepaid credits to be topped up (h) The amount of prepaid credits to be topped up and the new balance of credits after settlement are explained via calculations of the different types of credits and their use over time.\nThe second section of the invoice Third section This section of the invoice details the usage of each cloud service.\nThe third section of the invoice ","payments-and-reminders#Payments and reminders":"As long as an invoice remains pending, we will perform these actions on specific days:\nTry to issue an automatic payment using your favorite payment method everyday from the 5th to the 15th day after issuing the invoice, then every 5 days after that. Send a reminder via email every 5 days if the payment remains unsuccessful. Shutdown of your services everyday starting day 31 after invoice issue. This schedule can be adapted according to your company’s payment delays. Please reach out to us via the support to ensure the best experience.\nSupport and access to your account will remain available to regularise non-payment situations.","specific-invoices#Specific invoices":"For specific services performed by the support teams, specific invoices can be created by the administration or support teams. These invoices usually indicate a specific service act."},"title":"Unified Invoicing"},"/developers/doc/ci-cd/":{"data":{"":" There are several ways to automate your workflow when deploying your application to Clever Cloud from either GitHub or GitLab. This section explains how to set up you CI/CD from both platforms. Deploy from GitHubDeploy directly from GitHub and automate review apps. Deploy from GitLabDeploy directly from GitLab and automate review apps. Write your own CI/CDWrite your own scripts to deploy to Clever Cloud and automate tasks. "},"title":"CI/CD"},"/developers/doc/ci-cd/custom-scripts/":{"data":{"":" There are several ways to automate your workflow when deploying your application to Clever Cloud from either GitHub or GitLab. This page explains how to write your custom CI/CD from both platforms. ","-go-further#🎓 Go further":" GitHub variablesList of GitHub default CI/CD variables GitLab variablesList of GitLab predefined variables Clever Tools CLIDeploy and manage your applications and dependencies from your terminal. ","use-clever-tools#Use Clever Tools":"You can write your own pipeline to deploy from either GitHub or GitLab. Use Clever Cloud CLI with either Docker or Node image. Place the following snippets at the top of your .gitlab-ci.yml file:\nDocker image Node image Docker image:\nvariables: GIT_DEPTH: \"0\" # Unshallow the repository by default image: name: clevercloud/clever-tools:latest entrypoint: [\"\"] Node image:\nvariables: GIT_DEPTH: 0 # Unshallow the repository by default before_script: # Download clever-tools before any script executes - CC_VERSION=latest - curl -s -O https://clever-tools.clever-cloud.com/releases/${CC_VERSION}/clever-tools-${CC_VERSION}_linux.tar.gz - tar -xvf clever-tools-${CC_VERSION}_linux.tar.gz - PATH=${PATH}:$(pwd)/clever-tools-${CC_VERSION}_linux ⚠️ Using before_script in your GitLab pipeline affects your other scripts as well. Consider including it in a separate job if you run other test scripts unrelated to Clever Cloud deployments in your pipeline. Mandatory configuration Your repository must contain at least the following variables to use the CLI:\nCLEVER_TOKEN CLEVER_SECRET Find it in your machine, usually in ~/.config/clever-cloud/clever-tools.json, after installing Clever Tools.\n⚠️ CLEVER_TOKEN and CLEVER_SECRET expire after one year. Make sure to set a reminder to inject the new ones to avoid breaking your pipelines."},"title":"Write your own CI/CD"},"/developers/doc/ci-cd/github/":{"data":{"":" How to set up you CI/CD from GitHub directly from Clever Cloud, and how to deploy review apps. ","-go-further#🎓 Go further":" GitHub Actions documentationFind help in GitHub Actions documentation Clever Tools CLIDeploy and manage your applications and dependencies from your terminal. ","troubleshooting#Troubleshooting":"If you encounter troubles or bugs using the GitHub Action, feel free to open an issue on the repository.","use-the-github-integration#Use the GitHub integration":"Clever Cloud provides a GitHub integration to deploy any repository hosted on GitHub to Clever Cloud. You can deploy the same repository to multiple Clever Cloud applications from different branches. Select the appropriate branch in you application menu, in Information \u003e Application edition \u003e Used GitHub branch for deployment.\nClever Cloud asks for permission to access your GitHub repositories. Accept the permissions to allow the deployment. You can deploy both public or private repositories.\nDeploy review apps from a PR on GitHub You can automate deployments for review apps when a Pull Request opens on your GitHub repository by using Clever Cloud GitHub Action. This action uses Clever Tools to deploy a new app from the branch the Pull Request is based on and post a comment with the URL of the review app. The action redeploys the app on every new commit and deletes it when the Pull Request is closed (merged or not).\nHow to use the Review App GitHub Action Two things are necessary to use the action:\nA workflow file to run the action. For example, .github/workflow/review-app.yml. At the top of this file, define the event trigger for running the action: on: pull_request_target: types: [opened, closed, synchronize, reopened] branches: [ main ] Then, use the action and define the mandatory input:\n- name: Create review app uses: CleverCloud/clever-cloud-review-app@latest env: CLEVER_SECRET: ${{ secrets.CLEVER_SECRET }} CLEVER_TOKEN: ${{ secrets.CLEVER_TOKEN }} ORGA_ID: ${{ secrets.ORGA_ID }} with: type: '\u003ctype-of-app\u003e' Inject the environment variables from your repository: From your GitHub repository go to Settings \u003e Secrets and variables. Inject them both in “Environment secrets” and “Repository secrets” to allow deployments from forked repositories. Then add them with an GH_ prefix in your workflow file (this will prevent the injection of the GitHub runner variables in your app). Finally, enable the injection with set-env: true: name: Create review app uses: CleverCloud/clever-cloud-review-app@latest env: CLEVER_SECRET: ${{ secrets.CLEVER_SECRET }} CLEVER_TOKEN: ${{ secrets.CLEVER_TOKEN }} ORGA_ID: ${{ secrets.ORGA_ID }} GH_CC_RUN_SUCCEEDED_HOOK: ${{ secrets.CC_RUN_SUCCEEDED_HOOK }} # This environment variable will be set on Clever Cloud with: type: '\u003ctype-of-app\u003e' set-env: true # Enables the command to set en vars on Clever Cloud Mandatory configuration Your repository must contain at least the following variables to use the CLI:\nCLEVER_TOKEN CLEVER_SECRET Find it in your machine, usually in ~/.config/clever-cloud/clever-tools.json, after installing Clever Tools.\n⚠️ CLEVER_TOKEN and CLEVER_SECRET expire after one year. Make sure to set a reminder to inject the new ones to avoid breaking your pipelines.\nFull instructions are available on the Action project.\nReview App workflow example To see a Review App workflow already in use, see this workflow on GitHub."},"title":"Deploy from GitHub"},"/developers/doc/ci-cd/gitlab/":{"data":{"":" How to set up you CI/CD from GitLab to deploy to Clever Cloud. ","-go-further#🎓 Go further":" GitLab ComponentsLearn how to use GitLab components Clever Tools CLIDeploy and manage your applications and dependencies from your terminal. ","troubleshooting#Troubleshooting":"If you encounter troubles or bugs using the GitLab component, feel free to open an issue on the repository:","use-the-components-catalog#Use the Components Catalog":"GitLab provides it’s own way of deploying applications to any host provider. The CI/CD system differs from GitHub Actions, but Clever Cloud has already worked on ways to ease the process. Find components in GitLab Components Catalog to build a modular pipeline for your project.\nTo use a component, add this snippet to your .gitlab-ci.yml file:\ninclude: - component: $CI_SERVER_HOST/\u003cCI_PROJECT_PATH\u003e/\u003ccomponent-name\u003e@~latest Mandatory configuration Your repository must contain at least the following variables to use the CLI:\nCLEVER_TOKEN CLEVER_SECRET Find it in your machine, usually in ~/.config/clever-cloud/clever-tools.json, after installing Clever Tools.\n⚠️ CLEVER_TOKEN and CLEVER_SECRET expire after one year. Make sure to set a reminder to inject the new ones to avoid breaking your pipelines.\nGitLab pipeline example For example, to deploy any commit on your production app, use:\ninclude: - component: $CI_SERVER_HOST/\u003cCI_PROJECT_PATH\u003e/deploy-to-prod@~latest This assumes you have a running app on Clever Cloud. Any commit on your default branch (main, master or other name) triggers a deployment for this app. Inject the following variables in your GitLab repository settings:\nAPP_ID: Find it at the top right in Clever Cloud Console, in your application tab. CLEVER_TOKEN and CLEVER_SECRET \u003cCI_PROJECT_PATH\u003e configuration In the project you want to deploy, replace \u003cCI_PROJECT_PATH\u003e with the actual path of the components, otherwise this variable fetches your project current path (which doesn’t host the CI/CD components). Depending on your platform, path can be different.\nOn gitlab.com - component: $CI_SERVER_HOST/CleverCloud/clever-cloud-pipeline/deploy-to-prod@~latest On Heptapod - component: $CI_SERVER_HOST/pipelines/clever-cloud-pipeline/deploy-to-prod@~latest On your self-hosted instance - component: $CI_SERVER_HOST/\u003cgroup\u003e/\u003cproject\u003e/deploy-to-prod@~latest Deploy from a self-hosted GitLab instance You can use pipeline components to deploy from a self-hosted GitLab instance, by including it as a project and mirroring the pipeline repository. Follow GitLab documentation to get full instructions.\nDeploy directly from Heptapod The self-hosted GitLab service on Clever Cloud with Heptapod already hosts the components, you don’t need to do any set up like you would in a self-hosted instance:\nCreate a .gitlab-ci.yml at the root of your repository with the component to use Add the variables to your repository settings Run the pipeline "},"title":"Deploy from GitLab"},"/developers/doc/cli/":{"data":{"":" Manage your applications from your terminal. In addition to the Clever Cloud console, you can manage your addons and applications from the command line with Clever Tools.\nInstall Create an application or an add-on Configure an application Manage an application Manage an application's lifecycle Set notifications SSH access an application "},"title":"CLI"},"/developers/doc/cli/configure/":{"data":{"":"","inspect-the-current-configuration#Inspect the current configuration":"clever config will list you all available configuration for your application.\n$ clever config Name: phpinfo Description: phpinfo Zero-downtime deployment: enabled Sticky sessions: disabled Cancel current deployment on push: disabled Force redirection of HTTP to HTTPS: disabled You can also get a single configuration using clever config get {name}\n$ clever config get cancel-on-push Cancel current deployment on push: disabled ","update-your-configuration#Update your configuration":"You can update a single configuration using clever config set {name} {value}\n$ clever config set sticky-sessions true Sticky sessions: enabled You can also update all of the configuration at once using clever config update [options]\n$ clever config update --description=\"Displays phpinfo()\" --disable-sticky-sessions --enable-force-https Description: Displays phpinfo() Sticky sessions: disabled Force redirection of HTTP to HTTPS: enabled "},"title":"Configure"},"/developers/doc/cli/create/":{"data":{"":"","addon-creation-process#Addon creation process":"Using clever addon, you can add, rename or delete addon and list available addon providers\n# List existing addons clever addon Creating an addon First, list addon providers and then create your addon.\n# List addon providers clever addon providers # Create your addon and link it to your application with --link \u003capp-alias\u003e clever addon create \u003cprovider-name\u003e \u003caddon-name\u003e --link \u003capp-alias\u003e # Create an addon for an organization clever addon create \u003cprovider-name\u003e \u003caddon-name\u003e --link \u003capp-alias\u003e --org \u003corg-name\u003e Choosing provider’s plan and region You can choose your addon’s plan when you create it using --plan \u003cplan-name\u003e. The plan is by default ‘dev’. With the flag “–yes” you can skip confirmation even if the addon is not free. You can also select the region that will provision the addon in.\n# Show more informations about a provider(plans and available regions) clever addon providers show \u003cprovider-name\u003e # Create your addon clever addon create \u003cprovider-name\u003e --plan \u003cplan\u003e --region \u003cregion-name\u003e \u003caddon-name\u003e Rename or delete an addon Use addon rename and addon delete to respectively rename and delete an addon. If you don’t want any confirmation, use --yes.\n# Rename an addon clever addon rename \u003caddon-name\u003e \u003cnew-name\u003e # Delete an addon clever addon delete \u003caddon-name\u003e ","apps-creation-process#Apps creation process":"Apps creation process clever create allows you to create a new application.\nFirst of all, select the type of your application in the list below :\ndocker (Docker) go (Go) gradle (Java or Groovy + Gradle) jar (Java + JAR) maven (Java + Maven) node (Node) php (PHP) play1 (Java + Play! 1) play2 (Java or Scala + Play! 2) python (Python) ruby (Ruby) rust (Rust) sbt (Scala + SBT) static-apache (Static) war (Java + WAR) Then, in order to create your app in your personal space, use :\nclever create --type \u003ctype\u003e \u003capp-name\u003e # Create an application for an organization clever create --type \u003ctype\u003e \u003capp-name\u003e --org \u003corg\u003e # Choose the region of your application (par, rbx, wsw, mtl, sgp, syd) clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e Alias You might want to use an alias instead of the complete name.\nclever create --type \u003ctype\u003e \u003capp-name\u003e --alias \u003calias\u003e When you want to make reference to this application using an other command, use --alias ALIAS instead of the name.\nGitHub When creating your application, you can link it to GitHub for deployments.\n# Link an application to GitHub clever create --github \u003cowner\u003e/\u003crepository\u003e ","dependencies#Dependencies":"Link an application or an addon You can make dependencies using clever service link\n# Link an application clever service link-app \u003capp-name\u003e # Link an addon clever service link-addon \u003caddon-name\u003e You can unlink dependency using unlink-app and unlink-addon","exposed-configuration#Exposed configuration":"Clever-tools allows you to get and update the exposed configuration of your application that allows dependencies to get informations about your application.\nGet the whole configuration Simply use the commmand down below to get all your variables.\nclever published-config Update a variable Use set to add or update a variable and rm to remove one.\n# Add or update a variable clever published-config set \u003cvariable-name\u003e \u003cvariable-value\u003e # Remove a variable clever published-config rm \u003cvariable-name\u003e Import a configuration Clever-tools allows you to load a configuration from STDIN.\ncat \u003cconfiguration\u003e | clever published-config import "},"title":"Create"},"/developers/doc/cli/getting_started/":{"data":{"":"In addition to the Clever Cloud console, you can manage your addons and applications from the command line with Clever Tools.","deploying-new-code#Deploying new code":"After having written new code, you can deploy it to Clever Cloud\n# Will git push your code to Clever Cloud and display logs clever deploy # Will open your application clever open ","enabling-autocompletion#Enabling autocompletion":"The clever-tools CLI comes with a comprehensive auto-completion system. Some installation methods like .deb packages, .rpm packages or brew will try to enable it automatically. If it does not work, try this for bash:\nclever --bash-autocomplete-script $(which clever) | sudo tee /usr/share/bash-completion/completions/clever or this for zsh:\nclever --zsh-autocomplete-script $(which clever) | sudo tee /usr/share/zsh/site-functions ","installing-clever-tools#Installing Clever Tools":"The clever-tools CLI can be installed through many different channels depending on your system setup.\nVia npm If you already have node/npm on your system, you can run:\nnpm install -g clever-tools If you want to install our latest beta release, you can run:\nnpm install -g clever-tools@beta On GNU/Linux Debian/Ubuntu (.deb) ⚠️ We recently moved from Bintray to a self-hosted Nexus repository available at https://nexus.clever-cloud.com. If you were using Bintray to install our .deb packages, you will need to edit your /etc/apt/sources.list and remove the old entry with https://dl.bintray.com/clevercloud/deb before going further. If you are using a GNU/Linux distribution that uses .deb packages like Debian or Ubuntu, you can run:\ncurl -fsSL https://clever-tools.clever-cloud.com/gpg/cc-nexus-deb.public.gpg.key | gpg --dearmor -o /usr/share/keyrings/cc-nexus-deb.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/cc-nexus-deb.gpg] https://nexus.clever-cloud.com/repository/deb stable main\" | tee -a /etc/apt/sources.list apt-get update apt-get install clever-tools NOTES:\nThe .deb packages are hosted on Clever Cloud’s public Nexus instance available at https://nexus.clever-cloud.com. Our PGP key is required to trust the repository. If you want access to the beta channel, you can use this in your sources.list: echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/cc-nexus-deb.gpg] https://nexus.clever-cloud.com/repository/deb-beta beta main\" | tee -a /etc/apt/sources.list CentOS/Fedora (.rpm) ⚠️ We recently moved from Bintray to a self-hosted Nexus repository available at https://nexus.clever-cloud.com. If you were using Bintray to install our .rpm packages, you will need to remove the old /etc/yum.repos.d/bintray-clevercloud-rpm.repo before going further. If you are using a GNU/Linux distribution that uses .rpm packages like CentOS or Fedora, you can run:\ncurl -s https://clever-tools.clever-cloud.com/repos/cc-nexus-rpm.repo \u003e /etc/yum.repos.d/cc-nexus-rpm.repo yum update yum install clever-tools NOTES:\nThe .rpm packages are hosted on Clever Cloud’s public Nexus instance available at https://nexus.clever-cloud.com. If you want access to the beta channel, you will need to edit /etc/yum.repos.d/cc-nexus-rpm.repo and set enabled=1 for the [clever-tools-beta]. Arch Linux If you are using Arch Linux, the packages can be installed from AUR with this repo: clever-tools-bin. If you don’t know how to use this, you can run:\ngit clone https://aur.archlinux.org/clever-tools-bin.git clever-tools cd clever-tools makepkg -si NOTES:\nIf you want access to the beta channel, you can use this repo clever-tools-bin-beta. Exherbo If you are using Exherbo, you can run:\ncave resolve repository/CleverCloud -zx1 cave resolve clever-tools-bin -zx Other distributions (.tar.gz) If you are using another GNU/Linux distribution, you can download a .tar.gz archive and extract the binary in your PATH:\ncurl -O https://clever-tools.clever-cloud.com/releases/latest/clever-tools-latest_linux.tar.gz tar xvzf clever-tools-latest_linux.tar.gz cp clever-tools-latest_linux/clever ~/.local/bin/ NOTES:\nThe packages are available on Clever Cloud’s Cellar bucket: clever-tools-latest_linux.tar.gz. You can also retrieve any release (including beta) on this Cellar bucket by replacing latest (path and filename) with the version number you need. On macOS ⚠️ If you have an Apple processor, an error may occur during the installation.\nThis is because clever tools currently only work on MacOS with an Intel processor. To resolve this problem, you can install Rosetta, a program that lets Apple processors run programs compiled for Intel processors.\nTo install it, you can use the command /usr/sbin/softwareupdate --install-rosetta Using homebrew If you are using macOS and you have homebrew installed, you can run:\nbrew install CleverCloud/homebrew-tap/clever-tools NOTES:\nIf you want access to the beta channel, you can use CleverCloud/homebrew-tap-beta/clever-tools instead. Using the .tar.gz archive If you are using macOS, but you don’t have homebrew installed, you can download a .tar.gz archive and extract the binary in your PATH:\ncurl -O https://clever-tools.clever-cloud.com/releases/latest/clever-tools-latest_macos.tar.gz tar xvzf clever-tools-latest_macos.tar.gz cp clever-tools-latest_macos/clever ~/.local/bin/ NOTES:\nThe packages are available on Clever Cloud’s Cellar bucket: clever-tools-latest_macos.tar.gz. You can also retrieve any release (including beta) on this Cellar bucket by replacing latest (path and filename) with the version number you need. On Windows Using chocolatey ⚠️ We recently moved from Bintray to a self-hosted Nexus repository available at https://nexus.clever-cloud.com. If you were using Bintray to install our nupkg packages, you will need to remove the old source. If you are using Windows and you have chocolatey installed, you can run:\nchoco sources add -n=clevercloud -s='https://nexus.clever-cloud.com/repository/nupkg/' choco install clever-tools NOTES:\nIf you want access to the beta channel, you can use choco sources add -n=clevercloud -s='https://nexus.clever-cloud.com/repository/nupkg-beta/' instead. Using the .zip archive If you are using Windows, but you don’t have chocolatey installed, you can download a .zip archive and extract the binary in your PATH.\nNOTES:\nThe packages are available on Clever Cloud’s Cellar bucket: clever-tools-latest_win.tar.gz. You can also retrieve any release (including beta) on this Cellar bucket by replacing latest (path and filename) with the version number you need. Via Docker If you are using docker, you can use the image provided here.\ndocker pull clevercloud/clever-tools docker run --rm clevercloud/clever-tools \u003ccommand\u003e Dockerfile In your Dockerfile you can copy the clever-tools CLI from the image itself with a simple one liner:\nCOPY --from=clevercloud/clever-tools /bin/clever /usr/local/bin/clever Via Nix If you are using Nix, you will find a Nix derivation on Fretlink’s GitHub repository: https://github.com/fretlink/clever-tools-nix","linking-an-existing-application#Linking an existing application":"If you have an already existing application, you can start managing it with Clever Tools.\n# First, go to your local repository cd /path/to/your/application # Then, link it to the Clever Cloud application clever link \u003capp_id\u003e # You can also use the application name (make sure to specify the # organization name if your application is in an organization. clever link --org \u003corg_name\u003e \u003capp_name\u003e # Unlink an application clever unlink \u003capp_id\u003e ℹ️ Once you have linked an application, clever-tools will create a Json configuration file named .clever.json at the root of the directory. This file can be commited safely, others team members working on this repository will not have to link the application again. This configuration file contains the AppID, so keep this in mind if you publish it on a public repository. ","linking-your-account#Linking your account":"To use clever-tools, you have to login.\nclever login It will open the Web console in your browser and reuse your existing session if you’re already logged in.\nclever login tries to open a browser through xdg-open on GNU/Linux systems (and in bash for windows). Make sure you have xdg-utils available as well as a default browser set (or you can copy and paste the URL displayed in the console."},"title":"Install"},"/developers/doc/cli/lifecycle/":{"data":{"":"","activity-of-your-application#Activity of your application":"clever-tools can show you the activity of an application. For each deployment, you get :\ndate and time of deployment status (OK or FAIL) action (DEPLOY or UNDEPLOY) commit ID tool used to deploy (Git/Console/clever-tools/…) In order to show those informations, use :\n# Show the last 10 deployments clever activity # Show all deployments clever activity --show-all # Show deployments and track new ones clever activity --follow ","listing-linked-applications#Listing linked applications":"You can list your linked applications with clever applications. For each application, the command shows you the alias, the id and the deployment url.\n# List linked applications clever applications # List only application aliases clever applications --only-aliases ","status-of-your-application#Status of your application":"Status of your application Clever-tools can show you the status of an application on Clever Cloud using clever status. This command shows you if the application is running or stopped and informations about the scalability of your application."},"title":"Get an application lifecycle"},"/developers/doc/cli/manage/":{"data":{"":"","deploy-a-new-commit#Deploy a new commit":"Use clever deploy to push your commits, which then starts a deployment","domains#Domains":"List your domains If you want to list your domain, use :\nclever domain Add or remove domains Using clever domain, you can add or remove domain names.\n# Add a domain clever domain add \u003cdomain-name\u003e # Remove a domain clever domain remove \u003cdomain-name\u003e ","environment#Environment":"Clever-tools allows you to get and update the environment of your application.\nGet the whole environment Simply use the command down below to get all your variables.\nclever env Update an environment variable Use set to add or update an environment variable and rm to remove one.\n# Add or update an environment variable clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e # Remove an environment variable clever env rm \u003cvariable-name\u003e If your environment variable contains a -, then write: clever env set test -- ---foo---\nOr you can put the dashes before the remaining arguments, as follows: clever -- env set test ---bar---\nThe -- indicates that there are no options to be parsed.\nLoad environment variables Clever-tools allows you to load variables from STDIN.\ncat \u003cenv-file\u003e | clever env import ","scalability#Scalability":"Flavors You can choose the scale of your application using --flavor \u003cflavor\u003e where \u003cflavor\u003e can be pico, nano, XS, S, M, L or XL.\n# Change the scale of your application clever scale --flavor \u003cflavor\u003e # Set the minimum and maximum scale for your application clever scale --min-flavor \u003cmin-flavor\u003e --max-flavor \u003cmax-flavor\u003e Instances You can choose the number of parallels instances using --instances \u003cinstances\u003e where \u003cinstance\u003e is a number between 1 and 20.\n# Change the number of parallels instances clever scale --instances \u003cinstances\u003e # Set the minimum and maximum number of parallels instances clever scale --min-instances \u003cmin-instances\u003e --max-instances \u003cmax-instances\u003e ","stop-or-restart-your-application#Stop or restart your application":"clever stop \u003capp-name\u003e allows you to stop your application. If you want to restart your application, you can use :\nclever restart \u003capp-name\u003e # Restart the application with a specific commit id clever restart \u003capp-name\u003e --commit \u003ccommit-id\u003e You can use --quiet when you restart, logs won’t appear during deployment."},"title":"Manage"},"/developers/doc/cli/notifications/":{"data":{"":"The Notifications service allows you to choose the events of interest to you and decide where to send corresponding notifications.","e-mails#E-mails":"Historically and by default, deployment result e-mails (deployment succeeded or failed) were always sent to the owners of an application, namely the user themselves or the organization’s members.\nUsing the notify-email command of clever-tools, you can choose to disable this or to restrict it to only some applications.\nTo do this, you need to delete the hook named Default deployment result e-mails, then add a new one and set it to your liking.\nIssue this command to learn more about this: clever help notify-email.\nIn the future, this service will also handle credits warning notifications and others to come. You will be able to choose wether or not to receive an e-mail and/or for these events to be forwarded to a web service via a webhook.","webhooks#Webhooks":"Webhooks are defined as follows:\nA webhook in web development is a method of augmenting or altering the behavior of a web page, or web application, with custom callbacks. These callbacks may be maintained, modified, and managed by third-party users and developers who may not necessarily be affiliated with the originating website or application. — Wikipedia1\nIn practical terms, this means that you can choose to receive all deployment result events on an endpoint of your application without having to listen to all events via the Websocket API. No more lost events and having to reconnect to the websocket if and when it fails.\nclever-tools has a webhooks command which allows you to list existing webhooks, remove one or add a new one.\nYou can issue this command to learn more about it: clever help webhooks.\nExample: Slack deployment results Webhook First, you will have to create the Incoming WebHooks integration on Slack:\nLet’s go to the custom integrations page, once there go to Incoming WebHooks.\nYou will find an Add Configuration button on the left which will take you to the page where you need to configure the integration. You just need to select the channel where you want the notifications to be posted, then it will show you the Webhook URL, it starts with https://hooks.slack.com/services/. Copy that URL.\nNow, let’s create the Webhook!\nGo into the application directory for which you want to receive notifications and there issue this command:\nclever webhooks add \"deployment results on Slack\" https://hooks.slack.com/services/xxxxxx/yyyyyy/zzzzzzzzzzzzz --format slack --event META_DEPLOYMENT_RESULT Events available The list of values that can be assigned to --event option:\nAccount:\nACCOUNT_CREATION ACCOUNT_DELETION ACCOUNT_EDITION Addon:\nADDON_CREATION ADDON_DELETION Application:\nAPPLICATION_CREATION APPLICATION_DELETION APPLICATION_EDITION APPLICATION_REDEPLOY APPLICATION_STOP Deployment:\nDEPLOYMENT_ACTION_BEGIN DEPLOYMENT_ACTION_END DEPLOYMENT_FAIL DEPLOYMENT_SUCCESS GIT_PUSH Organisation:\nORGANISATION_CREATION ORGANISATION_DELETION ORGANISATION_EDITION ORGANISATION_USER_ADDITION Meta:\nMETA_SERVICE_LIFECYCLE = APPLICATION_STOP, DEPLOYMENT_ACTION_BEGIN, DEPLOYMENT_FAIL, DEPLOYMENT_SUCCESS META_DEPLOYMENT_RESULT = DEPLOYMENT_FAIL, DEPLOYMENT_SUCCESS META_SERVICE_MANAGEMENT = ADDON_CREATION, ADDON_DELETION APPLICATION_CREATION, APPLICATION_EDITION, APPLICATION_DELETION` META_CREDITS = CREDITS_ADDED Others:\nCLEVER_TOOLS_REQUEST CREDITS_ADDED Examples Get a message in a Slack channel when the deployment for an application failed:\nclever webhooks add \"The application failed to deploy\" https://hooks.slack.com/services/xxxxxx/ --format slack --event DEPLOYMENT_FAIL Notify your accounting service when credits are added:\nclever webhooks add \"credits added\" https://hooks.slack.com/services/xxxxxx/yyyyyy/zzzzzzzzzzzzz --format raw --event META_CREDITS All done! You can now push your application (clever deploy) or restart it (clever restart) and you will see the result of the deployment in your Slack channel.\nExcerpted from Wikipedia’s webhook page ↩︎"},"title":"Notifications"},"/developers/doc/cli/ssh-access/":{"data":{"":"","access-your-applications-folder#Access your application\u0026rsquo;s folder":"","accessing-your-machine-with-clever-tools-cli#Accessing your machine with Clever Tools CLI":"","requirements#Requirements":"","show-your-applications-logs#Show your application\u0026rsquo;s logs":"While direct SSH access to instances is not recommended in an immutable infrastructure setup, it can be useful for debugging purposes. Clever Cloud allows you to connect to running instances via SSH.\n⚠️ Clever Cloud instances are to be seen as read-only resources. Any change made on an instance will not be persisted. You can use SSH access for quick tests, but if you want to persist changes, you need to commit them in your repository. Changes made on instances are not kept across deployments. ℹ️ SSH on docker instances will attach to the running container. You must have /bin/bash installed (usually from the bash package) otherwise attaching to the container will fail. Requirements You need to have the Clever Tools CLI installed locally.\nMake sure you have a properly configured SSH key To use SSH access, you need to have an SSH key properly configured in your Clever Cloud account. Please refer to the SSH keys section of the documentation to know how to set up your SSH keys.\nAccessing your machine with Clever Tools CLI In order to access the machine via SSH using the Clever Tools CLI\nyou need to have an application running on Clever Cloud and have linked it with your local repository using the Clever Tools CLI with clever link --org \u003cyour_application's_organization_id\u003e \u003cyour_application_id\u003e\nAccessing your machine You can access running instances of a linked application with $ clever ssh in the linked application’s repository locally.\n$ clever ssh \u003e Opening an ssh shell \u003e bas@67fbf787-3518-47bb-abd9-2c2575844edd ~ $ If multiple instances are running, you will be asked which one to use:\n$ clever ssh \u003e 1) Sleepy Ponita - Instance 0 - UP (11281f38-31ff-43a7-8595-a2d82630c32b) \u003e 2) Tense Caterpie - Instance 1 - UP (b10d19d9-5238-408b-b038-3e32c7a301c2) \u003e Your choice: 1 \u003e Opening an ssh shell \u003e bas@11281f38-31ff-43a7-8595-a2d82630c32b ~ $ You are now connected to the machine.\nNote for Windows users $ clever ssh command will fail on PowerShell or cmd.exe if there is no ssh.exe in your path. The most straightforward solution is to start $ clever ssh from git-bash but you can also add ssh.exe in your path..\nAccess your application’s folder No matter wich way you’ve decided to use to SSH to the machine, your application’s folder is located at: /home/bas/\u003capp_id\u003e.\nShow your application’s logs If you want to show your application’s logs while you debug:\njournalctl -efa -u bas-deploy.service You can also use journalctl with other options if you need to."},"title":"SSH access"},"/developers/doc/contribute/":{"data":{"":"Would you like to contribute to this documentation?","before-writing-something-new#Before writing something new":"Before you start writing something new please create a Github issue so we can talk about it. Moslty to make sure someone is not already working on the same thing.","writing-new-content#Writing new content":"There are a number of things you need to be aware of when writing new content. We use Markdown files and Hugo to generate this documentation.\nDebug Mode If you add debug=true as params of your Hugo site, you should see every shortcode outlined on your website like so:\n\u003cdiv class=\"shortcode-debug\"\u003e\u003cstrong\u003emyshortcode \u003c/strong\u003e\u003cp\u003eThis is a shortcode being used\u003c/div\u003e "},"title":"Contribute"},"/developers/doc/develop/":{"data":{"":" Common configuration for all instances Deployment hooks Environment variables references How environment variables work Workers Deployment healthcheck path "},"title":"Develop"},"/developers/doc/develop/best-practices/12-factors/":{"data":{"":"The twelve-factor app is a methodology for writing software delivered as a service, which is what you are doing by pushing your code to Clever Cloud and for container deployment in general. By writing code following these principles, your application will be cloud ready by design.\nAs a lot has already been written on the subject, we strongly recommend that you read some of the following links to begin with this methodology:\nhttps://en.wikipedia.org/wiki/Twelve-Factor_App_methodology https://www.clearlytech.com/2014/01/04/12-factor-apps-plain-english/ https://12factor.net/ Happy learning !"},"title":"The Twelve-Factor App"},"/developers/doc/develop/best-practices/blue-green/":{"data":{"":"Blue/Green deployment is a technique used in automated deployment of applications, databases and services. Its main goal is to minimize the downtime and risks of an application by running two identical environment instances, one called Blue and the other one called Green.","contextual-example#Contextual example":"Let’s say you have a production environment called Blue, running for instance an e-commerce application. Your customers are routed to this Blue instance. In parallel, you will have a “sleeping clone” of Blue, named Green. Now let’s say you have achieved a new feature and want your customers to benefit of it. Using the “Blue/Green” technique, the new code will be used in Green. Once Green is ready, you will redirect your customers to Green, and we will put Blue in “sleeping mode”. When you will add new modification you will do it on Blue this time, then on Green again, and so on.\nThere are many benefits to this approach:\nif Green fails to deploy there will be no downtime for your customers or users as you will not use the broken Green and stay on “Blue” until you fix your code so it can start if you are not happy with the changes you added in Green, you can “awake” Blue and get back to the previous version easily by routing the traffic to it ","in-the-clever-cloud-context#In the Clever Cloud context":"When you push your source code to the Clever Cloud git remote, Clever Cloud will automatically use the “Blue/Green” pattern to apply your changes to your production.\nA new VM, let’s call it Blue is created. The deployment is successful when there’s no error in the build phase and the server answers on :8080/ with a non error code. And that’s it, you will use the new version on production within seconds.\nIf you push new changes, a Green VM will be created.\nDeployment succeeds If the deployment succeeds, Green will be the version in production and Blue will be turned off minutes later. This way, if you are not happy with the changes you made, just go the Clever Cloud web console, select your application and in the Overview menu, click the “Start last pushed commit” button, this will “awake” Blue and reverse your changes in production within a few minutes.\nDeployment fails If there is an error during the build phase or if the Green servers answers an error code on :8080/, we will alert you by email and Blue will remain the production server.\nNext time you push code a new Green VM will be created, then a Blue one, and so on.\nYou also may see some deployments that you haven’t triggered in your logs. It is because Clever Cloud uses “Blue/Green” pattern to update VMs, either security patches or versions updates."},"title":"Blue/Green Deployments"},"/developers/doc/develop/best-practices/cloud-storage/":{"data":{"":"You want to store files but you can’t decide between FS Buckets and Cellar. This article will compare them: usage, pros/cons, pricing.\nClever Cloud uses immutable disposable VMs. Every time you redeploy your application, you lose the old instances and all the files stored on their filesystems. If you want to avoid that, you have to store your important files outside of your instances.\nCellar and FS Buckets both allow you to store files outside of your instances for later use. But there are some differences between them.\nℹ️ If you are coding a new project and need to store files, use Cellar. It will be cheaper and give you way more flexibility.\nIf your want to run a WordPress site or some OSS PHP application and are in a hurry, you may not get to choose: use FS Buckets.","what-is-cellar#What is Cellar?":"Cellar is an Amazon S3 API implementation using Ceph Rados Gateway. It provides an HTTP API that can be used with any S3 API Client. Clients exist for a lot of languages. You can use any S3 Client, from the official Amazon ones to the community ones.\nIf you already use S3, you will be in your element.\nTo store a file, issue a PUT HTTP request to Cellar’s API. To get a file, issue a GET request to the API. You need secret and public keys to authenticate your requests. You can manage ACLs and generate signed URLs with an expiration date.\nUpsides of Cellar You can move the file uploads to your client entirely. Just give it a temporary signed URL (generated by your backend) and it will be able to upload directly to Cellar. That way, you don’t have to handle the receive-and-upload part on the server side.\nYour files are stored in a secure way outside of your apps FS. So an attacker will have a harder time to find it.\nYou can delegate the authorization part to Cellar by giving signed urls for file downloads and uploads.\nThe files are stored with a replication factor of 3, meaning that there are 2 replicas in addition of the original data.\nDownsides of Cellar When deploying an application you did not write, file uploads may already be developed using local files. Like in WordPress, PrestaShop, etc. So you would have to use plugins or hack it to upload to Cellar.","what-is-fs-bucket#What is FS Bucket?":"Configuring FS Buckets in your application will give you a folder in your filesystem. This folder is shared between instances/applications. It’s mounted over the network. As for any network filesystem there are upsides and downsides.\nUpsides If your application manages files on a filesystem, you don’t have to change anything. Just setup your FS Bucket to mount on a given folder, setup your application to write in that folder and you are good to go!\nSince the folder is mounted over the network, multiple instances/applications can read it like any file on the system. At the same time.\nDownsides Since it’s a file on a filesystem, you can be tempted to store a SQLite (or equivalent) database in it. This would be wrong. If many instances try to write in it at the same time, you might end up with a corrupted database.\nFor the same reason, anything accessing a file in write at the same time might corrupt the data you put in it.","what-should-i-choose#What should I choose?":"Well, you read the upsides and downsides of both. You may understand where our preference goes, by now! If you can, use Cellar. S3 Client library exist in almost all languages. It’s cheaper. It’s more resilient to hardware failures. It gives you free processing power: when using files on your filesystem, you have to process them yourself. When using Cellar, you can delegate the handling of the upload to Cellar itself.\nIf you don’t have a choice, use whatever you have to use."},"title":"Cloud Storage"},"/developers/doc/develop/best-practices/load-testing/":{"data":{"":"","considerations-to-take-into-account#Considerations to take into account":"In the event that you use public front-ends, it is necessary to notify the support. Indeed, depending on the nature of the load, it is possible that a form of network blocking is performed by our teams if they are not notified.\nIn case you have dedicated frontends, note that too much load could impact your other applications behind this frontend. Because in general, the amount of private front-ends is lower than the number of public front-ends (new public front-ends are added on a regular basis).","online-and-local-load-tools#Online and local load tools":"Choosing a load-testing solution will depend on several factors. If simplicity and speed are the most important factors, online tools are the most appropriate. On the other hand, if you have to test particular protocols, and have fine configuration options via a little programming / scripting and for a lower cost, you may want to use dedicated, local solutions.\nOnline Online services are available to perform your tests. Most offer typical user journey scenarios to allow you to simulate a user:\nK6 Octoperf Loader.io Local, with open-source alternatives Some open source services to be installed on an infrastructure (workstation or IaaS in the best case) are also available:\nGatling Drill Locust Jmeter ","overview#Overview":"Overview Performing a performance test is the best way to determine how your application will perform under heavy load.\nIn general, these tests make it possible to identify:\nthe maximum number of concurrent users whether the current resources are sufficient to operate your application in good conditions and the maximum operational capacity of your application ","why-carry-out-these-tests#Why carry out these tests":"Performing these tests will allow you:\nto have perspective on the performance and stability of your infrastructure. to be able to identify bottlenecks in particular stress scenarios to identify and remove any weaknesses in architectures via supervision and performance management strategies and increase scalability The determining elements are:\nThe response time of your transactions (poorly optimized requests, etc.) The performance of the application (single-threaded application, expectations of external services, generation of logs in a file, etc.) The performance of managed services such as databases (lack of indexes, unnecessary iterations, etc.) Software design in general Hardware limitations such as CPU, RAM, network, etc. bad middleware configurations (databases, server, etc.) The response time between the client and the application "},"title":"Load testing"},"/developers/doc/develop/build-hooks/":{"data":{"":"","cant-i-use-build_tool#Can\u0026rsquo;t I use $BUILD_TOOL?":"Deployment lifecycle An application deployed on Clever Cloud goes through two distinct phases. The build phase where dependencies are fetched and the application built, and the run phase where the application is launched. Hooks allow you to run specific tasks before and after those phases.\nThe available hooks are:\nPre Build Post Build Pre Run On Run Succeeded On Run Failed Setting hooks up Hooks are set up through environment variables. To set up a Post Build hook, you need to define a CC_POST_BUILD_HOOK variable:\nCC_POST_BUILD_HOOK=echo \"it works!\" You can directly put commands in the hook. Hooks have access to the environnement variables as well as a working Node.js installation.\nIf you have complex things to do, the best way is to put the logic in a bash script (dont forget to make it executable!) To use it, set the hook you want to trigger to the path of your script, relative to the root path of your repository. E.g. if your script is in a clevercloud folder at the root of your project then you can define CC_POST_BUILD_HOOK=./clevercloud/script.sh\nCan’t I use $BUILD_TOOL? Hooks are designed as an escape hatch for steps you can’t integrate properly in your build tool. In many case, you can (and you should) integrate as much as possible with your build tool, but sometimes it’s not possible. Another reason to use hooks is to integrate Clever Cloud-specific tasks which don’t belong in the project’s build configuration.","deployment-lifecycle#Deployment lifecycle":"","exceptions#Exceptions":"Some application types do not have hooks support or only some of them.\nDocker For Docker, because you can do pretty much anything yourself inside your Dockerfile, only the following hooks are available:\nCC_RUN_SUCCEEDED_HOOK If you need support for other hooks, please reach out to our support and explain your use case.","hooks-types#Hooks types":"Pre Build By using CC_PRE_BUILD_HOOK.\nThis hook is ran before the dependencies are fetched. If it fails, the deployment fails.\nThis hook is ran every time.\nThis hook is perfect for:\nbuild tool configuration (eg setting up a .npmrc with private tokens) extra dependencies fetching (eg npm install for frontend deps) Post Build By using CC_POST_BUILD_HOOK.\nThis hook is ran after the project is built, and before the cache archive is generated. If it fails, the deployment fails.\nThis hook is not ran during deployments from cache.\nThis hook is perfect for:\nextra build steps that you want to cache (eg bundling your frontend assets) ℹ️ If you set CC_DISABLE_BUILD_CACHE_UPLOAD environment variable to true, the cache archive won’t be created nor uploaded. Pre Run By using CC_PRE_RUN_HOOK.\nThis hook is ran before the application is started, but after the cache archive has been generated. If it fails, the deployment fails.\nThis hook is ran every time.\nThis hook is perfect for:\npreparation tasks that need to be ran every time (eg a database migration check) Run Success/Fail By using CC_RUN_SUCCEEDED_HOOK or CC_RUN_FAILED_HOOK.\nThese hooks are ran once the application has started (or has failed starting). Their failure doesn’t cause the deployment to fail.\nOne of these hooks is ran every time.\nThese hooks are perfect for:\nnotifications clean-up 🧹 This hook is deprecated\nThese hooks replace the older postDeploy hook, which is now deprecated. ","setting-hooks-up#Setting hooks up":""},"title":"Deployment Hooks"},"/developers/doc/develop/common-configuration/":{"data":{"":"Each instance type (php,java,python,go,ruby…) has its own configuration. However, some of\nthese configuration items can be applied to any instance.","hooks#Hooks":"You can run specific tasks during the deployment of your application.\nPlease refer to the hooks documentation to learn more about them.","private-ssh-key#Private SSH Key":"If your company manages its own artifacts in a private repository (like, you can only access them via git+ssh or sftp), and you need a private key to connect to the server, you can either set it in an environment variable or commit it in your application’s Clever Cloud repository.\nThat key will be installed in ~/.ssh/ before the start of the build. So the dependency manager will use it to fetch libs only accessible by ssh.\nℹ️ Please provide a key without pass phrase, or the system will be unable to unlock it Environment variable Set your key as the value of the CC_SSH_PRIVATE_KEY variable. If you want it to be saved to a specific file, you can set the CC_SSH_PRIVATE_KEY_FILE variable.\nCommitted file First, you need to add the file clevercloud/ssh.json, its content is pretty straight-forward:\n{ \"privateKeyFile\": \"path/to/file\" } The privateKeyFile field must be a path to an SSH private key. The path must be relative to the root of your repository.\nFor example, if your private key file is in the clevercloud folder and is named my_key, the privateKeyFile field will be \"clevercloud/my_key\".","workers#Workers":"You can run background tasks running in parallel of your application.\nPlease refer to the workers documentation to learn more about them."},"title":"Configuration for all instances"},"/developers/doc/develop/env-variables/":{"data":{"":"Clever Cloud allows you to define environment variables that will be\ninjected in your application’s environment.","environment-variables-rules-and-formats#Environment variables rules and formats":"You will find below a list of rules applied to our environment variables keys and examples of the formats available on our different modes.\nRules Letters (ASCII only, upper and lower case) Valid: user_id, USER_ID, UsERId, userid, USERID Invalid: user_id?, ?userid, user.id, user id Digits (but not for first character) Valid: user2id, userid42 Invalid: 2userid, 1user_Id Underscores Valid: user_id, all_user_id, _user_id, _user_id__ Everything else is not allowed Java properties rules exception In case of a Java application you can also use:\nDashes Valid: spring-boot, spring-boot-database, --spring-boot, --spring Dots Valid: spring.boot, spring.datasource.url, .spring.url Format Here are some formats that you can use when editing your variables in our “expert” and JSON modes.\nExpert The format of an expert variable is VAR_NAME=\"VAR_VALUE\".\nHere are some examples:\nMultiple variables examples:\nEMPTY=\"\" MULTI=\"line one line two line three\" ONE=\"value ONE\" TWO=\"value TWO\" Multiline:\nMULTI=\"line one line two line three\" Empty value:\nEMPTY=\"\" JSON The format of a JSON variable is { \"name\": \"VAR_NAME\", \"value\": \"VAR_VALUE\" }.\nNote: You must put these variables in an array (see the multiple variable example to see how it goes).\nHere are some examples:\nMultiline:\n{ \"name\": \"MULTI\", \"value\": \"line one\\nline two\\nline three\" } Empty value:\n{ \"name\": \"EMPTY\", \"value\": \"\" } Multiple variables examples:\n[ { \"name\": \"EMPTY\", \"value\": \"\" }, { \"name\": \"MULTI\", \"value\": \"line one\\nline two\\nline three\" }, { \"name\": \"ONE\", \"value\": \"value ONE\" }, { \"name\": \"TWO\", \"value\": \"value TWO\" } ] ","how-are-variables-defined#How are variables defined?":"Variables are defined on a per-application basis. They are defined in four ways:\nBy provisioned add-ons linked to applications. The variables names are listed in the add-on’s information panel.\nBy linked applications with exposed configuration.\nBy adding variables yourself in the “Environment variables” panel of your application.\nSome environment variables are added automatically for each application.\nPlease note that if you define or modify environment variables, you will need to redeploy your application to make it use the new variables.\nCheck out our environment variable reference.","how-do-i-use-these-variables#How do I use these variables?":"Depending on the type of your application, the code will differ. You can find more information in the documentation pages related to your application type.\nHere is a non-exhaustive summary:\nLanguage Usage Go os.Getenv(\"MY_VAR\") Haskell Os.Getenv[\"MY_VAR\"] Node.js process.env[\"MY_VAR\"] Java WAR System.getProperties().getProperty(\"MY_VAR\") PHP getenv(\"MY_VAR\") Play! Framework 1 \u0026 Play! Framework 2 System.getenv(\"MY_VAR\") or ${MY_VAR} in application.conf Python os.getenv(\"MY_VAR\") Ruby ENV[\"MY_VAR\"] Rust std::env::var(\"MY_VAR\") Scala System.getenv(\"MY_VAR\") .NET System.Environment.GetEnvironmentVariable(\"MY_VAR\") ","settings-you-can-define-using-environment-variables#Settings you can define using environment variables":"We use environment variables for some settings:\nCC_DISABLE_BUILD_CACHE_UPLOAD: allows you to ask that the cache archive is neither created nor uploaded after the build process. Thus, restarts won’t be speeded up, as the build process will be launched each time.\nIGNORE_FROM_BUILDCACHE: allows you to specify paths to ignore when the build cache archive is created. Must be relative to your application root. (e.g. foo/bar:foo/baz where bar or baz can be either a directory or a file)\nCC_OVERRIDE_BUILDCACHE: allows you to specify paths that will be in the build cache. Only those files/directories will be cached (e.g. foo/bar:foo/baz where bar or baz can be either a directory or a file).","special-environment-variables#Special environment variables":"Some variables are injected to the environment of your application when you deploy it, to inform you about the current context of your application and about the application itself.\nThey can be accessed as classic environment variables.\nAPP_ID: the ID of the application. Each application has a unique identifier used to identify it in our system. This ID is the same than the one you can find in the information section of your application.\nINSTANCE_ID: the ID of the current instance (scaler) of your application. It’s unique for each instance of your application and changes every time you deploy it.\nINSTANCE_TYPE: The type of the instance (scaler). Its value can be build or production. build is when your application is being built on a dedicated instance.\nCOMMIT_ID: the commit ID used as a base to deploy your application. As we remove the .git directory before the deployment (to avoid security problems), it can be used to know which version of your application is running on the server.\nAPP_HOME: The absolute path of your application on the server. Can be used to create absolute links in your application (e.g. ${APP_HOME}/foo/bar).\nCC_PRETTY_INSTANCE_NAME: A random string name generated for each instance using pokemon names.\nINSTANCE_NUMBER: See below\nWhat is the INSTANCE_NUMBER variable used for? This variable allows your application to differentiate each running node on the application level.\nIt will contain a different number for each instance of your application.\nFor example, if three instances are running, it will contain 0 for the first, 1 for the second and 2 for the third. It’s handy if you want to only run crons on 1 instance (e.g. only on instance 0).","specific-languages#Specific languages":" Docker Go Haskell Java-war Play-1 Play-2 Node.js Ruby PHP Python Rust Scala Elixir .NET .Static ℹ️ Variables are available at build time for runtimes that support build time instructions, such as Java WAR, Play! Framework 1, Play! Framework 2 or Scala. "},"title":"Environment variables"},"/developers/doc/develop/healthcheck/":{"data":{"":"","enable-health-check-during-deployment#Enable health check during deployment":"Enable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN "},"title":"Deployment healthcheck path"},"/developers/doc/develop/workers/":{"data":{"":"","workers#Workers":" ℹ️ Workers are not available for docker applications. You can run background tasks running in parallel of your application. They will be restarted automatically on error. Those are especially useful for environments where you can’t have long-running processes such as PHP, Ruby or Python.\nThe workers run in the same environment as your application. They are launched as services by systemd, in the application’s directory.\nAll you need to do is add one (or several) environment variables as such:\nCC_WORKER_COMMAND=my-awesome-worker Or\nCC_WORKER_COMMAND_0=my-awesome-worker CC_WORKER_COMMAND_1=my-other-worker By default, workers will be restarted if they exit with an error code. You can customise this behavior by setting the environment variable CC_WORKER_RESTART to one of always, on-failure (the default) or no.\nYou can define a delay to restart your worker with the environement variable CC_WORKER_RESTART_DELAY, the value is in seconds with a default value of 1. It will apply to all registered workers.\n⚠️ If the CC_WORKER_RESTART_DELAY value is too low and the restart policy is set to always, your worker might hit the restart burst limit, which may prevent your worker from being correctly restarted. If you want to have a restart delay less than 1 second and expect your script to restart multiple times in a very short time, please let us know on our support."},"title":"Workers"},"/developers/doc/find-help/":{"data":{"":" Support FAQ Troubleshooting "},"title":"Find Help"},"/developers/doc/find-help/faq/":{"data":{"":"","can-i-scp-something-in-a-vm#Can I \u003ccode\u003escp\u003c/code\u003e something in a VM":"","does-clever-cloud-support-tlsssl-https#Does Clever Cloud support TLS/SSL (HTTPS)?":"","how-can-i-disable-one-of-my-existing-applications#How can I disable one of my existing applications?":"","how-do-i-add-or-remove-members-in-my-organizations#How do I add or remove members in my organizations?":"","how-do-i-define-cron-jobs-for-my-application#How do I define cron jobs for my application?":"","how-do-i-report-an-application-that-is-in-violation-of-your-terms-and-conditions#How do I report an application that is in violation of your Terms and Conditions?":"","how-many-applications-can-i-create-with-clever-cloud#How many applications can I create with Clever Cloud?":"","how-to-get-the-users-ip-address#How to get the user\u0026rsquo;s IP address?":"","how-to-know-if-a-user-comes-from-a-secure-connection#How to know if a user comes from a secure connection?":"","how-to-setup-a-firewall-on-clever-cloud#How to setup a firewall on Clever Cloud?":"","how-to-setup-domain-names-i-own#How to setup domain names I own?":"","i-get-a-javalangunsupportedclassversionerror--unsupported-majorminor-version-error-how-can-i-fix-it#I get a \u003ccode\u003ejava.lang.UnsupportedClassVersionError : Unsupported major.minor version\u003c/code\u003e error. How can I fix it?":"","i-need-a-private-ssh-key-to-fetch-my-private-dependencies-how-do-i-do-that#I need a private ssh key to fetch my private dependencies. How do I do that?":"","i-need-to-convert-something-to-pdf-with-wkhtmltopdf#I need to convert something to PDF with \u003ccode\u003ewkhtmltopdf\u003c/code\u003e":"","i-received-an-email-saying-addon-my-add-on-disk-is-nearly-full-what-do-i-do#I received an email saying \u0026ldquo;Addon [my add-on] disk is nearly full\u0026rdquo;. What do I do?":"What is a Scaler? A _scaler_is an individual instance hosting your app. You can attribute one or more Scalers to your apps. Scalers come in many sizes based on each language requirements from Pico to XL.\nEach scaler is given a fixed set of resources.\nWhen enabling auto-scalability, you have to set a minimum and a maximum of active scalers in your apps settings. This way you can precisely control your monthly fee.\nWhat languages and frameworks are supported by Clever Cloud? Currently Clever Cloud supports:\nJava (Play Framework 1 \u0026 2, Maven, War files… ) Node.js PHP (see frameworks and CMS) Python (Django) Ruby Go Haskell Scala Rust Docker How many applications can I create with Clever Cloud? As many as you want. We’ve not set a limited number of apps by developer.\nHow to setup domain names I own? You can bind custom domain names to your applications. Please have a look at Custom Domain Names.\nHow can I disable one of my existing applications? Log in with your account to console.clever-cloud.com, and select the appropriate organization and app in the left column. Then click on the application name and select Overview. Click on the Stop button to stop your app.\nWhat type of content is allowed on Clever Cloud? Please refer to our Terms and Conditions, article 6, Obligations and responsibilities of the client.\nHow do I add or remove members in my organizations? Log in with your account to console.clever-cloud.com, and select the appropriate organization in the left panel. Then click on Members in the mid pane. You’ll see a list of the organization’s members. If your are an admin, you can revoke or grant permissions.\nHow do I report an application that is in violation of your Terms and Conditions? To report an application that is in violation of Clever Cloud’s Terms and Conditions, please contact us at abuse@clever-cloud.com.\nWe will investigate and contact the application’s owner over the violation if needed.\nDoes Clever Cloud support TLS/SSL (HTTPS)? Absolutely! For testing purposes, cleverapps.io domains support TLS out of the box. For custom SSL certificates, you can either order one from us or use an existing one. Have a look at installing SSL certificates, and feel free to contact us at contact@clever-cloud.com if you have questions.\nI’d like to have two applications available on the same domain name Please refer to prefix routing to learn how to have two applications share a domain name.\nHow do I define cron jobs for my application? See Cron Configuration File for more information.\nHow to know if a user comes from a secure connection? All connections are handled by load-balancers ahead of your applications and forwarded in plain http, you cannot rely on the server port to know the scheme used by the user.\nInstead, you can use the X-Forwarded-Proto HTTP header to get the information, it is set to either ‘http’ or ‘https’.\nℹ️ In order to use request.secure instead of using the header, you must add XForwardedSupport=all in your application.conf. ⚠️ In order to use request.secure instead of accessing the header, you must add trustxforwarded=true in your application.conf. PHP: $_SERVER auth variables are always empty, how do I make this work? It’s explained here.\nHow to get the user’s IP address? All connections are handled by load-balancers ahead of your applications and forwarded in plain http.\nSo if you get the REMOTE_ADDR or Client-IP header, you will only get the IP of the front load balancer that forwarded the user request.\nInstead of these headers you need to use the X-Forwarded-For HTTP header, which is set by our load balancer to the client’s address. Please remember that it is a list, containing the address of each proxy the request has been through, if the said proxy has modified the X-Forwarded-For header: Read the Wikipedia page for more informations\nWhen my application runs on multiple instances, how can I differentiate them? If your application needs to differentiate all the running nodes internally, you can use the INSTANCE_NUMBER environment variable.\nFor example, if 3 instances are running for your application, this environment variable will contain 0 on the first, 1 on the second and 2 on the third.\nI need a private ssh key to fetch my private dependencies. How do I do that? If your company manages its own artifacts in a private repository (like, you can only access them via git+ssh or sftp), and you need a private key to connect to the server, you can commit them in your application’s Clever Cloud repository and then add a clevercloud/ssh.json file.\nThe ssh.json file is documented here.\nI get a java.lang.UnsupportedClassVersionError : Unsupported major.minor version error. How can I fix it? If you get this error on a Java (or any JVM language) application, it means that your application was compiled with a newer Java version than the one used to run it.\nAs an example, if a Spring Boot application was compiled with Java 17 and run with Java 11, the following error will occur :\njava.lang.UnsupportedClassVersionError: org/springframework/boot/loader/JarLauncher has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 55.0\nBy default, Java 11 is used, but it can be changed. Please head over here for more information.\nFor reference, the table below lists the class file version for each major Java version (official doc) :\nJava version Class file version 7 51.0 8 52.0 11 55.0 17 61.0 21 65.0 I want SSH access to my server Clever Cloud does not give you access to a server or a VPS, it makes your application run. Each instance is started and configured automatically, and can be stopped at any moment.\nIf however, you still need SSH access for debugging purposes, please have a look at SSH access, but keep in mind that changes made on an instance are not persistent across deployments.\nI want to user Clever Cloud on my own premises, is that possible? Yes, since 2016 Clever Cloud is packaged for private datacenter. This offer called “Clever Cloud On Premises” is avaialble upon request: you can send a mail to sales@clever-cloud.com or visit https://www.clever-cloud.com/on-premises for more infos.\nWhere are my applications and add-ons located? Applications and add-ons are located in either Paris, France or Montreal, Canada. You can choose where you want it to be when you create an application and a Clever Cloud add-on.\nClever Cloud is based in Nantes, France.\nI want to run Kubernetes on top of Clever CLoud, is that possible? It’s currently not possible to use Kubernetes on our platform. It is however on our Roadmap.\nHow to setup a firewall on Clever Cloud? Specific firewall rules can be enabled on demand to the support or in case of attack.\nCan I scp something in a VM You cannot scp something to the VM, you can however easily scp something from the VM to the outside.\nI need to convert something to PDF with wkhtmltopdf wkhtmltopdf is available and fully functional but we deeply recommend to use use chromium headless instead.\nWhat is the timezone used by my application/add-on? All instances on Clever Cloud run on the UTC timezone. We recommend to handle all your dates in UTC internally, and only handle timezones when reading or displaying dates.\nI received an email saying “Addon [my add-on] disk is nearly full”. What do I do? A full disk can cause your database to crash or become unresponsive. We advise you to check how many free space there is. You might want to do one of the following:\nRemove data from your database Only you know your data!\nYou can take a snapshot of your database and export the obsolete data to a cold storage. Then you can remove records from your database, reindex your tables and try to perform a VACUUM operation if the database software allows it.\nMigrate your add-on to a bigger plan … Or to the same plan!\nYou can buy more disk space by migrating your add-on to a higher plan. If a VACUUM operation needs more disk that there is remaining, migrating to the same plan will clean up the file on disk and regain space.","i-want-ssh-access-to-my-server#I want SSH access to my server":"","i-want-to-run-kubernetes-on-top-of-clever-cloud-is-that-possible#I want to run Kubernetes on top of Clever CLoud, is that possible?":"","i-want-to-user-clever-cloud-on-my-own-premises-is-that-possible#I want to user Clever Cloud on my own premises, is that possible?":"","id-like-to-have-two-applications-available-on-the-same-domain-name#I\u0026rsquo;d like to have two applications available on the same domain name":"","php-_server-auth-variables-are-always-empty-how-do-i-make-this-work#PHP: \u003ccode\u003e$_SERVER\u003c/code\u003e auth variables are always empty, how do I make this work?":"","what-is-a-scaler#What is a Scaler?":"","what-is-the-timezone-used-by-my-applicationadd-on#What is the timezone used by my application/add-on?":"","what-languages-and-frameworks-are-supported-by-clever-cloud#What languages and frameworks are supported by Clever Cloud?":"","what-type-of-content-is-allowed-on-clever-cloud#What type of content is allowed on Clever Cloud?":"","when-my-application-runs-on-multiple-instances-how-can-i-differentiate-them#When my application runs on multiple instances, how can I differentiate them?":"","where-are-my-applications-and-add-ons-located#Where are my applications and add-ons located?":"","where-are-my-backups-stored#Where are my backups stored?":"Clever Cloud store all your backups on Cellar. Cellar has a replication system to protect the data stored inside. It create three copies of your backups, each stored in a different datacenters in the PAR region.\nThis way, even if one datacenter has an accident, your backup are still safe in two different datacenters."},"title":"FAQ"},"/developers/doc/find-help/support/":{"data":{"":"We provide basic support free-of-charge to all our users, even those who are not paying customers.","critical-application-support#Critical application support":"Clever Cloud offers a premium support option providing 24/7 a direct line to our team of support engineers. Our team’s focus is investigating and solving new problems, getting feedback on the service and working hard to improve the core service.\nGet more information and contact our sales team at:\nsales@clever-cloud.com ","email#Email":"Seek help by querying us by email, allowing you to quickly gain answers to your Clever Cloud specific questions and open a ticket directly with our support staff. We will respond to your email within a few hours, or two business days in the worst case.\nsupport@clever-cloud.com ","ticket-center#Ticket Center":"You can find in the console a button to start a conversation with our engineers. For each new ticket it will create a new thread, on a specific subject. Therefore, you can create several tickets for each issue.\nIf you open a ticket inside an organisation with members, they will be added to the discussion by e-mail.\nFeel free to use it when this service available, from 9 a.m to 6 p.m CEST+2 during open business days."},"title":"Support"},"/developers/doc/find-help/troubleshooting/":{"data":{"":" If you’re having trouble deploying applications or with with git, this section is for you. From git issues to configuration errors, problems can arise at different stages of your deployments. ","deployments-issues#Deployments issues":" Activating the troubleshooting mode Sometimes, when something goes wrong during the deployment, it can be hard to find out what happens. The troubleshoot mode allows you to keep the instances up while you find out what has happened. Additionally, the troubleshoot mode increases the overall verbosity of the deployment process.\nTo enable this mode, simply add CC_TROUBLESHOOT=true to your environment variables.\nNode application failed to deploy silently This kind of silent error may be due to the server port your have setup in your application. Make sure your application is listening on port 8080. Most of the time, this simple line could do the trick in your main JS file:\n// Listen on port 8080 server.listen(8080); ","git-related-issues#Git-related issues":" Some files disappear after an application restart Clever Cloud use Git to transfer your code and application’s assets from your local host to your scaler. If your application writes files on the local file system, those files are not committed: so you can’t save these files from a instance to an other.\nFor most of Cloud providers, the use of the file system is not a good practice. But we know it could be sometimes pretty useful. That’s why we provide an on-demand file system, easily pluggable to your app. In that case, your files will not be stored on the Git file system, but on a clustered file system, dedicated to it, accessible via FTP. This is the FS Bucket add-on.\nFollow the File System buckets documentation page to set up an FS Bucket for your application.\nTroubleshooting empty repository git error In some cases, git may display this type of error message:\nCloning into 'project'... warning: You appear to have cloned an empty repository. Checking connectivity... done. This usually means that you created an application and asked to start it in the console without having pushed any source code to it before.\nUnder the Clever Cloud console, in your application’s information menu you will find a deployment url. Add it to your local repository git remotes with $ git remote add clever \u003cyour deployment url\u003e. You can now push your commits to the new remote with $ git push clever master.\nIt may also be because you are working on another branch than master and pushed this specific branch to Clever Cloud and you encountered this error:\nremote: You tried to push to a custom branch. remote: This is not allowed. remote: error: hook declined to update refs/heads/\u003cyourSpecificBranchName\u003e ... error: failed to push some refs to '\u003cyourSpecificBranchName\u003e' Clever Cloud uses the master branch to deploy your application but this does not mean that you cannot use another one on your computer. What differs if you use another branch than master on your computer is that you need to explicitly tell Clever to consider the specific branch as the master one.\ngit push \u003ccleverRemote\u003e \u003cyourSpecificBranchName\u003e:master If you called the Clever Cloud remote clever and your local branch is production, this becomes\ngit push clever production:master Troubleshooting ‘Not a git repository’ error fatal: Not a git repository (or any of the parent directories) This means that the folder in which you are is not a git repository. In your console, at the root of your project, type $ git init. This will create a new git repository for your folder locally. Link it to Clever Cloud by going under the Clever Cloud console. In your application’s information menu you will find a deployment url. Add it to your local repository git remotes with $ git remote add clever \u003cyour deployment url\u003e. You can add all your files with $ git add ., then you need to commit the files with $ git commit -m \"\u003cyour commit message\u003e\". You will finally push your code with $ git push clever master.\nTroubleshooting ‘fatal: ‘clever’ does not appear to be a git repository’ “clever” is a name used in our examples to represent the Clever Cloud servers. In order to be able to use the same name for yourself, you will need to create a git remote named clever like this:\ngit remote add clever \u003cyour-git-deployment-url\u003e You can find your deployment url under the Clever Cloud console in your application’s information menu.\nFail to push to a repository It might be because your SSH agent is not properly configured. Please check the SSH documentation page. ","moderation#Moderation":" What is moderation? Moderation means your account is not accessible anymore. You might have broken some important rules of Clever Cloud’s General Terms of Use.\nYou are not allowed to create apps and add-ons, and run your current apps.\nPossible reasons why your app has been moderated The main reasons why your account has been moderated are:\nYou run some forbidden apps such as those described on this page You have not paid your pending invoices older than 30 days Clever Cloud system considers the lack of personal information or missing payment information as suspicious Our payment platform has spotted you as emitting fraudulent payments. How to recover your application online? Contact Clever Cloud’s Support team at support@clever-cloud.com to explain what your apps do.\nEnsure all your pending invoices are paid.\nHow to recover your data? In case of a pending invoice aged more than 30 days, Clever Cloud might delete your apps and add-ons. However, we keep backups for 30 days after deletion.\nYou have to pay all of your pending invoices to recover your data.","others-issues#Others issues":" Missing GitHub organization on the application creation page GitHub does not give us access to organizations created or joined after you’ve linked your GitHub account to Clever Cloud (which is a good thing). So you need to let the Clever Cloud API access it. You can do that on https://GitHub.com/settings/applications.\nYou can of course reach to support@clever-cloud.com if this page was not helpful enough.\nMy application is not accessible for an unknown reason Check the status of the services on clevercloudstatus.com. The support team is also there to help you identify any potential errors or misconfiguration. There are a lot of open ports, according to a port scan. If you tried to scan your domain, you may not only have scanned your app, but also several public load balancers. Here is an explanation of the different port you may see.\nPort 9999 : Zabbix uses this port to monitor the hypervisor. Ports 5000 to 6000 : The TCP redirection feature uses these ports to work. If you notice a port within this range open but haven’t enabled the feature, it indicates that another app on the same hypervisor is using it. The load balancer assigns a unique port to each app, ensuring that your app is securely isolated. You can be assured that other users can’t access your app through this port. Port 3000 : Juggernaut, the daemon torrent for the VM images use this port. Ports 1080 and 1081 : Those are necessary for the reverse-proxy Sōzu to be able to redirect traffic to your application. Port 1080 is for HTTP and 1081 for HTTPS Port 80 and 443 : Your app use these ports to receive HTTP and HTTPS traffic "},"title":"Troubleshooting"},"/developers/doc/marketplace/":{"data":{"":"Clever Cloud allows its Marketplace partners to provide services as add-ons with revenue sharing. Thus, they can be available to purchase and provision from the Console, Clever Tools, the API or other integrations such as the Terraform provider.\nYou want to help us to offer more services to our users? Just reach us: partnership@clever-cloud.com. Then, you will be able to use our dedicated tools and APIs to provide your service as an add-on, whether they’re hosted on Clever Cloud or not.\nAdd-on Manifest: to provide your service as an add-on Add-on provider requests: to provision, modify or delete add-ons Add-on infos API: to list provisioned add-ons and get detailed information about them ","add-on-infos-api#Add-on Infos API":"This is the API Clever Cloud provides to allow you to list provisioned add-ons and get detailed information about them.\ncurl -XGET https://api.clever-cloud.com/v2/vendor/apps -u addon-name:44ca82ddf8d4e74d52494ce2895152ee List all add-ons provided by you GET /vendor/apps Response Body: [ { \"provider_id\": \"addon-name\", \"addon_id\": \"addon_xxx\", \"callback_url\": \"https://api.clever-cloud.com/v2/vendor/apps/addon_xxx\", \"plan\": \"test\", \"owner_id\": \"user_foobar\" }, { \"provider_id\": \"addon-name\", \"addon_id\": \"addon_yyy\", \"callback_url\": \"https://api.clever-cloud.com/v2/vendor/apps/addon_yyy\", \"plan\": \"premium\", \"owner_id\": \"orga_baz\" } ] provider_id - Should be the same as the “id” field of your uploaded manifest.\naddon_id - The add-on’s id from Clever Cloud’s POV.\ncallback_url - URL to call to get more informations about this add-on.\nplan - The current plan of this add-on.\nowner_id - The id of the owner that provisioned the add-on. This should never change.\nGet information about a specific add-on Caution: this endpoint is not available during the provisioning call. If you want information, you need to reply to the provisioning call, then you can call this endpoint.\nGET /vendor/apps/{addonId} Response Body: { \"id\": \"addon_xxx\", \"name\": \"My addon-name instance\", \"config\": {\"MYADDON_URL\": \"http://myaddon.com/52e82f5d73\"}, \"callback_url\": \"https://api.clever-cloud.com/v2/vendor/apps/addon_xxx\", \"owner_email\": \"user@example.com\", \"owner_id\": \"orga_baz\", \"owner_emails\": [\"user@example.com\", \"foobar@baz.com\"], \"region\": \"eu\", \"domains\": [] } This endpoint gives you more information about a provisioned add-on.\nid - The add-on id from Clever Cloud’s POV.\nname - The name the user gave to this add-on in the Clever Cloud dashboard.\nconfig - Config vars as you defined during the provision call.\ncallback_url - The URL you just called.\nowner_email - One of the owner’s email address.\nowner_emails - All the owner’s email addresses.\nowner_id - The id of the owner that provisioned the add-on. This should never change.\nregion - The region this add-on is located in. As for now, we only support “eu”.\ndomains - Originally the domains names for the application owning the add-on. We return an empty list.\nUpdate the configuration variables for an add-on PUT /vendor/apps/{addonId} Request Body: { \"config\": { \"ADDON_NAME_URL\": \"http://myaddon.com/ABC123\" } } Response Status: 200 OK The object should only contain the config object your API returned during the provisioning.\nℹ️ This endpoint is not available during the provisioning call. You need to reply to the provisioning call, then you can call this endpoint. Sample code #!/usr/bin/env/python # -*- coding:utf-8 -*- \"\"\" api.py \"\"\" from flask import Flask, redirect, Response, jsonify, request import auth import provision app = Flask(__name__) @app.route('/') def index(): \"\"\" Render the home template \"\"\" return redirect(\"https://google.com/\") @app.route('/clevercloud/resources', methods=['POST']) @auth.requires_auth def clevercloud_create_resource(): data = request.json msg = provision.add(**data) return jsonify(msg) @app.route('/clevercloud/resources/\u003cstring:id\u003e', methods=['DELETE','PUT']) @auth.requires_auth def clevercloud_action_resource(id): data = request.json if request.method == 'POST': msg = provision.del(id,**data) if request.method == 'PUT': msg = provision.update(id,**data) return jsonify(msg) @app.route('/clevercloud/sso/login') def clevercloud_sso_login(): return Response(status=200) if __name__ == \"__main__\": app.run(host='0.0.0.0',port=9000,debug=True) ","add-on-manifest#Add-on Manifest":"First, provide a JSON manifest file that describes your add-on:\n{ \"id\": \"addon-name\", \"name\": \"Addon Name\", \"api\": { \"config_vars\": [ \"ADDON_NAME_MY_VAR\" ], \"regions\": [ \"eu\" ], \"password\": \"44ca82ddf8d4e74d52494ce2895152ee\", \"sso_salt\": \"fcb5b3add85d65e1dddda87a115b429f\", \"production\": { \"base_url\": \"https://yourservice.com/clevercloud/resources\", \"sso_url\": \"https://yourservice.com/clevercloud/sso/login\" }, \"test\": { \"base_url\": \"http://localhost:9000/clevercloud/resources\", \"sso_url\": \"http://localhost:9000/clevercloud/sso/login\" } } } Fields\nid - An ID for your add-on. All lower case, no spaces or punctuation. Underscores and dashes are allowed. This can’t be changed after the first push. It is also used for HTTP basic auth when making provisioning calls.\nname (Optional) - A human-readable name for your add-on. You will be able to change it later in the dashboard, so you don’t even have to provide it right now.\napi/config_vars - A list of configuration variables that will be returned on provisioning calls. Each config_var name must start with the capitalized, add-on id with underscores, as in the example.\napi/password - Password that Clever Cloud will send in HTTP basic auth when making provisioning calls. You should generate a long random string for that field.\napi/sso_salt - Shared secret used in single sign-on between the Clever Cloud admin panel and your service’s admin panel. You should generate a long random string for that field.\napi/regions - The list of geographical zones supported by your add-on. It cannot be empty. As for now, it MUST contain the element “eu”. More will be supported.\napi/production/base_url - The production endpoint on which Clever Cloud sends actions requests (provision, deprovision, and plan change).\napi/production/sso_url - The production endpoint for single sign-on.\napi/test/base_url - The test endpoint on which Clever Cloud sends actions requests. Used to test your service when you create an add-on provider. After the add-on creation,api/production/base_url is used.\napi/test/sso_url - The test endpoint for single sign-on. Used to test your service when you create an add-on provider. After that, the api/production/sso_url is used.","add-on-provider-requests#Add-on Provider requests":"When a Clever Cloud’s customer interacts with your add-on, you’ll receive requests on your base_url API endpoint. The following sections describe the requests you’ll receive and the responses you should send.\nProvisioning When a customer installs your add-on, Clever Cloud issues a POST request to your service to provision a resource for his app.\nThe request will be the following:\nRequest: POST {base_url} Request Body: { \"addon_id\": \"addon_xxx\", \"owner_id\": \"orga_xxx\", \"owner_name\": \"My Company\", \"user_id\": \"user_yyy\", \"plan\": \"basic\", \"region\": \"EU\", \"callback_url\": \"https://api.clever-cloud.com/v2/vendor/apps/addon_xxx\", \"logplex_token\": \"logtoken_yyy\", \"options\": {} } Response Body: { \"id\": \"myaddon_id\", \"config\": { \"ADDON_NAME_MY_VAR\": \"some value\" }, \"message\": \"Some provisioning message\" } The request body contains the following fields:\naddon_id - The id we give to your add-on to identify it on our side.\nowner_id - The id of the customer this add-on will belong to.\nowner_name - The name of the customer. (Actually, the name of the organisation)\nuser_id - The id of the user that is performing the action of provisioning this add-on. (The user will do it for the account of owner_id).\nplan - The slug field for the plan the user chose. You can create plans in the dashboard once your add-on manifest has been uploaded to the Clever Cloud platform. We send you the slug of the given plan, not its name.\nregion - The region to provision the add-on. As for now, only “EU” will be sent.\ncallback_url - The URL you can use to get informations about the add-on and the user. This URL is available as soon as the provisioning is done. You can’t use this URL during the POST call.\nlogplex_token - Deprecated, don’t use it.\noptions - String -\u003e String map with options.\nThe response body contains the following fields:\nid - The add-on id as seen from your side. It MUST be a String.\nconfig (Optional) - A String -\u003e String map with value for each config_var defined in your manifest. A key that is not in your config_vars will be ignored.\nmessage (Optional) - A creation message we will display in the dashboard.\nDeprovisioning When a customer deletes your add-on, Clever Cloud issues a DELETE request to your service to deprovision a ressource for his app.\nThe request will be the following:\nRequest: DELETE {base_url}/{addon_id} Request Body: none Response Status: 200 addon_id - This is the same as the id field set in the response to the provisioning call. Plan change When a customer wants to change its add-on’s plan, Clever Cloud issues a PUT request to your service.\nThe request will be the following:\nRequest: PUT {base_url}/{addon_id} Request Body: { \"addon_id\": \"addon_xxx\", \"plan\": \"premium\" } Response Body: { \"config\": { ... }, \"message\": \"your message here\" } addon_id - This is the same as the id field set in the response to the provisioning call. The request body contains:\naddon_id - The add-on’s id as seen from our side.\nplan - The name of the new plan.\nThe response body contains:\nconfig - The value for the new config map. Same constraints as in the provisioning response.\nmessage - A message displayed in our dashboard.\nExamples You can find templates for add-on providers in various languages on GitHub:\nNode.js Scala with Play! Framework 2 ","authentication#Authentication":"To secure the calls to the API, please provide a HTTPS connection and use a Basic authentication. The username must be your provider ID (addon-name in our example). The password must be the password value set in your manifest.\nYour provider API must check that all calls to it are authenticated with this user/password combination. If the authentication fails, you should return a 401 HTTP status code.\nSample with Flask in Python from functools import wraps from flask import request, Response def check_auth(username, password): \"\"\"This function is called to check if a username / password combination is valid. \"\"\" return password == '44ca82ddf8d4e74d52494ce2895152ee' def authenticate(): \"\"\"Sends a 401 response that enables basic auth\"\"\" return Response( 'Could not verify your access level for that URL.\\n' 'You have to login with proper credentials', 401, {'WWW-Authenticate': 'Basic realm=\"Poney required\"'}) def requires_auth(f): @wraps(f) def decorated(*args, **kwargs): auth = request.authorization if not auth or not check_auth(auth.username, auth.password): return authenticate() return f(*args, **kwargs) return decorated ","sso#SSO":"Your service probably has a web UI admin panel that your users log into to manage and view their resources. Clever Cloud customers will be able to access the admin panel for their resource if you implement single sign-on (SSO).\nClever Cloud will generate a single sign-on token by combining the salt (a shared secret), timestamp, and resource ID. The user’s browser will be redirected to your site with this token. Your site can confirm the authenticity of the token, then set a cookie for the user session and redirect them to the admin panel for their resource.\nWhen the user clicks your add-on in their add-on menu, they will be directed via HTTP POST to a URL defined in your manifest.\nPOST \u003cproduction/sso_url\u003e Request Body: id=\u003cid\u003e\u0026token=\u003ctoken\u003e\u0026timestamp=\u003ctimestamp\u003e\u0026nav-data=\u003cnav-data\u003e\u0026email=\u003cemail\u003e The hostname or sso_url comes from your add-on manifest The id is the ID for the previously provisioned resource The timestamp is a millisecond timestamp. You SHOULD verify that it’s not older than 15 minutes The token is computed using the formula below The nav-data contains information like the current app name and installed add-ons for Clever Cloud’s Console. Token The token field in the SSO call, is created as follows:\nsha1sum(id + ':' + sso_salt + ':' + timestamp) Where:\nid - The id of the connecting add-on. This is the id you returned on the provision call.\nsso_salt - The sso_salt field defined in your manifest.\ntimestamp - The timestamp field of the sso request.\nSample in Python from hashlib import sha1 import time id = \"1234\" salt = \"fcb5b3add85d65e1dddda87a115b429f\" timestamp = str(time.time()) token = sha1(id + ':' + salt + ':' + timestamp).hexdigest() print token This will return:\n'aca601ba464437cbaa12b2fedd7db755c32ddb5e' "},"title":"Marketplace APIs \u0026 Tools"},"/developers/doc/metrics/":{"data":{"":"","access-logs-metrics#Access Logs metrics":"","consumption-metric#Consumption metric":"Consumption can also be inferred by our metrics. We provide some helper macros in the Warp 10 documentation.\nConsumption unit is in second.\nThe following script provides the whole consumption from between start and end timestamps for all applications under an organisation.\n'\u003cREAD TOKEN\u003e' '\u003cORGANISATION ID\u003e' \u003cSTART TIMESTAMP\u003e \u003cEND TIMESTAMP\u003e @clevercloud/app_consumption ","display-metrics#Display metrics":"","monitoring-metrics#Monitoring\u0026rsquo; metrics":" ⚠️ Clever Cloud Metrics is still in beta. In addition to logs, you can have access to metrics to know how your application behaves. By default, system metrics like CPU and RAM use are available, as well as application-level metrics when available (apache or nginx status for instance).\nDisplay metrics For each application, there is a Metrics tab in the console.\nOverview pane To get a quick overview of the current state of your scalers, the overview pane displays the current CPU, RAM, Disk and Network activity. On supported platforms, you can also have access to requests / second, and GC statistics.\nDirect link from Overview pane to app dashboard in Grafana Advanced pane Advanced metrics allow you to access all gathered metrics, on a specified time range.\nCustom queries All metrics are stored in Warp 10, so you can explore data directly with the quantum interface, with WarpScript.\nFor instance, you can derive metrics over time, do custom aggregations or combine metrics.\nGet alerts You can set up alerts in Grafana to be notified on your apps and add-ons consumption. This can be useful to monitor databases capacity or latency.\nAlert option from the general menu in Grafana For example, check this tutorial on how to create Slack alerts with Grafana.\nAccess Logs metrics All your applications access logs are pushed to Warp 10. You are now able to process them directly in the console in the Metrics tab of your applications.\nRequest rate We provide a request rate metric. It is an average of the access logs request count over 1 minute. It is updated every 30 second.\nThis can be reached using the Warp 10 class: request_rate.\nThere are the same labels than for others metrics (see monitoring-metrics)\nAccess Log data model Access logs are defined in the 'accessLogs' Warp 10 class and there are three Warp 10 labels available:\nowner_id: Organisation ID app_id : Application ID (ex: app_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx ) or Addon ID (ex: postgresql_xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx) adc or sdc adc (Application Delivery Controller) are used for HTTP connections sdc (Service Delivery Controller) are used for TCP connections Available addons for the field addon_id are mysql, redis, mongodb and postgresql addons.\n⚠️ Add-ons on shared plans (usually DEV plans) do not provide access logs. There are no recorded access logs in case of a direct access to an add-on To reduce space used to store access logs, we defined the following key-value models.\nKey-Value model for applications AccessLogs data models for application. Using HTTP protocol.\nt -\u003e timestamp a -\u003e appId or addonId o -\u003e ownerId i -\u003e instanceId ipS -\u003e ipSource pS -\u003e portSource # 0 if undefined s -\u003e source lt -\u003e latitude lg -\u003e longitude ct -\u003e city co -\u003e country ipD -\u003e ipDestination pD -\u003e portDestination # 0 if undefined d -\u003e destination lt -\u003e latitude lg -\u003e longitude ct -\u003e city co -\u003e country vb -\u003e verb path -\u003e path bIn -\u003e bytesInt bOut -\u003e bytesOut h -\u003e hostname rTime -\u003e responseTime sTime -\u003e serviceTime scheme -\u003e scheme sC -\u003e statusCode sT -\u003e statusText tS -\u003e Haproxy termination_state adc -\u003e Reverse proxy hostname w -\u003e workerId (Sozu) r -\u003e requestId (Sozu) tlsV -\u003e tlsVersion (Sozu) Key-Value model for addons AccessLogs data models for addons. Using TCP protocol.\nt -\u003e timestamp a -\u003e appId or addonId o -\u003e ownerId i -\u003e instanceId ipS -\u003e ipSource pS -\u003e portSource # 0 if undefined s -\u003e source lt -\u003e latitude lg -\u003e longitude ct -\u003e city co -\u003e country ipD -\u003e ipDestination pD -\u003e portDestination # 0 if undefined d -\u003e destination lt -\u003e latitude lg -\u003e longitude ct -\u003e city co -\u003e country tS -\u003e Haproxy termination_state sdc -\u003e Reverse proxy hostname sDuration -\u003e total session duration time in millis Queries examples The main ways to use accessLogs data is to FETCH over it and get interesting values by a JSON processing.\nℹ️ Look at fetch_accessLogs_key_v0 macro to have a convenient way to explore access log data, see Warp 10 documentation. // Fetch on the 'accessLogs' class for your application id as labels [ '\u003cREADTOKEN\u003e' 'accessLogs' { 'app_id' '\u003cAPP_ID\u003e' } NOW 30 s ] FETCH // get the path field \u003c% DROP VALUES \u003c% DROP JSON-\u003e 'path' GET %\u003e LMAP %\u003e LMAP FLATTEN // distinct|unique results UNIQUE A convenient way to integrate the intercepted data in a workflow is to use WarpScript. It is a good idea to use the GTS format to be able to apply all GTS transformation on the output.\nIn the following example, we get the accessLogs status codes and create a GTS as an output to be able to use FILTER or any other transformation on it a second time.\n// Get all application status code for the last hour [ '\u003cREADTOKEN\u003e' 'accessLogs' { 'app_id' '\u003cAPPLICATION ID\u003e' } NOW 10 m ] FETCH \u003c% DROP 'gts' STORE // output new GTS NEWGTS $gts \u003c% DUP // store the timestamp 0 GET 'ts' STORE // store the status code -1 GET JSON-\u003e 'sC' GET 'sC' STORE // Keep the same labels in the output GTS than in the input ones $gts LABELS RELABEL // Add timestamp and status code value to the output GTS [ $ts NaN NaN NaN $sC ] ADDVALUE %\u003e FOREACH %\u003e LMAP An example using the provided Clever Cloud macro to straightforward access to the access logs input byte :\n'\u003cREAD TOKEN\u003e' { 'app_id' 'id' } 'bIn' NOW 1 h @clevercloud/fetch_accessLogs_key_v0 or to get the latitude of the destination, which is a nested data:\n'\u003cREAD TOKEN\u003e' { 'app_id' 'id' } 'd.lt' NOW 1 h @clevercloud/fetch_accessLogs_key_v0 Monitoring’ metrics All applications and VMs instances behind are monitored. Data is sent to Warp 10, a Geotimes series database. All metrics can be processed directly in the console in the Metrics tab of your applications or by the Clever Cloud Warp 10 endpoint.\nMonitoring data model All metrics data follow the same schema in warp 10. Each class represents a specific metric. The context is provided by the Warp 10 labels.\nClass values and Labels Overview A telegraf daemon supplies most metrics.\nEach metric is recorded as a Warp 10 class. Labels provide additional information about the VMs like instances id, organisation id, reverse proxy used.\nLabels In metrics’ data, mains labels would be :\nowner_id : A unique ID by organisation app_id : A unique ID of application host : HV id hosting the VM instance adc : Reverse proxy ID for http connexion (ie: applications) sdc : Reverse proxy ID for tcp connexion (ie: addons) vm_type : volatile or persistent. Is it a stateless application or a stateful add-on deployment_id : ID of the deployment ⚠️ For some specific metrics. Some labels could miss. Classes Telegraf provide lots of metrics described in their documentation.\nBelow, the list of all Warp 10 classes representing Telegraf metrics :\nMetric Metric conntrack.ip_conntrack_count mem.swap_free conntrack.ip_conntrack_max mem.swap_total cpu.usage_guest mem.total cpu.usage_guest_nice mem.used cpu.usage_idle mem.used_percent cpu.usage_iowait mem.vmalloc_chunk cpu.usage_irq mem.vmalloc_total cpu.usage_nice mem.vmalloc_used cpu.usage_softirq mem.wired cpu.usage_steal mem.write_back cpu.usage_system mem.write_back_tmp cpu.usage_user net.bytes_recv disk.free net.bytes_sent disk.inodes_free net.drop_in disk.inodes_total net.drop_out disk.inodes_used net.err_in disk.total net.err_out disk.used net.packets_recv disk.used_percent net.packets_sent http_response.http_response_code net_response.response_time http_response.response_time net_response.result_code http_response.result_code net_response.result_type http_response.result_type netstat.tcp_close kernel.boot_time netstat.tcp_close_wait kernel.context_switches netstat.tcp_closing kernel.entropy_avail netstat.tcp_established kernel.interrupts netstat.tcp_fin_wait1 kernel.processes_forked netstat.tcp_fin_wait2 mem.active netstat.tcp_last_ack mem.available netstat.tcp_listen mem.available_percent netstat.tcp_none mem.buffered netstat.tcp_syn_recv mem.cached netstat.tcp_syn_sent mem.commit_limit netstat.tcp_time_wait mem.committed_as netstat.udp_socket mem.dirty processes.blocked mem.free processes.dead mem.high_free processes.idle mem.high_total processes.paging mem.huge_page_size processes.running mem.huge_pages_free processes.sleeping mem.huge_pages_total processes.stopped mem.inactive processes.total mem.low_free processes.total_threads mem.low_total processes.unknown mem.mapped processes.zombies mem.page_tables procstat_lookup.pid_count mem.shared system.load1 mem.slab system.load1_per_cpu mem.swap_cached jvm.statsd-jvm-profiler_heap_ps-old-gen_max.value jvm.statsd-jvm-profiler_pending-finalization-count.value jvm.statsd-jvm-profiler_nonheap_total_committed.value jvm.statsd-jvm-profiler_loaded-class-count.value jvm.metrics_jvm_heapMemoryUsage_used.value jvm.statsd-jvm-profiler_gc_PS_Scavenge_count.value jvm.metrics_jvm_nonHeapMemoryUsage_used.value jvm.statsd-jvm-profiler_nonheap_metaspace_init.value jvm.statsd-jvm-profiler_nonheap_total_used.value jvm.statsd-jvm-profiler_heap_ps-survivor-space_used.value jvm.statsd-jvm-profiler_heap_ps-eden-space_init.value jvm.statsd-jvm-profiler_gc_PS_MarkSweep_time.value jvm.statsd-jvm-profiler_nonheap_total_max.value jvm.statsd-jvm-profiler_heap_ps-eden-space_max.value jvm.statsd-jvm-profiler_nonheap_compressed-class-space_max.value jvm.statsd-jvm-profiler_heap_total_init.value jvm.statsd-jvm-profiler_nonheap_code-cache_used.value jvm.statsd-jvm-profiler_nonheap_metaspace_used.value jvm.statsd-jvm-profiler_nonheap_compressed-class-space_init.value jvm.statsd-jvm-profiler_nonheap_metaspace_max.value jvm.statsd-jvm-profiler_gc_PS_MarkSweep_count.value jvm.statsd-jvm-profiler_heap_ps-eden-space_used.value Examples and usages From the metrics tab on the console. You can either open a Quantum console, an online WarpScript editor, or either send your WarpScript by your own way on the Warp 10 endpoint (provided by Quantum).\nMore information about Quantum and Warp 10 in our documentation.\nFor example, you could fetch the memory usage of an application for the last hour. Smoothed by a data average by minute.\n⚠️ Computation can be time intensive. // Fix the NOW timestamp to have the same on over the script NOW 'NOW' STORE // fetch data over 1 hour [ \u003cREAD TOKEN\u003e 'mem.available' { 'app_id' '\u003cAPPLICATION ID\u003e' } $NOW 1 h ] FETCH // Average the data by bucket of 1 min from the last point timestamped at NOW [ SWAP bucketizer.mean $NOW 1 m 0 ] BUCKETIZE // From the instance granularity to application granularity. Timestamps to timestamps merge [ SWAP [ 'app_id' ] reducer.mean ] REDUCE ","publish-your-own-metrics#Publish your own metrics":"We currently support two ways to push / collect your metrics: the statsd protocol and prometheus.\nThe statsd server listens on port 8125. You can send metrics using regular statsd protocol or using an advanced one as described here.\nWe also support Prometheus metrics collection, by default our agent collects exposed metrics on localhost:9100/metrics.\nIf needed, you can override those settings with the two following environment variables:\nCC_METRICS_PROMETHEUS_PORT: Define the port on which the Prometheus endpoint is available CC_METRICS_PROMETHEUS_PATH: Define the path on which the Prometheus endpoint is available As with Prometheus the exposed host can be the same as the application deployed, you can use a basic authentication to collect the metrics with the two following environment variables:\nCC_METRICS_PROMETHEUS_USER: Define the user for the basic auth of the Prometheus endpoint CC_METRICS_PROMETHEUS_PASSWORD: Define the password for the basic auth of the Prometheus endpoint For large custom set of metrics to collect, the default response timeout of the /metrics query is 3 seconds. You can update it with the following environment variable:\nCC_METRICS_PROMETHEUS_RESPONSE_TIMEOUT: Define the timeout in seconds to collect the application metrics. This value must be below 60 seconds as data are collected every minutes. To access your metrics from Warp10 you need to use the prefix prometheus. or statsd. based on what you used to publish your metrics.\nYou can use this query to show all collected metrics:\n[ 'TOKEN' '~prometheus.*' { 'app_id' 'app_xxxxxxxx' } NOW 5 m ] FETCH Node.js example You can use node-statsd to publish metrics:\n// npm install node-statsd const StatsD = require(\"node-statsd\"), client = new StatsD(); // Increment: Increments a stat by a value (default is 1) client.increment(\"my_counter\"); // Gauge: Gauge a stat by a specified amount client.gauge(\"my_gauge\", 123.45); Haskell example In Haskell, metrics are usually gathered with EKG. The package ekg-statsd allows to push EKG metrics over statsd.\nIf you’re using warp, you can use wai-middleware-metrics to report request distributions (request count, responses count aggregated by status code, responses latency distribution).\nEKG allows you to have access to GC metrics, make sure you compile your application with \"-with-rtsopts=-T -N\" to enable profiling.\n{-# LANGUAGE OverloadedStrings #-} -- you need the following packages -- ekg-core -- ekg-statsd -- scotty -- wai-middleware-metrics import Control.Monad (when) import Network.Wai.Metrics (WaiMetrics, metrics, registerWaiMetrics) import System.Metrics (newStore, registerGcMetrics) import System.Remote.Monitoring.Statsd (defaultStatsdOptions, forkStatsd) import Web.Scotty handleMetrics :: IO WaiMetrics handleMetrics = do store \u003c- newStore registerGcMetrics store waiMetrics \u003c- registerWaiMetrics store sendMetrics \u003c- maybe False (== \"true\") \u003c$\u003e lookupEnv \"ENABLE_METRICS\" when sendMetrics $ do putStrLn \"statsd reporting enabled\" forkStatsd defaultStatsdOptions store return () return waiMetrics main = do waiMetrics \u003c- handleMetrics scotty 8080 $ do middleware $ metrics waiMetrics get \"/\" $ html $ \"Hello world\" "},"title":"Metrics"},"/developers/doc/metrics/blackfire/":{"data":{"":"","blackfire-configuration#Blackfire configuration":"Necessary information Before setting up your app, be sure to have a Blackfire Account.\nConfiguration Add ENABLE_BLACKFIRE=true environment variable to load Blackfire extension. Add at least the CC_BLACKFIRE_SERVER_TOKEN and CC_BLACKFIRE_SERVER_ID environment variables.CC_BLACKFIRE_SERVER_ID. Optional configuration If you need to fine-tune agent settings, you can use the following environment variables:\nCC_BLACKFIRE_LOG_LEVEL CC_BLACKFIRE_MEMORY_LIMIT CC_BLACKFIRE_COLLECTOR CC_BLACKFIRE_TIMEOUT CC_BLACKFIRE_STATSD CC_BLACKFIRE_STATSD_PREFIX Usage Just redeploy your application on Clever Cloud for the changes to take effect. A few minutes later, your application will begin sending data to Blackfire. Once Blackfire receives the data, your application will be listed in the dashboard.","overview#Overview":"Blackfire can be used on Clever Cloud with PHP applications.\nBlackfire helps to improve web applications, performance at each step of its lifecycle: from development to test, staging and production."},"title":"Blackfire"},"/developers/doc/metrics/new-relic/":{"data":{"":"","new-relic-configuration#New Relic configuration":"Necessary information Before setting up your app, be sure to have a New Relic Account.\nConfiguration To configure your New Relic, you need to set the environment variables NEW_RELIC_LICENSE_KEY and NEW_RELIC_APP_NAME (optional).\nAlternatively you can create and add a ./clevercloud/newrelic.json file in your project, with the following fields:\n{ \"license\": \"licenceID\", \"appname\": \"NameOfYourApp(optional)\" } If the appname or NEW_RELIC_APP_NAME is not specified, we use your application id for the name.\nOptional configuration (PHP only) If you need to fine-tune agent settings, you can use the following environment variables:\nVariable CC_NEWRELIC_BROWSER_MONITORING_AUTO_INSTRUMENT CC_NEWRELIC_DISTRIBUTED_TRACING_ENABLED CC_NEWRELIC_ERROR_COLLECTOR_ENABLED CC_NEWRELIC_TRANSACTION_TRACER_ENABLED CC_NEWRELIC_TRANSACTION_TRACER_RECORD_SQL Usage Redeploy your application on Clever Cloud for the changes to take effect. A few minutes later, your application will begin sending data to New Relic. Once New Relic receives the data, your application will be listed in the dashboard.","new-relic-for-java-scala-and-php#New Relic for Java, Scala and PHP":"To use New Relic in Java, Scala or PHP instances, you need to configure it as it is provided directly inside the instances.\nℹ️ New Relic trigger auto-insertion of JavaScript fragments on PHP applications, for browser monitoring. You can disable it with newrelic.browser_monitoring.auto_instrument in .user.ini. Learn more on New Relic’s documentation. ","new-relic-for-nodejs-and-ruby#New Relic for Node.js and Ruby":"New Relic is very simple to install in a Node.js or Ruby application as it is a simple dependency. Install instructions for Node.js and Ruby are available in the New Relic documentation.","new-relic-for-python#New Relic for Python":"To use New Relic in Python, you have to add the newrelic dependency into your requirements.txt file.","overview#Overview":"New Relic can be used on Clever Cloud with Java, Node.js, PHP, Ruby and Scala applications.\nNew Relic is a software analytics company based in the United States. New Relic’s technology monitors Web and mobile applications in real-time that run in cloud, on-premise, or hybrid environments. You can easily setup a New Relic based monitoring on your application to monitor it and find performances problems."},"title":"New Relic"},"/developers/doc/metrics/warp10/":{"data":{"":"","endpoint#Endpoint":"The Clever Cloud Warp 10 endpoint is:\nhttps://c2-warp10-clevercloud-customers.services.clever-cloud.com/api/v0 You can find documentation about endpoint gateway here.\nYou can find the endpoint and an available token under the metric tab of your application\nYou can query our Warp 10 platform with your own script. Here’s a curl example :\ncurl -T \u003cPath/to/a/warpscript_file\u003e https://c2-warp10-clevercloud-customers.services.clever-cloud.com/api/v0/exec ⚠️ Do not forget the endpoint. exec in the previous example. ","macro#Macro":"Warp 10 provide a server side macro manager. It is a way to release some ready to use WarpScript. Hence, Clever Cloud provides some macros as helpers to avoid redundant and often need code.\nℹ️ More information on the Warp 10’ macros documentations. Consumption The following macros are helpers to compute consumption in seconds\napp_consumption Return the consumption in second by applications for a specific organisation. Start and End parameters can be either a timestamp in microseconds or an iso8601 date format.\n'\u003cREAD TOKEN\u003e' '\u003cORGANISATION ID\u003e' '\u003cSTART\u003e' '\u003cEND\u003e' @clevercloud/app_consumption orga_consumption Return all the consumption in second for a specific organisation. Start and End parameters can be either a timestamp in microseconds or an iso8601 date format.\n'\u003cREAD TOKEN\u003e' '\u003cORGANISATION ID\u003e' '\u003cSTART\u003e' '\u003cEND\u003e' @clevercloud/app_consumption Access Logs fetch_accessLogs_key_v0 We provide the following macro to easily and quickly deep dive into access logs data. As we store access log as a JSON value in a geotime series (metrics documentation here), this macro can be useful for straightforward access to a specific key. It allows you to fetch the accessLogs class and get only wanted value instead of the whole JSON.\n'\u003cREAD TOKEN\u003e' { 'app_id' 'id' } '\u003c1stLevelKey\u003e' NOW 1 h @clevercloud/fetch_accessLogs_key_v0 '\u003cREAD TOKEN\u003e' { 'app_id' 'id' } '\u003c1stLevelKey\u003e.\u003c2ndLevelKey\u003e' NOW 10 m @clevercloud/fetch_accessLogs_key_v0 More example in the metrics part of this documentation.\nNested keys can be reached using a dot (.) to represent the depth.\n'\u003cREAD TOKEN\u003e' '\u003cLABELS\u003e' '\u003cKEY\u003e' '\u003cSTART\u003e' '\u003cEND\u003e' @clevercloud/fetch_accessLogs_key_v0 ","main-concepts#Main concepts":"Warp 10 is a time series database. The notion of class, labels, longitude, latitude, altitude and value are used.\nA GTS is a GeoTime Serie defined by a class and some labels. They’re indexed and used to quickly retrieved the data.\nlabels is a kind of dictionary. That’s called a map under the warp10 terminology.\nA GTS may contain some values which have the following models : [ timestamp longitude latitude altitude value ]\nWarp 10 uses Warp Script. It’s a stack based language using reverse polish notation.\nThe metrics OVHcloud team built an other way to request Warp 10: https://github.com/ovh/tsl/ Warp 1O documentation is available on their website\nTime and duration in Warp 10 More information about date functions here, and time functions here.\nℹ️ The platform’s time unit is in microsecond. Duration is set by the followings symbols d : day h : Hour ms : millisecond ns : nanosecond ps : picosecond s : second us : microsecond w : week Date Allowed format :\nISO8601 Timestamp in microsecond Builtin function :\nNOW : get the current timestamp ISO8601 : Convert a string or a timestamp to a ISO8601 date format ","technical-constraints#Technical constraints":"The followings limits are defined in Warp 10. The soft one can be passed over by an AUTHENTICATE operation. The hard one is unsurpassable.\nWarpScript Operator Warp 10 limit description soft limit hard limit MAXGTS Maximum number of GTS which can be fetched 10e5 5e7 LIMIT Maximum number of datapoints which can be fetched during a script execution 10e6 10e7 MAXBUCKETS Maximum number of buckets which can be created by a call to BUCKETIZE 10e5 50e5 MAXDEPTH Maximum depth (number of levels) of the execution stack 5e3 5e3 MAXLOOP Maximum number of milliseconds which can be spent in a loop 5e3 10e3 MAXOPS Maximum number of operations which can be performed during a single WarpScript execution 5e6 5e7 MAXSYMBOLS Maximum number of simultaneous symbols which can be defined on the stack during a single WarpScript execution 64 256 MAXGEOCELLS Maximum number of cells a GEOSHAPE 10e3 10e4 MAXPIXELS Maximum size (in pixels) of images which can be created by PGraphics 10e5 10e5 MAXRECURSION Maximum nesting depth of macro calls 16 32 ⚠️ Operation over soft limits may be intensives. Usage An example where it is needed to increase the fetch limit by the LIMIT function\n'\u003cREADTOKEN\u003e' AUTHENTICATE 50e6 TOLONG LIMIT // Fetch on the 'accessLogs' class for your application id as labels [ '\u003cREADTOKEN\u003e' 'accessLogs' { 'app_id' '\u003cAPP_ID\u003e' } NOW 1 w ] FETCH ","token#Token":"Tokens are based on your application with the notion of producer and owner. Hence, only the data owner can see it.\nYou can find a 5 days available token in the metric tab of your application.","visualization-and-exploration#Visualization and exploration":"Quantum Quantum is a web tool used to run some WarpScript. You can access to it from your metrics interface.\nIt provides the path to the Clever Cloud Warp 10 gateway and let you explore your data."},"title":"Warp 10"},"/developers/doc/quickstart/":{"data":{"":" Clever Cloud provides an automated hosting platform for developers. Deploy your app easily and launch dependencies without having to worry about the infrastructure set up. Follow this guide to get ready to deploy quickly as you learn the basics of Clever Cloud. ","create-a-clever-cloud-account#Create a Clever Cloud Account":"The API of Clever Cloud uses OAuth 1 to perform authentication actions. There are two ways to signup to Clever Cloud: email or GitHub login.\nEmail Auth GitHub Auth This kind of auth requires a valid and non-temporary disposable e-mail, and a password having at least 6 characters. Do not forget to validate your email by clicking the link you will receive. The GitHub signup allows you to create an account or link your existing one to GitHub, in one click. This process asks the following permissions:\nRead your Public Key Read User Repositories The “repository permission” is used to deploy your GitHub apps directly to Clever Cloud, with a simple step. If you need to give access to Clever Cloud’s API to a specific GitHub organization, you can do it here.\nGo to the Clever Cloud Console and select the method you prefer.\nTwo Factor Authentication (2FA) Clever Cloud supports 2FA. You can enable it here: https://console.clever-cloud.com/users/me/authentication\nPlease, backup your recovery codes, we won’t be able to restore access to your account if you lose access to your regular codes.","deploy-your-code#Deploy your code":"What’s an Application on Clever Cloud An application is defined on Clever Cloud by the following elements:\na dedicated language/framework; a deployment method (FTP and/or Git); resources consumption (CPU, RAM, Disk…), depending on the language or framework used; an optional configuration file you may add to your project. If one of these elements is missing, Clever Cloud can’t deploy your application properly (except the configuration file, optional in some cases).\nHow it Works When you push an application’s code to git or via FTP, the platform receives it and checks the resource’s requirements. If they are complete, the deployment is launched. When finished and successful, the application is up and running.\nThe log system retrieves all output from the application and displays it in the logs tab of your application in the Clever Cloud console.\nSupported Platforms Docker Go Haskell Java Node.js Ruby PHP Python Rust Scala Elixir .NET Create an Application Step by Step In the Clever Cloud Console:\nSelect the organization Choose the organization you want to deploy in from the left menu. At this point you must only have the Personal Space but you can create one.\nClick on “Create an application” Find it in the Organization Manager panel, at the top left of the left menu. This starts the application creation wizard. If your account has been linked to GitHub, you can select a repository from your GitHub account.\nIf you want to deploy an application within a GitHub organisation, first grant the Clever Cloud API access to it.\nSelect the language Choose the language or the framework you want to deploy.\n💡 Optional: For PHP applications, you can choose between FTP and Git deployment. Fine-tune your scaling configuration Horizontal scaling is the number of instances that can run at the same time. Vertical scaling sets the minimum and maximum size the instance can be.\nName your application Enter the name and the description of your application.\nOptional steps The wizard will offer you to add an add-on to your application The wizard will offer you to add environment variables to your application Choose How to Deploy GitGitHub FTP To deploy via Git, you need it installed on your machine. You can find more information on Git website: git-scm.com\nNote: During the deployment, the .git folder is automatically deleted to avoid security problems. If you need to know which version is used on the server please use the COMMIT_ID environment variable.\nFollow these steps to deploy your application:\nGet the git deployment url in the application information page, which looks like: git+ssh://git@push.\u003czone\u003e.clever-cloud.com/\u003cyour_app_id\u003e.git.\nIn your terminal, go to your application repository. If you do not already track your app with git, start by typing:\ngit init git add . git commit -m \"first commit\" Then, link your local repository to Clever Cloud by providing the Git remote url: git remote add \u003cremote-name\u003e \u003cyour-git-deployment-url\u003e Push your application to Clever Cloud: git push \u003cremote-name\u003e \u003cbranch-name\u003e:master You can see your application logs in the dashboard to monitor the deployment.\nOnce you have created your application with GitHub, each push on the master branch trigger a deployment. To deploy an other branch than master, go to the information panel of your application and select the default branch to use.\nGithub deployment branch select If you don’t find your repository in the list fetched from Github, a workaround is to unlink your account in your profile here : https://console.clever-cloud.com/users/me/information, remove Clever Cloud API from your Github Authorized OAuth Apps and link again your Github account to your Clever Cloud account.\nPrivate GitHub repositories are also supported.\nCaution: in GitHub, private repositories in an ordinary user account are an all-or-nothing deal: either someone has full read write access (i.e., they’re a collaborator) or they have no access.\nHowever, if you set up an organization, create the repo under the aegis of the organization, and then add the collaborator, you have much more fine-grained control (including giving read-only access to a private repository).\nYou can deploy via FTP with PHP applications.\nTo deploy via FTP, you need an FTP software installed on your machine. Filezilla is one of them.\nDeploy your application via FTP, create a FS Bucket with an ID matching your application’s ID. You will find the FTP credentials in the configuration tab of this particular FS Bucket.\nMore documentation about Filezilla.\nAn FTP application is automatically started once the application is created, even if no code has been sent.\n⚠️ FTP deployment is ok for small websites but not for large ones. We strongly recommend you to use Git deployment for large PHP websites. Troubleshooting Git ⋅ Remote is asking for a password If the remote asks you for a password right after a git push attempt, this may be due to a SSH Key misconfiguration.\nAdd your SSH key to your profile here: https://console.clever-cloud.com/users/me/ssh-keys\nThe full tutorial about adding SSH key is here: Adding SSH keys\nGit ⋅ Unable to resolve the reference master You are probably trying to push from another branch. Remeber that:\nYou can only push to the master branch for deployment. Trying to push to another branch will trigger an error. You cannot push a tag (which refers to a commit) to the remote repository. If you do so, no deployment will be triggered. In order to push to master from a non-master local branch, use this syntax: git push \u003cremote-name\u003e \u003cbranch-name\u003e:master GitHub ⋅ Does not appear to be a git repository You can’t directly push to an application created on Clever Cloud as a GitHub app: in this case, only the automatic deployment from GitHub is henceforth allowed.\nIf you try to push to Clever Cloud, as you would do for a non-GitHub app, you will get the following error :\nfatal: '/data/repositories/\u003capp_id\u003e.git' does not appear to be a git repository Indeed, no git repository is created on Clever Cloud because the application is directly cloned from GitHub.\nIf you have to push directly to a repo in order to deploy an application (eg if you deploy from a CI), then create a non-GitHub app.","manage-your-application#Manage your Application":"There are many tabs available in the application’s menu on Clever Console:\nInformation: General information about your application Scalability: Set-up scalability options Domain names: Manage custom domain names Environment variables: Manage environment variables Service dependencies: Link add-ons and applications Exposed configuration: Manage exposed environment variables Activity: Track last deployments Logs: Visualize application’s logs Metrics: Visualize application’s metrics Consumption: Visualize your application’s consumption. Create your first add-on Applications often requires one or more services in addition to the runtime itself. Add-ons are services you can use independently, or you can link them with your application(s). For instance, you may want to add a database or a caching system to your application or just have a database with no linked application.\nAn add-on can be shared by different applications to share data between them. It can be a database shared by two or three applications of your infrastructure for example, or they can be independent.\nMost of the add-ons catalog is provided by Clever Cloud, but vendors are also allowed to provide services external to Clever Cloud (See how to integrate your SaaS with Clever Cloud)\nAvailable add-ons Clever Cloud provides multiple add-ons to work with your applications:\nMySQLYour self-hosted managed relational database PostgreSQLThe not-only-SQL database, self hosted and managed MongDBThe NoSQL document-oriented database Elastic StackDeploy your Elastic Stack in one click FS BucketExternal File System for your apps CellarObject storage RedisManaged in-memory database Config ProviderMore freedom to manage, import and inject your credentials PulsarOpen-source, distributed messaging and streaming platform built for the cloud. JenkinsThe leading open source automation server MatomoBest Google Analytics alternative If your add-on:\nDoesn't exist yetAlready exists Here we will assume you want to create a new add-on and link it to your application.\nGo to the Clever Cloud Console. Go to the organization in which you want to create the add-on, for example your personal space. Click on Add an add-on. This space let you create and configure the add-on according to your needs. Choose which type of add-on you want to create. See above the list of available add-ons and their corresponding documentation pages for further information on how they work. Select the plan you need for you add-on. You can find details about the pricing, the capacity of the add-on and other specifications on this page or in the corresponding documentation page. Choose with which application you want to link you add-on. Linking an add-on to an application will provide configuration to the application through environment variables. The environment variables provided by the add-on are available for use in the linked application. If you want to use your add-on alone, just don’t link it to any application. Choose the name of the add-on and the region where the add-on will be hosted. Click on the Create button. The add-on will now be available in your organization, and corresponding environment variables will be available for the applications linked to the add-on you just created.\nTo link an already existing add-on with your application, just follow these steps:\nGo in the organization of your application. Click on the name of the application you want to link with your add-on. Go in the Service dependencies section. Select the add-on you want to link under the “Link addons” dropdown menu. Click on the Link button of the add-on you want to link to your application. Add-on Billing There are two kinds of billing:\nPer-month billing: Add-ons with fixed resources (storage, CPU and RAM) Per-usage billing: Add-ons based on consumption, like FS Bucket and Cellar ⚠️ Free Plan: Add-ons having a free plan are meant for testing purposes, not production usage. These add-ons usually rely on shared resources, resulting in variable, non-guaranteed performances and stability. Shared clusters may not be running the same version as dedicated instances. 📊 Your invoice: Per usage billing will be taken on runtime credits each day, while per-month add-ons will create a new line in the monthly invoice. Manage your Add-on Once an add-on is created, at least two tabs are available in the Clever Cloud console:\nAdd-on dashboard: This screen provides and overview of your add-on and its options, depending on the type of add-on it is. Example of the dashoard tab of an add-on Information tab: This screen sums-up the characteristics of the selected add-on. Features and environment variables (if applicable) are shown. Other tabs may be available, depending on the add-on type.\nDelete an add-on To delete an add-on:\nGo to the Information tab of the add-on. Click on Remove add-on. ⚠️ After deletion of the add-on, all associated data will be removed. "},"title":"Quickstart"},"/developers/doc/reference/":{"data":{"":" Common configuration for all instances All environment variables "},"title":"Configuration List"},"/developers/doc/reference/common-configuration/":{"data":{"":"Each instance type (php,java,python,go,ruby…) has its own configuration. However, some of\nthese configuration items can be applied to any instance.","hooks#Hooks":"You can run specific tasks during the deployment of your application.\nPlease refer to the hooks documentation to learn more about them.","private-ssh-key#Private SSH Key":"If your company manages its own artifacts in a private repository (like, you can only access them via git+ssh or sftp), and you need a private key to connect to the server, you can either set it in an environment variable or commit it in your application’s Clever Cloud repository.\nThat key will be installed in ~/.ssh/ before the start of the build. So the dependency manager will use it to fetch libs only accessible by ssh.\nℹ️ Please provide a key without pass phrase, or the system will be unable to unlock it Environment variable Set your key as the value of the CC_SSH_PRIVATE_KEY variable. If you want it to be saved to a specific file, you can set the CC_SSH_PRIVATE_KEY_FILE variable.\nCommitted file First, you need to add the file clevercloud/ssh.json, its content is pretty straight-forward:\n{ \"privateKeyFile\": \"path/to/file\" } The privateKeyFile field must be a path to an SSH private key. The path must be relative to the root of your repository.\nFor example, if your private key file is in the clevercloud folder and is named my_key, the privateKeyFile field will be \"clevercloud/my_key\".","workers#Workers":"You can run background tasks running in parallel of your application.\nPlease refer to the workers documentation to learn more about them."},"title":"Configuration on all instances"},"/developers/doc/reference/reference-environment-variables/":{"data":{"":"","addons-related-environment-variable#Addons-related environment variable":"FS Bucket FS Bucket Documentation\nName Description Read Only BUCKET_HOST Hostname of the bucket ✓ CC_FS_BUCKET Defines which bucket to mount on which path MongoDB MongoDB Documentation\nName Description Default value Read Only MONGODB_ADDON_HOST Generated upon creation ✓ MONGODB_ADDON_PORT Generated upon creation ✓ MONGODB_ADDON_DIRECT_HOST Points directly to the VM, bypassing reverse proxies Generated on demand via the dashboard ✓ MONGODB_ADDON_DIRECT_PORT Points to ectly to the VM, bypassing reverse proxies Generated on demand via the dashboard ✓ MONGODB_ADDON_DB Generated upon creation ✓ MONGODB_ADDON_PASSWORD Generated upon creation ✓ MONGODB_ADDON_USER Generated upon creation ✓ MySQL MySQL Documentation\nName Description Default value Read Only MYSQL_ADDON_HOST Generated upon creation ✓ MYSQL_ADDON_PORT Generated upon creation ✓ MYSQL_ADDON_DIRECT_HOST Points directly to the VM, bypassing reverse proxies Generated on demand via the dashboard ✓ MYSQL_ADDON_DIRECT_PORT Points to ectly to the VM, bypassing reverse proxies Generated on demand via the dashboard ✓ MYSQL_ADDON_DB Generated upon creation ✓ MYSQL_ADDON_PASSWORD Generated upon creation ✓ MYSQL_ADDON_ROLE Generated upon creation ✓ MYSQL_ADDON_USER Generated upon creation ✓ ProxySQL ProxySQL Documentation\nName Description Default value Read Only CC_ENABLE_MYSQL_PROXYSQL Enable the ProxySQL feature false CC_MYSQL_PROXYSQL_MAX_CONNECTIONS Defines the maximum number of connections the local ProxySQL will open to your MySQL add-on 10 CC_MYSQL_PROXYSQL_USE_TLS Enable or disable secured connection using TLS to your MySQL add-on true CC_MYSQL_PROXYSQL_SOCKET_PATH Contains the path to the Unix Datagram Socket to connect to ProxySQL ✓ PostgreSQL PostgreSQL Documentation\nName Description Default value Read Only POSTGRESQL_ADDON_HOST Generated upon creation ✓ POSTGRESQL_ADDON_PORT Generated upon creation ✓ POSTGRESQL_ADDON_DIRECT_HOST Points directly to the VM, bypassing reverse proxies Generated on demand via the dashboard ✓ POSTGRESQL_ADDON_DIRECT_PORT Points to ectly to the VM, bypassing reverse proxies Generated on demand via the dashboard ✓ POSTGRESQL_ADDON_DB Generated upon creation ✓ POSTGRESQL_ADDON_PASSWORD Generated upon creation ✓ POSTGRESQL_ADDON_ROLE Generated upon creation ✓ POSTGRESQL_ADDON_USER Generated upon creation ✓ Pgpool-II Pgpool-II Documentation\nName Description Default value CC_ENABLE_PGPOOL Enables the Pgpool-II feature false CC_PGPOOL_SOCKET_PATH Contains the path to the Unix Datagram Socket to connect to Pgpool-II true CC_PGPOOL_PCP_SOCKET_PATH Contains the path to the Unix Datagram Socket to connect to PCP true CC_PGPOOL_EXTRA_USERS Add new user/password pairs to the pool_passwd file, separated by commas (user1:password,user2:password…) ’ ' CC_PGPOOL_RESERVED_CONNECTIONS Number of reserved connections 0 CC_PGPOOL_LISTEN_BACKLOG_MULTIPLIER Specifies the length of connection queue from frontend to Pgpool-II 2 CC_PGPOOL_LEADER_WEIGHT Weight for backend 0 (Leader) 1 CC_PGPOOL_NUM_INIT_CHILDREN Number of concurrent sessions allowed 16 CC_PGPOOL_MAX_POOL Number of connection pool caches per connection 1 CC_PGPOOL_CHILD_LIFE_TIME Pool exits after being idle for this many seconds 300 CC_PGPOOL_CHILD_MAX_CONNECTIONS Pool exits after receiving that many connections 0 (no exit) CC_PGPOOL_CONNECTION_LIFE_TIME Connection to backend closes after being idle for this many seconds 0 (no close) CC_PGPOOL_CLIENT_IDLE_LIMIT Client is disconnected after being idle for that many seconds (even inside an explicit transactions!) 0 (no disconnection) CC_PGPOOL_LOG_CONNECTIONS Log connections off CC_PGPOOL_LOG_DISCONNECTIONS Log disconnections off CC_PGPOOL_LOG_HOSTNAME Hostname will be shown in ps status and in logs if connections are logged off CC_PGPOOL_LOG_STATEMENT Log all statements off CC_PGPOOL_LOG_PER_NODE_STATEMENT Log all statements with node and backend informations off CC_PGPOOL_LOG_CLIENT_MESSAGES Log any client messages off CC_PGPOOL_LOG_STANDBY_DELAY Log standby delay. Valid values are combinations of always, if_over_threshold and none if_over_threshold CC_PGPOOL_CONNECTION_CACHE Activate connection pools on CC_PGPOOL_REPLICATE_SELECT Replicate SELECT statements in replication mode off CC_PGPOOL_INSERT_LOCK Automatically locks a dummy row or a table with INSERT statements to keep SERIAL data consistency on CC_PGPOOL_LOBJ_LOCK_TABLE When rewriting lo_creat command in replication mode, specify table name to lock ’ ' CC_PGPOOL_REPLICATION_STOP_ON_MISMATCH On disagreement with the packet kind sent from backend, degenerate the node which is most likely “minority” If off, just force to exit this session off CC_PGPOOL_FAILOVER_IF_AFFECTED_TUPLES_MISMATCH On disagreement with the number of affected tuples in UPDATE/DELETE queries, then degenerate the node which is most likely “minority”. If off, just abort the transaction to keep the consistency off CC_PGPOOL_LOAD_BALANCE_MODE Activate load balancing mode on CC_PGPOOL_IGNORE_LEADING_WHITE_SPACE Ignore leading white spaces of each query on CC_PGPOOL_READ_ONLY_FUNCTION_LIST Comma separated list of function names that don’t write to database (regexp are accepted) ’ ' CC_PGPOOL_WRITE_FUNCTION_LIST Comma separated list of function names that write to database (regexp are accepted) ’ ' CC_PGPOOL_PRIMARY_ROUTING_QUERY_PATTERN_LIST Semicolon separated list of query patterns that should be sent to primary node (regexp are accepted) ’ ' CC_PGPOOL_DATABASE_REDIRECT_PREFERENCE_LIST Comma separated list of pairs of database and node id ’ ' CC_PGPOOL_APP_NAME_REDIRECT_PREFERENCE_LIST Comma separated list of pairs of app name and node id ’ ' CC_PGPOOL_ALLOW_SQL_COMMENTS If on, ignore SQL comments when judging if load balance or query cache is possible off CC_PGPOOL_DISABLE_LOAD_BALANCE_ON_WRITE Load balance behavior when write query is issued in an explicit transaction. Valid values are “transaction”, “trans_transaction”, “dml_adaptive” or “always” transaction CC_PGPOOL_DML_ADAPTIVE_OBJECT_RELATIONSHIP_LIST Comma separated list of object pairs ’ ' CC_PGPOOL_STATEMENT_LEVEL_LOAD_BALANCE Enables statement level load balancing off CC_PGPOOL_SR_CHECK_PERIOD Streaming replication check period 10 CC_PGPOOL_DELAY_THRESHOLD Threshold before not dispatching query to standby node Unit is in bytes 10000000 CC_PGPOOL_HEALTH_CHECK_PERIOD Health check period 20 CC_PGPOOL_HEALTH_CHECK_TIMEOUT Health check timeout 20 CC_PGPOOL_HEALTH_CHECK_MAX_RETRIES Maximum number of times to retry a failed health check before giving up 0 CC_PGPOOL_HEALTH_CHECK_RETRY_DELAY Amount of time to wait (in seconds) between retries 1 CC_PGPOOL_CONNECT_TIMEOUT Timeout value in milliseconds before giving up to connect to backend 10000 CC_PGPOOL_MEMORY_CACHE_ENABLED Use the memory cache functionality off CC_PGPOOL_MEMQCACHE_TOTAL_SIZE Total memory size in megabytes for storing memory cache 64 CC_PGPOOL_MEMQCACHE_MAX_NUM_CACHE Total number of cache entries 1000000 CC_PGPOOL_MEMQCACHE_EXPIRE Memory cache entry life time specified in seconds 0 CC_PGPOOL_MEMQCACHE_AUTO_CACHE_INVALIDATION Invalidation of query cache is triggered by corresponding DDL/DML/DCL on CC_PGPOOL_MEMQCACHE_MAXCACHE Maximum SELECT result size in kilobytes (must be smaller than MEMQCACHE_CACHE_BLOCK_SIZE) 400 CC_PGPOOL_MEMQCACHE_CACHE_BLOCK_SIZE Cache block size in megabytes 1 CC_PGPOOL_CACHE_SAFE_MEMQCACHE_TABLE_LIST Comma separated list of table names to memcache that don’t write to database (regexp are accepted) ’ ' CC_PGPOOL_CACHE_UNSAFE_MEMQCACHE_TABLE_LIST Comma separated list of table names not to memcache that don’t write to database (regexp are accepted) ’ ' Elastic Stack Elastic Stack Documentation\nName Description Default value Read Only ELASTIC_APM_SERVER_URL URI to connect APM Server Generated upon creation ✓ ES_ADDON_APM_HOST APM Server hostname Generated upon creation ✓ ES_ADDON_APM_AUTH_TOKEN Authentication token to send metrics to APM Server Generated upon creation ✓ ELASTIC_APM_SECRET_TOKEN Authentication token to send metrics to APM Server Generated upon creation ✓ ES_ADDON_APM_USER Username credential used by APM Server to send metrics to Elasticsearch Generated upon creation ✓ ES_ADDON_APM_PASSWORD Password credential used by APM Server to send metrics to Elasticsearch Generated upon creation ✓ ES_ADDON_KIBANA_HOST Kibana hostname Generated upon creation ✓ ES_ADDON_KIBANA_USER Username credential used by Kibana to query Elasticsearch Generated upon creation ✓ ES_ADDON_KIBANA_PASSWORD Password credential used by Kibana to query Elasticsearch Generated upon creation ✓ ES_ADDON_URI URI to query Elasticsearch Generated upon creation ✓ ES_ADDON_HOST Elasticsearch hostname Generated upon creation ✓ ES_ADDON_USER Username credential to authenticate to Elasticsearch Generated upon creation ✓ ES_ADDON_PASSWORD Password credential to authenticate to Elasticsearch Generated upon creation ✓ ES_ADDON_VERSION ElasticSearch Version 7 ✓ Blackfire Name Description Default value Read Only ENABLE_BLACKFIRE Enable the Blackfire extension false CC_BLACKFIRE_SERVER_TOKEN The server token used to authenticate with Blackfire ’ ' ✓ CC_BLACKFIRE_SERVER_ID The server id used to authenticate with Blackfire ’ ' ✓ CC_BLACKFIRE_LOG_LEVEL Sets the verbosity of Agent’s log output 1 ✓ CC_BLACKFIRE_MEMORY_LIMIT Sets the maximum allowed RAM usage (megabytes) when ingesting traces 500 ✓ CC_BLACKFIRE_COLLECTOR Sets the URL of Blackfire’s data collector https://blackfire.io ✓ CC_BLACKFIRE_TIMEOUT Sets the Blackfire API connection timeout 15 ✓ CC_BLACKFIRE_STATSD Sets the statsd server to send agent’s statistics ’ ' ✓ CC_BLACKFIRE_STATSD_PREFIX Sets the statsd prefix to use when sending data blackfire ✓ New Relic Name Description Default value Read Only NEW_RELIC_APP_NAME Contains the application name NEW_RELIC_LICENSE_KEY Contains your New Relic account license CC_NEWRELIC_BROWSER_MONITORING_AUTO_INSTRUMENT CC_NEWRELIC_DISTRIBUTED_TRACING_ENABLED CC_NEWRELIC_ERROR_COLLECTOR_ENABLED CC_NEWRELIC_TRANSACTION_TRACER_ENABLED CC_NEWRELIC_TRANSACTION_TRACER_RECORD_SQL obfuscated Pulsar Name Description Default value Read Only ADDON_PULSAR_BINARY_URL The complete URL to use in your application Generated upon creation ✓ ADDON_PULSAR_BINARY_PORT The port to connect to the Pulsar Cluster Generated upon creation ✓ ADDON_PULSAR_HOSTNAME The host to connect to the Pulsar Cluster Generated upon creation ✓ ADDON_PULSAR_HTTP_URL The complete URL to connect with WebSocket Generated upon creation ✓ ADDON_PULSAR_HTTP_PORT The port to connect with WebSocket Generated upon creation ✓ ADDON_PULSAR_NAMESPACE Your add-on Pulsar ID Generated upon creation ✓ ADDON_PULSAR_TENANT Your Clever Cloud tenant ID Generated upon creation ✓ ADDON_PULSAR_TOKEN Your Biscuit authentication token Generated upon creation ✓ Redis Redis Documentation\nName Description Default value Read Only REDIS_HOST Generated upon creation ✓ REDIS_PORT Generated upon creation ✓ REDIS_PASSWORD Generated upon creation ✓ Socks Name Description Default value Read Only SOCKS_ADDON_HOST SOCKS_ADDON_PORT SOCKS_ADDON_PRIVATE_KEY VPN The VPN addon provides a fixed-ip outgoing node. This can be used to work with services protected by ip address filtering. VPN_ADDON_* variables will be provided by Clever Cloud upon setup, the only configuration you have to provide is a list of CIDRs (eg. 1.2.3.0/24) for which you want the traffic to be routed through the exit node.\nName Description Default value Read Only CC_VPN_DNS_OVERRIDES Comma-separated list of DNS IP VPN_ADDON_CACRT Server CA certificate VPN_ADDON_CIPHER Cipher to use CIPHER, can be either {cipher_suite}:{hmac_alg} or only {cipher_suite} DES-EDE3-CBC:SHA1 VPN_ADDON_CRT Client certificate VPN_ADDON_DEVTYPE Kernel virtual interface kind to use (“tap” or “tun”) tap VPN_ADDON_HOST Server host or IP address VPN_ADDON_KEY Client certificate private key VPN_ADDON_PORT Server port VPN_ADDON_TAKEY Pre-shared secret VPN_TARGETS Comma-separated list of CIDRs for which you want the traffic to be routed through the exit node ","commons-to-all-applications#Commons to all applications":"Set by the deployment process These are read-only variables that are generated for each scaler before they build and start your application.\nName Description Example value INSTANCE_NUMBER Allows your application to differentiate each running node on the application level. 0, 1… INSTANCE_TYPE Whether this instance is a “build” instance or a “production” instance. build, production INSTANCE_ID The ID of the current instance (scaler) of your application. It’s unique for each instance of your application and changes every time you deploy it. 518c8d8f-e304-4310-81e0-9c4237d55645 CC_PRETTY_INSTANCE_NAME The random generated string as instance pretty name using pokemon names. Tiny rhyhorn APP_ID The ID of your Clever Cloud application app_649a93d1-6677-44bc-aca7-6f46107d6e02 APP_HOME The absolute path to your application folder /home/bas/app_649a93d1-6677-44bc-aca7-6f46107d6e02 CC_DEPLOYMENT_ID Internal id of current deployment f7efaf04-1a63-45a1-8503-0de7c750ee48 CC_COMMIT_ID The id of the commit that’s currently running d88cd2ae1aaa91923ed2bd689d95d713b6f3f45f CC_REVERSE_PROXY_IPS A comma separated list of trusted IP addresses. You should only accept requests coming from these IP addresses. x.y.z.z,x.y.z.z ELASTIC_APM_SERVICE_NAME Sets the name of your service/application in Elastic APM. Automatically defined when you have linked an Elastic APM service to your application. You can override it by defining it yourself Your application’s name conforming to Elastic APM naming convention CC_APP_NAME The customer defined application name cloud-api-production PORT The mandatory port value is 8080 8080 Variables you can define So you can alter the build\u0026start process for your application.\nName Description Default value APP_FOLDER Folder in which the application is located (inside the git repository) CC_DISABLE_JVM_AGENT Disable JVM agent activation CC_DISABLE_GIT_SUBMODULES Disable Git submodules initialization \u0026 synchronization CC_PREVENT_LOGSCOLLECTION Disable Vector service used to collect and send logs false CC_HEALTH_CHECK_PATH Custom path to validate your application deployment CC_NODE_VERSION Set Node.js version on non-Node.js application. Don’t use it for Node.js applications, use this instead CC_SSH_PRIVATE_KEY A ssh private key to setup for the user running your application CC_SSH_PRIVATE_KEY_FILE The name to use for the file containing the private ssh key id_ed25519 CC_WORKER_RESTART One of always, on-failure or no. Control whether workers need to be restarted when they exit. This setting controls all workers. on-failure CC_WORKER_RESTART_DELAY Define a delay in seconds to restart the worker when they exit. 1 CC_WORKER_COMMAND Command to run in background as a worker process. You can run multiple workers. Control build and dependencies cache Name Description Default value CC_CACHE_DEPENDENCIES Enable caching of your build dependencies to speed up following builds. false CC_DISABLE_BUILD_CACHE_UPLOAD Disable creation and upload of cache archive. Restarts won’t be speeded up. false CC_IGNORE_FROM_BUILDCACHE Allows to specify paths to ignore when the build cache archive is created. IGNORE_FROM_BUILDCACHE (Deprecated) Allows to specify paths to ignore when the build cache archive is created. CC_OVERRIDE_BUILDCACHE Allows to specify paths that will be in the build cache. Only those files / directories will be cached Control the deployment’s behavior Name Description Default value CC_RUN_COMMAND Custom command to run your application. CC_TASK If set to true, the deployer runs CC_RUN_COMMAND and terminates the instance after running the task. Trigger an execution using git push or starting your instance false CC_TROUBLESHOOT Enable debug log level, will also keep the VM up after failure for 15 minutes so you can SSH and debug. Don’t forget to cancel deployment if you push a new commit. false 🐳 CC_RUN_COMMAND has no effect on Docker. To run Docker, use CMD in your Dockerfile. Deployment hooks Use these to define commands to run between various steps of the deployment.\nName Description CC_PRE_BUILD_HOOK Ran before the dependencies are fetched. If it fails, the deployment fails. CC_POST_BUILD_HOOK Ran after the project is built, and before the cache archive is generated. If it fails, the deployment fails. CC_PRE_RUN_HOOK Ran before the application is started, but after the cache archive has been generated. If it fails, the deployment fails. CC_RUN_FAILED_HOOK Ran once the application has failed to start. CC_RUN_SUCCEEDED_HOOK Ran once the application has started successfuly. Configure extra software Name Description Default value CC_CLAMAV Start the clamav and clamav-freshclam services (the database is updated every 2 hours). WARNING: Clamscan consumes a lot of resources (~ 1GB of memory), make sure you have a scaler with enough memory to avoid OOM. false CC_CLAMAV_MAXQUEUE Maximum number of queued items. 100 CC_CLAMAV_MAXTHREADS Maximum number of threads running at the same time. 10 CC_METRICS_PROMETHEUS_PASSWORD Define the password for the basic auth of the Prometheus endpoint CC_METRICS_PROMETHEUS_PATH Define the path on which the Prometheus endpoint is available /metrics CC_METRICS_PROMETHEUS_PORT Define the port on which the Prometheus endpoint is available 9100 CC_METRICS_PROMETHEUS_RESPONSE_TIMEOUT Define the timeout in seconds to collect the application metrics. This value must be below 60 seconds as data are collected every minutes 3 CC_METRICS_PROMETHEUS_USER Define the user for the basic auth of the Prometheus endpoint CC_VARNISH_STORAGE_SIZE Configure the size of the Varnish cache. 1G CC_WORKER_COMMAND Command to run in background as a worker process. You can run multiple workers. Tailscale support Tailscale is a managed VPN service based on Wireguard that enable private networking between users, devices or machines. Clever Cloud provides a native integration of Tailscale, by mounting a VPN endpoint for each of your application’s instances.\nNote that Reusable keys are required to use multiple instances. You can generate one here.\nName Description TAILSCALE_AUTH_KEY Contains your Tailscale Auth key TAILSCALE_LOGIN_SERVER Contains the login server How it works? For a given application with TAILSCALE_AUTH_KEY configured, each instance will be configured to join a Tailscale network. Instances will be named after your configured name, suffixed with the INSTANCE_NUMBER : CC-\u003cNAME\u003e-\u003cINSTANCE_NUMBER\u003e. If you have multiple instances and use one of them for being an admin instance (using INSTANCE_NUMBER), you can match the instance from your deployment to reach it over VPN.\nIf TAILSCALE_LOGIN_SERVER is provided, the agent will be configured to reach an alternative control server. Note that using your own control server is at your own risks, and Tailscale can’t be responsible. An alternative control server can still be useful to use for constraints environements. Headscale is an example of self-hosted implementation of the Tailscale control server that can run on Clever Cloud.","docker#Docker":"Docker Documentation\nName Description Default value CC_DOCKERFILE The name of the Dockerfile to build. Dockerfile CC_DOCKER_EXPOSED_HTTP_PORT Set to custom HTTP port if your Docker container runs on custom port. 8080 CC_DOCKER_EXPOSED_TCP_PORT Set to custom TCP port if your Docker container runs on custom port. 4040 CC_DOCKER_FIXED_CIDR_V6 Activate the support of IPv6 with an IPv6 subnet int the docker daemon. CC_DOCKER_LOGIN_PASSWORD The password of your username. CC_DOCKER_LOGIN_SERVER The server of your private registry (optional). Docker’s public registry CC_DOCKER_LOGIN_USERNAME The username to login to a private registry. CC_MOUNT_DOCKER_SOCKET Set to true to access the host Docker socket from inside your container. false ","elixir#Elixir":"Elixir Documentation\nName Description Default value CC_ELIXIR_VERSION Choose the Elixir version between 1.8, 1.9, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15 or 1.16 1.16 CC_MIX_BUILD_GOAL The mix goal to build the application (default compile) CC_PHOENIX_ASSETS_DIR Folder in which your Phoenix assets are located. CC_PHOENIX_DIGEST_GOAL Phoenix digest goal. phx.digest CC_PHOENIX_RUN_ECTO_MIGRATE Whether to run ‘mix ecto.migrate’ or not. true CC_PHOENIX_SERVER_GOAL Phoenix server goal. phx.server CC_RUN_COMMAND Custom command to run your application. Replaces the default behaviour. ","go#Go":"Go Documentation\nName Descrption CC_GO_BUILD_TOOL Available values: gomod, gobuild. Build and install your application. goget still exists but is deprecated. CC_GO_RUNDIR Run the application from the specified path, relative to $GOPATH/src/, now deprecated. CC_GO_PKG Tell the CC_GO_BUILD_TOOL which file contains the main() function, default main.go. ","haskell#Haskell":"Haskell Documentation\nName Description CC_HASKELL_STACK_TARGET Specify Stack package target. CC_RUN_COMMAND Custom command to run your application. ","java#Java":"Java Documentation\nName Description Default value Read Only CC_DISABLE_MAX_METASPACE Allows to disable the Java option -XX:MaxMetaspaceSize CC_EXTRA_JAVA_ARGS Define extra arguments to pass to ‘java’ for jars. CC_JAR_ARGS Define arguments to pass to the jar we launch. CC_JAR_PATH Define the path to your jar. CC_JAVA_VERSION Choose the JVM version between 7 to 17 for OpenJDK or graalvm-ce for GraalVM 21.0.0.2 (based on OpenJDK 11.0). 21 CC_MAVEN_PROFILES Define which maven profile to use during default build. CC_RUN_COMMAND Custom command to run your application. Replaces the default behaviour. CC_SBT_TARGET_BIN Define the bin to pick in the CC_SBT_TARGET_DIR. The first bin found in the CC_SBT_TARGET_DIR. CC_SBT_TARGET_DIR Define where pick the bin to run. . Then /target/universal/stage/bin is concatenated. GRADLE_DEPLOY_GOAL Define which gradle goals to run during build. MAVEN_DEPLOY_GOAL Define which maven goals to run during build. NUDGE_APPID PLAY1_VERSION Define which play1 version to use between 1.2, 1.3, 1.4 and 1.5 SBT_DEPLOY_GOAL Define which sbt goals to run during build. stage ","net#.NET":".NET Documentation\nName Description Default value CC_DOTNET_PROFILE Override the build configuration settings in your project. Release CC_DOTNET_PROJ The name of your project file to use for the build, without the .csproj / .fsproj / .vbproj extension. CC_DOTNET_TFM Compiles for a specific framework. The framework must be defined in the project file. Example : net5.0 CC_DOTNET_VERSION Choose the .NET Core version between 6.0,8.0. 8.0 CC_RUN_COMMAND Custom command to run your application. ","nodejs#Node.js":"Node.js Documentation\nName Description Default value CC_NODE_DEV_DEPENDENCIES Control if development dependencies are installed or not. Values are either install or ignore ignore CC_RUN_COMMAND Define a custom command. Example for Meteor: node .build/bundle/main.js \u003coptions\u003e CC_NODE_BUILD_TOOL Choose your build tool between npm, npm-ci, yarn, yarn2 and custom npm CC_CUSTOM_BUILD_TOOL A custom command to run (with CC_NODE_BUILD_TOOL set to custom) CC_NPM_REGISTRY The host of your private repository, available values: github or the registry host. registry.npmjs.org NPM_TOKEN Private repository token ","php#PHP":"PHP Documentation\nName Description Default value ALWAYS_POPULATE_RAW_POST_DATA CC_COMPOSER_VERSION Choose your composer version between 1 and 2 2 CC_CGI_IMPLEMENTATION Choose the Apache FastCGI module between fastcgi and proxy_fcgi fastcgi CC_HTTP_BASIC_AUTH Restrict HTTP access to your application. Example: login:password. You can define multiple credentials using additional CC_HTTP_BASIC_AUTH_n (where n is a number) environment variables. CC_LDAP_CA_CERT CC_MTA_AUTH_PASSWORD Password to authenticate to the SMTP server CC_MTA_AUTH_USER User to authenticate to the SMTP server CC_MTA_SERVER_AUTH_METHOD Enable or disable authentication to the SMTP server on CC_MTA_SERVER_HOST Host of the SMTP server CC_MTA_SERVER_PORT Port of the SMTP server 465 CC_MTA_SERVER_USE_TLS Enable or disable TLS when connecting to the SMTP server true CC_OPCACHE_INTERNED_STRINGS_BUFFER The amount of memory used to store interned strings, in megabytes. Default 4 (PHP5), 8 (PHP7) CC_OPCACHE_MAX_ACCELERATED_FILES Maximum number of files handled by opcache. Default depends on the scaler size CC_OPCACHE_MEMORY Set the shared opcache memory size Default is about 1/8 of the RAM CC_OPCACHE_PRELOAD The path of the PHP preload file (PHP version 7.4 or higher). CC_PHP_ASYNC_APP_BUCKET Mount the default app FS bucket asynchronously. If set, should have value async CC_PHP_DEV_DEPENDENCIES Control if development dependencies are installed or not. Values are either install or ignore CC_PHP_DISABLE_APP_BUCKET Disable entirely the app FS Bucket. Values are either true, yes or disable CC_PHP_VERSION Choose your PHP version between 5.6, 7.2, 7.3, 7.4, 8.0, 8.1 and 8.2 8 CC_REALPATH_CACHE_TTL The size of the realpath cache to be used by PHP 120 CC_WEBROOT Define the DocumentRoot of your project . ENABLE_ELASTIC_APM_AGENT Elastic APM Agent for PHP true if ELASTIC_APM_SERVER_URL is defined, false otherwise ENABLE_REDIS false HTTP_TIMEOUT Define a custom HTTP timeout 180 LDAPTLS_CACERT MAX_INPUT_VARS MEMORY_LIMIT Change the default memory limit SESSION_TYPE Choose redis to use it as session store SOCKSIFY_EVERYTHING SQREEN_API_APP_NAME The name of your sqreen application. SQREEN_API_TOKEN Organization token. USE_SOCKS false ","python#Python":"Python Documentation\nName Description Default value CC_HTTP_BASIC_AUTH Restrict HTTP access to your application. Example: login:password. You can define multiple credentials using additional CC_HTTP_BASIC_AUTH_n (where n is a number) environment variables. CC_NGINX_PROXY_BUFFERS Sets the number and size of the buffers used for reading a response from the proxied server, for a single connection. CC_NGINX_PROXY_BUFFER_SIZE Sets the size of the buffer used for reading the first part of the response received from the proxied server. CC_PIP_REQUIREMENTS_FILE Allows you to define a custom requirements.txt file requirements.txt CC_PYTHON_BACKEND Choose the Python backend to use between daphne, gunicorn, uvicorn and uwsgi uwsgi CC_PYTHON_CELERY_LOGFILE Relative path to your Celery logfile: /path/to/logdir CC_PYTHON_CELERY_MODULE Specify the Celery module you want to start CC_PYTHON_CELERY_USE_BEAT Set to “true” to activate Beat support CC_PYTHON_MANAGE_TASKS Comma-separated list of Django manage tasks CC_PYTHON_MODULE Select which module you want to start with the path to the folder containing the app object. For example, a module called server.py in a folder called /app would be used here as app.server:app CC_PYTHON_USE_GEVENT Set to true to enable Gevent CC_PYTHON_VERSION Choose the Python version between 2.7, 3.7, 3.8, 3.9, 3.10 and 3.11 ENABLE_GZIP_COMPRESSION Set to true to gzip-compress the output of uwsgi GZIP_TYPES Set the mime types to compress. text/* application/json application/xml application/javascript image/svg+xml HARAKIRI Timeout (in seconds) after which an unresponding process is killed 180 NGINX_READ_TIMEOUT Read timeout in seconds 300 PYTHON_SETUP_PY_GOAL Custom setup goal to be launch after requirements.txt have been installed STATIC_FILES_PATH Relative path to where your static files are stored: path/to/static STATIC_URL_PREFIX The URL path under which you want to serve static file, usually /public STATIC_WEBROOT UWSGI_ASYNC Number of cores to use for uWSGI asynchronous/non-blocking modes UWSGI_ASYNC_ENGINE Select the asynchronous engine for uWSGI (optional) UWSGI_INTERCEPT_ERRORS WSGI_BUFFER_SIZE Buffer size (in bytes) for uploads. 4096 WSGI_POST_BUFFERING Maximal size (in bytes) for the headers of a request. 4096 WSGI_THREADS Number of threads per worker. (Default: automatically setup with the scaler size) WSGI_WORKERS Number of workers. (Default: automatically setup with the scaler size) When your Python application doesn’t use one of the supported backends, with CC_RUN_COMMAND for example, it must listen on port 9000, not 8080.","ruby#Ruby":"Ruby Documentation\nName Description Default value CC_ENABLE_SIDEKIQ Enable Sidekiq background process false CC_HTTP_BASIC_AUTH Restrict HTTP access to your application. Example: login:password. You can define multiple credentials using additional CC_HTTP_BASIC_AUTH_n (where n is a number) environment variables. CC_NGINX_PROXY_BUFFERS Sets the number and size of the buffers used for reading a response from the proxied server, for a single connection. Nginx documentation CC_NGINX_PROXY_BUFFER_SIZE Sets the size of the buffer used for reading the first part of the response received from the proxied server. Nginx documentation CC_RACKUP_SERVER The server to use for serving the ruby application puma CC_RAKEGOALS A list of comma-separated rake goals to execute e.g. db:migrate, assets:precompile CC_RUBY_VERSION Choose the Ruby version to use but we strongly advise to set Ruby version in your Gemfile CC_SIDEKIQ_FILES Specify a list of Sidekiq configuration files e.g. “./config/sidekiq_1.yml,./config/sidekiq_2.yml” NGINX_READ_TIMEOUT Read timeout in seconds 300 RACK_ENV RAILS_ENV STATIC_FILES_PATH Relative path to where your static files are stored: path/to/static STATIC_URL_PREFIX The URL path under which you want to serve static file, usually /public STATIC_WEBROOT ","rust#Rust":"Rust Documentation\nName Description Default value CC_RUSTUP_CHANNEL The rust channel to use. Use a specific channel version with stable, beta, nightly or a specific version like 1.13.0 stable CC_RUST_BIN The name of the binary to launch once built CC_RUST_FEATURES The list of features to enable CC_RUN_COMMAND Custom command to run your application. "},"title":"Environment Variable Reference"},"/developers/guides/":{"data":{"":"","frameworks#Frameworks":"Frameworks Step by steps guides to deploy your favorite framework on Clever Cloud DjangoConfigure your Django application to run on Clever Cloud DrupalDeploy a Drupal-based website on Clever Cloud ekg-statsdHow to configure ekg-statsd package in your Haskell application FluentdHow to deploy Fluentd using Docker on Clever Cloud LaravelDeploy a Laravel app on Clever Cloud node-statsdConfigure node-statsd package on your Node.js application to push custom metrics Play 1 x ScalaSet up your Play 1 + Scala application to run on Clever Cloud Play 2 x ScalaSet up your Play 2 + Scala application to run on Clever Cloud Ruby On RailsHow to deploy Ruby on Rails framework Ruby RackSet up a Ruby Rack application and deploy on Clever Cloud SymfonyDeploy a Symfony application on Clever Cloud WordPressDeploy WordPress on Clever Cloud MoodleFull Moodle installation and configuration guide ","level-up-your-add-ons#Level Up your Add-ons":" Take your dependencies to the next level Customize KibanaDeploy and customize a Kibana server on Clever Cloud Pgpool-IIHow to configure and use Pgpool-II for PostgreSQL add-ons ProxySQLConfigure and use ProxySQL for MySQL add-ons ","starter-tutorials#Starter Tutorials":" Tutorials to learn the basis of app configuration and deployments Node.js + MongoDB starterStarter tutorial to deploy a Node.js + MongoDB application on Clever Cloud Ruby RackWrite a hello world web application using Rack and deploy it on Clever Cloud ","static-site-generator-ssg#Static Site Generator (SSG)":"\nUse Clever Cloud as a runner to build an efficient static website and host it in minutes! AstroBuild and deploy a static Astro based website on Clever Cloud DocusaurusBuild and deploy a static Docusaurus based website on Clever Cloud Eleventy (11ty)Build and deploy a static Eleventy (11ty) based website on Clever Cloud HexoBuild and deploy a static Hexo based website on Clever Cloud HugoBuild and deploy a static Hugo based website on Clever Cloud Lume (Deno)Build and deploy a static Lume (Deno) based website on Clever Cloud MkDocsBuild and deploy a static MkDocs based website on Clever Cloud mdBookBuild and deploy a static mbBook based website on Clever Cloud NuxtBuild and deploy a static Nuxt based website on Clever Cloud Hugo + CellarBuild and deploy a static Hugo based website and host it using Cellar "},"title":"Guides"},"/developers/guides/astro/":{"data":{"":"","configure-environment-variables#Configure environment variables":"","create-a-static-application#Create a static application":"","push-your-code#Push your code":"If you need an example source code, get Astrowind (you’ll need git and Node.js):\ngit clone https://github.com/onwidget/astrowind myStaticApp Create a static application You can create an application in our Console or through Clever Tools:\nnpm i -g clever-tools clever login cd myStaticApp clever create -t static-apache myStaticApp To deploy on Clever Cloud, your local folder need to be a git repository (if not, git init) linked to an application. If you already have an application on Clever Cloud and want to link it to the current local folder:\nclever link your_app_name_or_ID Configure environment variables Next, we configure the application with a medium build instance to quickly generate static files. The host instance is nano-sized, enough for a simple website. As Clever Cloud is based on standards, you only need to define a few variables:\nclever scale --build-flavor M clever scale --flavor nano clever env set CC_NODE_VERSION \"20\" clever env set CC_WEBROOT \"/dist\" clever env set CC_OVERRIDE_BUILDCACHE \"/dist\" clever env set CC_PRE_BUILD_HOOK \"npm install \u0026\u0026 npm run astro telemetry disable\" clever env set CC_POST_BUILD_HOOK \"npm run build\" Push your code Once you complete these steps, commit your content to the local repository and deploy it:\ngit add . git commit -m \"First deploy\" clever deploy clever open You can display your website’s URL or add a custom domain to it (you’ll need to configure DNS):\nclever domain clever domain add your.website.tld "},"title":"Astro"},"/developers/guides/docusaurus/":{"data":{"":"","configure-environment-variables#Configure environment variables":"","create-a-static-application#Create a static application":"","push-your-code#Push your code":"If you need an example source code, init a new project (you’ll need git and Node.js):\nnpx create-docusaurus@latest myStaticApp classic Create a static application You can create an application in our Console or through Clever Tools:\nnpm i -g clever-tools clever login cd myStaticApp clever create -t static-apache myStaticApp To deploy on Clever Cloud, your local folder need to be a git repository (if not, git init) linked to an application. If you already have an application on Clever Cloud and want to link it to the current local folder:\nclever link your_app_name_or_ID Configure environment variables Next, we configure the application with a medium build instance to quickly generate static files. The host instance is nano-sized, enough for a simple website. As Clever Cloud is based on standards, you only need to define a few variables:\nclever scale --build-flavor M clever scale --flavor nano clever env set CC_NODE_VERSION \"20\" clever env set CC_WEBROOT \"/build\" clever env set CC_OVERRIDE_BUILDCACHE \"/build\" clever env set CC_PRE_BUILD_HOOK \"npm install\" clever env set CC_POST_BUILD_HOOK \"npx docusaurus build\" Push your code Once you complete these steps, commit your content to the local repository and deploy it:\ngit add . git commit -m \"First deploy\" clever deploy clever open You can display your website’s URL or add a custom domain to it (you’ll need to configure DNS):\nclever domain clever domain add your.website.tld "},"title":"Docusaurus"},"/developers/guides/ekg-statsd-haskell-metrics/":{"data":{"":"","overview#Overview":"In Haskell, metrics are usually gathered with EKG.\nThe package ekg-statsd allows to push EKG metrics over statsd. EKG allows you to have access to GC metrics, make sure you compile your application with \"-with-rtsopts=-T -N\" to enable profiling.\nIf you’re using warp, you can use wai-middleware-metrics to report request distributions (request count, responses count aggregated by status code, responses latency distribution).\nConfigure logs for your Haskell application You need the following packages in your dependencies:\nekg-core ekg-statsd scotty wai-middleware-metrics Then add this Hello World code to your application and modify it to fit your needs:\n{-# LANGUAGE OverloadedStrings #-} import Control.Monad (when) import Network.Wai.Metrics (WaiMetrics, metrics, registerWaiMetrics) import System.Metrics (newStore, registerGcMetrics) import System.Remote.Monitoring.Statsd (defaultStatsdOptions, forkStatsd) import Web.Scotty handleMetrics :: IO WaiMetrics handleMetrics = do store \u003c- newStore registerGcMetrics store waiMetrics \u003c- registerWaiMetrics store sendMetrics \u003c- maybe False (== \"true\") \u003c$\u003e lookupEnv \"ENABLE_METRICS\" when sendMetrics $ do putStrLn \"statsd reporting enabled\" forkStatsd defaultStatsdOptions store return () return waiMetrics main = do waiMetrics \u003c- handleMetrics scotty 8080 $ do middleware $ metrics waiMetrics get \"/\" $ html $ \"Hello world\" "},"title":"Ekg-statsd"},"/developers/guides/eleventy/":{"data":{"":"","configure-environment-variables#Configure environment variables":"","create-a-static-application#Create a static application":"","push-your-code#Push your code":"If you need an example source code, get 11ty base blog (you’ll need git and Node.js):\ngit clone https://github.com/11ty/eleventy-base-blog myStaticApp Create a static application You can create an application in our Console or through Clever Tools:\nnpm i -g clever-tools clever login cd myStaticApp clever create -t static-apache myStaticApp To deploy on Clever Cloud, your local folder need to be a git repository (if not, git init) linked to an application. If you already have an application on Clever Cloud and want to link it to the current local folder:\nclever link your_app_name_or_ID Configure environment variables Next, we configure the application with a medium build instance to quickly generate static files. The host instance is nano-sized, enough for a simple website. As Clever Cloud is based on standards, you only need to define a few variables:\nclever scale --build-flavor M clever scale --flavor nano clever env set CC_NODE_VERSION \"20\" clever env set CC_WEBROOT \"/_site\" clever env set CC_OVERRIDE_BUILDCACHE \"/_site\" clever env set CC_PRE_BUILD_HOOK \"npm install\" clever env set CC_POST_BUILD_HOOK \"npx @11ty/eleventy\" Push your code Once you complete these steps, commit your content to the local repository and deploy it:\ngit add . git commit -m \"First deploy\" clever deploy clever open You can display your website’s URL or add a custom domain to it (you’ll need to configure DNS):\nclever domain clever domain add your.website.tld "},"title":"Eleventy (11ty)"},"/developers/guides/fluentd/":{"data":{"":"","configure-your-fluentd--docker-application#Configure your Fluentd + Docker application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"Overview Since you deploy microservices on Clever Cloud, you may need some data pipes between your services to:\ncollect data from your PostgreSQL to create Elasticsearch indexes for your website search engine collect application logs to analyze them with Elasticsearch, then archive them with S3 collect Apache access logs to analyze them in MongoDB extract data from the database of your PHP/MySQL application to transform then load them in your other node.js/PostgreSQL application and many more … Fluentd is an open source data collector written in Ruby, which lets you unify the data collection and consumption for a better use and understanding of data.\nℹ️ Ruby application on Clever Cloud requires Puma webserver but fluentd is using excon. Create an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Fluentd + Docker application Mandatory configuration To follow this tutorial, you will need:\nRuby \u003e= 2.4.4 (w/ Rubygems) Bundler Docker Git curl a Ruby versions manager ℹ️ To manage your gems and ruby versions, we recommend rbenv. My application does not exists already Create a fluentd application locally mkdir myFluentd cd myFluentd touch Gemfile Dockerfile go.sh td-agent.conf chmod +x go.sh Inside Gemfile put the following:\nsource 'https://rubygems.org' ruby '2.4.4' gem 'fluentd' gem 'fluent-plugin-td' Then run bundler to install dependencies and generate your Gemfile.lock\nbundle install Clever Cloud needs that your application answers on requests made on 0.0.0.0:8080, we’ll use a PORT environment variable for local test purposes (this variable is automatically setup on each application). Inside td-agent.conf put the following:\n\u003csource\u003e @type monitor_agent bind 0.0.0.0 port \"#{ENV['PORT']}\" \u003c/source\u003e Inside go.sh put the following:\n#!/bin/sh bundle exec fluentd --use-v1-config -c td-agent.conf echo \"🌍 Fluentd server started\" Test locally Start you service\nPORT=9292 ./go.sh Verify that it responds to requests\ncurl 0.0.0.0:9292 You can now read My application already exists\nFine tune you application You can update your configuration with all inputs, filters and outputs you need or check for a community based plugin.\nMy application already exists Prepare your application for deployment Create a Dockerfile at the root of your project and put inside the following (assuming your start script is in go.sh):\nFROM ruby:2.4.4 EXPOSE 8080 COPY Gemfile Gemfile.lock td-agent.conf go.sh ./ RUN bundle config --global frozen 1 RUN bundle install RUN chmod +x go.sh CMD [ \"/go.sh\" ] Environment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Fluentd"},"/developers/guides/go-echoip/":{"data":{"":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"EchoIP is a simple service for looking up your IP address.\nThis doc explains how to install and configure EchoIP from source, and how to deploy it as a Go application on Clever Cloud.\nHow to Configure and Deploy EchoIP on Clever Cloud Download EchoIP You can download EchoIP from https://github.com/mpolden/echoip and create a new origin.\nFirst clone EchoIP’s repository:\n~ $ git clone https://github.com/mpolden/echoip.git ~ $ cd echoip Configure clevercloud/go.json Create the necessary files to build and run the application:\nechoip/ ~ $ mkdir clevercloud echoip/ ~ $ cat \u003c\u003c EOF \u003e clevercloud/go.json { \"deploy\": { \"makefile\": \"Makefile\", \"main\": \"../go_home/bin/echoip\" } } EOF echoip/ ~ $ git add clevercloud/ echoip/ ~ $ git commit -m \"add clevercloud files\" clevercloud/ Setting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nDefine necessary environment variables (this is specific to EchoIP):\nechoip/ ~ $ clever env set CC_RUN_COMMAND \"~/go_home/bin/echoip -H X-Forwarded-For\" Your environment variable has been successfully saved Git Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nAdd the clevercloud git remote:\nechoip/ ~ $ git remote add clevercloud $(jq -r '.apps[0].git_ssh_url' \u003c .clever.json) Push the app for deployment:\nechoip/ ~ $ git push clevercloud master Check the deployment logs:\nechoip/ ~ $ clever logs ","how-to-configure-and-deploy-echoip-on-clever-cloud#How to Configure and Deploy EchoIP on Clever Cloud":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Go - Echoip"},"/developers/guides/hexo/":{"data":{"":"","configure-environment-variables#Configure environment variables":"","create-a-static-application#Create a static application":"","push-your-code#Push your code":"If you need an example source code, get Cactus (you’ll need git and Node.js):\ngit clone https://github.com/probberechts/hexo-theme-cactus myStaticApp For this project to work, don’t import the theme with git clone but as a submodule:\ngit submodule add https://github.com/probberechts/hexo-theme-cactus.git themes/cactus Create a static application You can create an application in our Console or through Clever Tools:\nnpm i -g clever-tools clever login cd myStaticApp clever create -t static-apache myStaticApp To deploy on Clever Cloud, your local folder need to be a git repository (if not, git init) linked to an application. If you already have an application on Clever Cloud and want to link it to the current local folder:\nclever link your_app_name_or_ID Configure environment variables Next, we configure the application with a medium build instance to quickly generate static files. The host instance is nano-sized, enough for a simple website. As Clever Cloud is based on standards, you only need to define a few variables:\nclever scale --build-flavor M clever scale --flavor nano clever env set CC_NODE_VERSION \"20\" clever env set CC_WEBROOT \"/public\" clever env set CC_OVERRIDE_BUILDCACHE \"/public\" clever env set CC_PRE_BUILD_HOOK \"npm i -g hexo \u0026\u0026 npm install\" clever enc set CC_POST_BUILD_HOOK \"hexo generate\" Push your code Once you complete these steps, commit your content to the local repository and deploy it:\ngit add . git commit -m \"First deploy\" clever deploy clever open You can display your website’s URL or add a custom domain to it (you’ll need to configure DNS):\nclever domain clever domain add your.website.tld "},"title":"Hexo"},"/developers/guides/hugo-static-s3/":{"data":{"":"When creating a static website, it’s possible to host it using a runtime. You can also use Cellar, a S3-compatible object storage. This hosting method saves time on configuration and application management, and is fast.\nTo do so, you need:\na Clever Cloud account Hugo on your machine to have created your website files with Hugo a Cellar add-on; if you have never created an add-on, you can follow this guide ","bucket-creation-and-management#Bucket creation and management":"To create a bucket:\nFollow the bucket creation instructions, or use third party software like s3cmd. ⚠️ Your bucket name must match the domain name you want to use. If your domain name is my-static-website.com, your bucket name must be : my-static-website.com. To use a custom domain, for example cdn.example.com, you need to create a bucket named exactly like your domain:\ns3cmd --host-bucket=cellar-c2.services.clever-cloud.com mb s3://cdn.example.com Then, create a CNAME record on your domain pointing to cellar-c2.services.clever-cloud.com..","hugo-configuration-for-cellar#Hugo configuration for Cellar":"Hugo doesn’t know by default the path to your bucket in your Cellar. You have to add a few things to guide the deployment process.\nIn the folder of your website, you’ll find Hugo’s configuration file:\nhugo.toml hugo.yaml hugo.json Open it, then add the following (according to the programing language):\nJSONYAMLTOML JSON\nhugo.json{ \"deployment\": { \"targets\": [ { \"name\": \"(a name for your own reference)\", \"URL\": \"s3://\u003cBUCKET_NAME\u003e?endpoint=https://\u003cCELLAR_HOST\u003e\u0026region=fr-par\" } ] } } YAML\nhugo.yamldeployment: targets: - name: \"(a name for your own reference)\" - URL: \"s3://\u003cBUCKET_NAME\u003e?endpoint=https://\u003cCELLAR_HOST\u003e\u0026region=fr-par\" TOML\nhugo.toml[deployment] [[deployment.targets]] name: \"(a name for your own reference)\" URL: \"s3://\u003cBUCKET_NAME\u003e?endpoint=https://\u003cCELLAR_HOST\u003e\u0026region=fr-par\" The deployment name is arbitrary and for your own reference: “production”, “test”, anything you’d like. The cellar host address can found on your Clever Cloud console: select your Cellar and you’ll have the “Host” field. The address looks like: cellar-c2.services.clever-cloud.com Save your configuration file: Hugo now knows where to send file when deploying.\nTo deploy, proceed as usual: hugo to build the website locally, then hugo deploy to push files through Cellar. If all the steps have been correctly completed, you are now able to access your website with: https://\u003cBUCKET_NAME\u003e.\u003cCELLAR_HOST\u003e\nIs’s possible to encounter an error where the website warns the user with a “not secure” message. This happens when the SSL certificate was not properly generated. You can manually generate one certificate by creating an application, then adding the domain name from the “domain” tab. The certification propagation takes about 10-15mn.\nIf you still encounter an issue at this point, please contact our support team.","public-access-policy#Public access policy":"By default, your bucket is only visible and manageable an authenticated user. To make your bucket publicly accessible, you have to apply a policy to the bucket\n⚠️ This makes all of your bucket’s objects publicly readable. Be careful that there aren’t objects you don’t want publicly exposed. To set your bucket as public, you have to apply the following policy which you can save in a file named policy.json:\npolicy.json{ \"Id\": \"Policy1587216857769\", \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"Stmt1587216727444\", \"Action\": [ \"s3:GetObject\" ], \"Effect\": \"Allow\", \"Resource\": \"arn:aws:s3:::\u003cbucket-name\u003e/*\", \"Principal\": \"*\" } ] } Replace the \u003cbucket-name\u003e with your bucket name in the policy file. Don’t change the Version field to the current date, keep it as is.\nNow, you can set the policy to your bucket using s3cmd:\ns3cmd setpolicy ./policy.json s3://\u003cbucket-name\u003e If you encounter errors, you might need to specify the configuration file path:\ns3cmd setpolicy ./policy.json -c path/to/s3cfg.txt s3://\u003cbucket-name\u003e All of your objects should now be publicly accessible. If needed, you can delete this policy by using:\ns3cmd delpolicy s3://\u003cbucket-name\u003e The original ACL should apply to all of your objects after that."},"title":"Static hosting with Cellar"},"/developers/guides/hugo/":{"data":{"":"","404-redirections#404 Redirections":"Since your are using CC_WEBROOT environment variable, this is where Apache is going to looks for directives. To allow redirecting to your 404.html theme or custom page in Hugo, put the following .htaccess file in your /static folder :\n.htaccessRewriteEngine On ErrorDocument 404 /404.html This file will be copied to the root of your web server in /public on build.","configure-environment-variables-and-deploy-script#Configure environment variables and deploy script":"","create-a-static-application#Create a static application":"","push-your-code#Push your code":"If you need an example source code, use Theme mini (you’ll need git and Hugo):\ngit clone https://github.com/nodejh/hugo-theme-mini myStaticApp Create a static application You can create an application in our Console or through Clever Tools:\nnpm i -g clever-tools clever login cd myStaticApp clever create -t static-apache myStaticApp To deploy on Clever Cloud, your local folder need to be a git repository (if not, git init) linked to an application. If you already have an application on Clever Cloud and want to link it to the current local folder:\nclever link your_app_name_or_ID Configure environment variables and deploy script Next, configure the application with a medium build instance to quickly generate static files. The host instance is nano-sized, enough for a simple website. As Clever Cloud is based on standards, you only need to define a few variables:\nclever scale --build-flavor M clever scale --flavor nano clever env set CC_WEBROOT \"/public\" clever env set CC_OVERRIDE_BUILDCACHE \"/public\" clever env set CC_PRE_BUILD_HOOK \"bash setup_hugo.sh\" clever env set CC_POST_BUILD_HOOK \"hugo --minify --gc\" Edit the deploy script (setup_hugo.sh) with this content:\nHUGO_VERSION=\"0.121.1\" HUGO_URL=\"https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz\" DEST_BIN=\"${HOME}/.local/bin\" FILENAME=\"hugo.tar.gz\" # Download Hugo Extended and place it in a folder in the $PATH curl --create-dirs -s -L -o ${DEST_BIN}/${FILENAME} ${HUGO_URL} cd ${DEST_BIN} tar xvf ${FILENAME} -C ${DEST_BIN} rm ${FILENAME} Push your code Once you complete these steps, commit your content to the local repository and deploy it:\ngit add . git commit -m \"First deploy\" clever deploy clever open You can display your website’s URL or add a custom domain to it (you’ll need to configure DNS):\nclever domain clever domain add your.website.tld "},"title":"Hugo"},"/developers/guides/kibana/":{"data":{"":" ⚠️ To deploy a custom Kibana, you need to ask Clever Cloud Support team to enable superuser permissions for your user. ","deploy-kibana-on-localhost#Deploy Kibana on localhost":"The Kibana version should match with the ElasticSearch version.\nFollow these steps :\nDownload/unzip Kibana in version which match with your Elastic Stack version Edit kibana.yml : line 43 : elasticsearch.host: \u003celastic-addon-host\u003e:443 line 49 : elasticsearch.username: kibana line 50 : elasticsearch.password: \u003cpassword\u003e Launch Kibana (\u003cpath_to_kibana\u003e/bin/kibana) Go to Kibana through the dedicated local address Connect to ElasticSearch with your Elastic username and password ","enable-kibana-with-your-elastic-stack-add-on#Enable Kibana with your Elastic Stack add-on":"Kibana can be enabled at the add-on creation. Choose “Create an add-on” \u003e “Elastic Stack”. Select your plan, applications which will use the Elastic Stack and name the add-on. On the “options” step, enable Kibana. Then, confirm the options and your add-on will start with a Kibana instance.\nCustomize the Kibana configuration file The configuration is set with this deployment hook : CC_PRE_RUN_HOOK = curl https://api.clever-cloud.com/v2/providers/es-addon/kibana-setup/\u003cyour elastic version\u003e | sh\nTo modify this default configuration (Configuration file for Kibana 8.3.3), you need to host your own config file (we strongly recommend Cellar).\nCheck other available configuration file on Github\nDisable SSO authentication To disable SSO authentication and use elastic users instead, you need to modify Kibana’s configuration file and CC_PRE_RUN_HOOK in environment variables.\nFor example for Kibana 8.3.3: CC_PRE_RUN_HOOK = curl https://raw.githubusercontent.com/CleverCloud/custom-kibana-config/master/8.3.3/no-sso-8.3.3 | sh\nRemember, you need to ask Clever Cloud Support team to grant superuser permissions to your user. After that, you will be able to add additional users via Kibana.\nAdd custom domain name You need to disable SSO authentication first. Then, you will be able to add a custom domain name in “Domain name” tab of your Kibana app.","overview#Overview":"Kibana is the web interface available on the Clever Cloud’s platform to manage your Elastic Stack.\nBy default, you can enable Kibana when you create an Elastic Stack add-on."},"title":"Kibana"},"/developers/guides/lume-deno/":{"data":{"":"","configure-environment-variables-and-deploy-script#Configure environment variables and deploy script":"","create-a-static-application#Create a static application":"","push-your-code#Push your code":"If you need an example source code, use Lume website (you’ll need git and Deno):\ngit clone https://github.com/lumeland/lume.land myStaticApp Create a static application You can create an application in our Console or through Clever Tools:\nnpm i -g clever-tools clever login cd myStaticApp clever create -t static-apache myStaticApp To deploy on Clever Cloud, your local folder need to be a git repository (if not, git init) linked to an application. If you already have an application on Clever Cloud and want to link it to the current local folder:\nclever link your_app_name_or_ID Configure environment variables and deploy script Next, configure the application with a medium build instance to quickly generate static files. The host instance is nano-sized, enough for a simple website. As Clever Cloud is based on standards, you only need to define a few variables:\nclever scale --build-flavor M clever scale --flavor nano clever env set CC_WEBROOT \"/_site\" clever env set CC_OVERRIDE_BUILDCACHE \"/_site\" clever env set CC_PRE_BUILD_HOOK \"bash setup_deno.sh\" clever env set CC_POST_BUILD_HOOK \"deno task lume\" Edit the deploy script (setup_deno.sh) with this content:\nDENO_VERSION=\"1.39.1\" DENO_URL=\"https://github.com/denoland/deno/releases/download/v${DENO_VERSION}/deno-x86_64-unknown-linux-gnu.zip\" DEST_BIN=\"${HOME}/.local/bin\" FILENAME=\"deno.zip\" # Download Deno and place it in a folder in the $PATH curl --create-dirs -s -L -o ${DEST_BIN}/${FILENAME} ${DENO_URL} cd ${DEST_BIN} unzip ${FILENAME} -d ${DEST_BIN} rm ${FILENAME} Push your code Once you complete these steps, commit your content to the local repository and deploy it:\ngit add . git commit -m \"First deploy\" clever deploy clever open You can display your website’s URL or add a custom domain to it (you’ll need to configure DNS):\nclever domain clever domain add your.website.tld "},"title":"Lume (Deno)"},"/developers/guides/mdbook/":{"data":{"":"","configure-environment-variables#Configure environment variables":"","create-a-static-application#Create a static application":"","push-your-code#Push your code":"If you need an example source code, init a new project (you’ll need git and Rust):\ncargo install mdbook mdbook init myStaticApp --title=\"my mdBook\" --ignore=git Create a static application You can create an application in our Console or through Clever Tools:\nnpm i -g clever-tools clever login cd myStaticApp clever create -t static-apache myStaticApp To deploy on Clever Cloud, your local folder need to be a git repository (if not, git init) linked to an application. If you already have an application on Clever Cloud and want to link it to the current local folder:\nclever link your_app_name_or_ID Configure environment variables Next, we configure the application with a medium build instance to quickly generate static files. The host instance is nano-sized, enough for a simple website. As Clever Cloud is based on standards, you only need to define a few variables:\nclever scale --build-flavor M clever scale --flavor nano clever env set CC_WEBROOT \"/book\" clever env set CC_OVERRIDE_BUILDCACHE \"/book\" clever env set CC_PRE_BUILD_HOOK \"cargo install mdbook\" clever env set CC_POST_BUILD_HOOK \"/home/bas/.cargo/bin/mdbook build\" Push your code Once you complete these steps, commit your content to the local repository and deploy it:\ngit add . git commit -m \"First deploy\" clever deploy clever open You can display your website’s URL or add a custom domain to it (you’ll need to configure DNS):\nclever domain clever domain add your.website.tld "},"title":"mdBook"},"/developers/guides/mkdocs/":{"data":{"":"","configure-environment-variables#Configure environment variables":"","create-a-static-application#Create a static application":"","push-your-code#Push your code":"If you need an example source code, init a new project (you’ll need git, Python and pip):\n# Use pip or pip3 depending on your system pip install mkdocs mkdocs new myStaticApp Create a static application You can create an application in our Console or through Clever Tools:\nnpm i -g clever-tools clever login cd myStaticApp clever create -t static-apache myStaticApp To deploy on Clever Cloud, your local folder need to be a git repository (if not, git init) linked to an application. If you already have an application on Clever Cloud and want to link it to the current local folder:\nclever link your_app_name_or_ID Configure environment variables Next, we configure the application with a medium build instance to quickly generate static files. The host instance is nano-sized, enough for a simple website. As Clever Cloud is based on standards, you only need to define a few variables:\nclever scale --build-flavor M clever scale --flavor nano clever env set CC_WEBROOT \"/site\" clever env set CC_OVERRIDE_BUILDCACHE \"/site\" clever env set CC_PRE_BUILD_HOOK \"python3 -m ensurepip --upgrade \u0026\u0026 pip3 install mkdocs\" clever env set CC_POST_BUILD_HOOK \"mkdocs build\" Push your code Once you complete these steps, commit your content to the local repository and deploy it:\ngit add . git commit -m \"First deploy\" clever deploy clever open You can display your website’s URL or add a custom domain to it (you’ll need to configure DNS):\nclever domain clever domain add your.website.tld "},"title":"MkDocs"},"/developers/guides/moodle/":{"data":{"":"Moodle is a learning platform designed to provide educators, administrators and learners with a single robust, secure and integrated system to create personalised learning environments.\nThis doc explains how to configure Moodle from source. Alternatively, an already configured repository exists as well on Clever Cloud’s GitHub page.","-further-help#🎓 Further Help":" Moodle DocumentationCheck Moodle installation guide PHPDeploy a PHP application on Clever Cloud MySQLYour self-hosted managed relational database FS BucketExternal File System for your apps CRONSet up a CRON job for your app See Moodle installation documentation for further help and development configuration.","cron-for-moodle#Cron for Moodle":"Moodle recommends to set up a Cron job that runs every minute. For the Cron to execute as a PHP file, you will need to add a shebang at the very top of admin/cli/cron.php, like this: #!/usr/bin/env php.\nDeclare the cron in Clever Cloud Create a clevercloud/cron.json file with a string to run admin/cli/cron.phpevery minute:\nclevercloud/cron.json[ \"* * * * * $ROOT/admin/cli/cron.php\" ] You might encounter errors when the Cron tries to access moodledata in your FS Bucket. For FS Bucket backups, look for a dedicated tool like rclone.\nNote: this repository is already configured to run /admin/cli/cron.php every minute as a cron job.","how-to-configure-and-deploy-moodle-on-clever-cloud#How to Configure and Deploy Moodle on Clever Cloud":" Download Moodle You can download Moodle from https://download.moodle.org and initialize a Git repository at root with git init.\nConfigure config.php Duplicate config-dist.php and rename it config.php. Update the following variables as follows:\nconfig.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 ?php // Moodle configuration file unset($CFG); global $CFG; $CFG = new stdClass(); $CFG-\u003edbtype = 'mysqli'; $CFG-\u003edblibrary = 'native'; $CFG-\u003edbhost = getenv(\"MYSQL_ADDON_HOST\"); $CFG-\u003edbname = getenv(\"MYSQL_ADDON_DB\"); $CFG-\u003edbuser = getenv(\"MYSQL_ADDON_USER\"); $CFG-\u003edbpass = getenv(\"MYSQL_ADDON_PASSWORD\"); $CFG-\u003eprefix = 'mdl_'; $CFG-\u003edboptions = array ( 'dbpersist' =\u003e 0, 'dbport' =\u003e getenv(\"MYSQL_ADDON_PORT\"), 'dbsocket' =\u003e '', 'dbcollation' =\u003e 'utf8mb4_0900_ai_ci', ); $CFG-\u003ewwwroot = getenv(\"URL\"); $CFG-\u003edataroot = getenv(\"APP_HOME\") . '/moodledata'; $CFG-\u003eadmin = getenv(\"ADMIN\"); $CFG-\u003edirectorypermissions = 0777; $CFG-\u003esslproxy = true; require_once(__DIR__ . '/lib/setup.php'); // There is no php closing tag in this file, // it is intentional because it prevents trailing whitespace problems! Commit changes.\nDeclare the PHP Application On Clever Cloud Console, click Create \u003e An application and choose a PHP application with Git deployment. Add a MySQL add-on during the process.\nSet Up Environment Variables Add the following environment variables to tour PHP application:\nCC_PHP_VERSION=\"8\" MAX_INPUT_VARS=\"5000\" URL=\"\u003cyour-url\" If you don’t have an domain for your Moodle application yet, you’ll be able to add a test domain provided by Clever Cloud in step 6.\nSet Up moodledata Folder In this step you enable storage outside of your application, which Moodle requires to run. Use a File System Bucket to store all uploaded files and appearance set ups away from the application server, as recommended by Moodle.\nCreate an FS Bucket add-on and link it to your PHP application. In your FS Bucket dashboard, find the path variable. It should look like this: CC_FS_BUCKET=/some/empty/folder:bucket-\u003cbucket_id\u003e.\nAdd this variable to your PHP application and replace /some/empty/folder by /moodledata. Don’t forget to update changes.\nSet Up Domain Moodle needs an URL declared in variables to work properly. You can set it up in Domains names, from your PHP application menu. If you don’t have a domain name yet, you can use a cleverapp.io subdomain provided by Clever Cloud for test purposes.\nDon’t forget to update URL=\"\u003cyour-url\" if you haven’t yet.\nDeploy Get the remote in your application menu \u003e Information \u003e Deployment URL and add it to Git with git remote add clever \u003cclever-remote-url\u003e. Then, push your code with git push clever -u master\n💡 If you get a reference error when pushing, try this: git push clever main:master."},"title":"Moodle"},"/developers/guides/node-js-mongo-db/":{"data":{"":"","configure-your-database#Configure your database":"","configure-your-nodejs--mongodb-application#Configure your Node.js + MongoDB application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"Overview The goal of this article is to show you how to deploy a Node.js + MongoDB application on Clever Cloud. The application is a very simple todo list. You can add and delete values. More information about the application:\nGitHub repo Clever Cloud demo Create an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Node.js + MongoDB application My application does not exists already If you want to test easily a Node.js deployment on Clever Cloud, just clone the GitHub repo.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nConfigure your database Make sure you have created a MongoDB add-on in the Clever Cloud console, and that it’s linked to your application. When it’s done, you will be able to access all of your add-on environment variables from the application.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Node.js \u0026 MongoDB"},"/developers/guides/node-statsd-nodejs-metrics/":{"data":{"":"","overview#Overview":"In Node.js, you can use the node-statsd package to push custom metrics.\nConfigure metrics for your Node.js application You only need the node-statsd package in your dependencies:\nThen add this Hello World code to your application and modify it to fit your needs:\n// npm install node-statsd const StatsD = require('node-statsd'), client = new StatsD(); // Increment: Increments a stat by a value (default is 1) client.increment('my_counter'); // Gauge: Gauge a stat by a specified amount client.gauge('my_gauge', 123.45); "},"title":"Node-statsd"},"/developers/guides/nuxt/":{"data":{"":"","configure-environment-variables#Configure environment variables":"","create-a-static-application#Create a static application":"","push-your-code#Push your code":"If you need an example source code compatible with Nuxt static generation, get Zooper (you’ll need git and Node.js):\ngit clone https://github.com/fayazara/zooper myStaticApp Create a static application You can create an application in our Console or through Clever Tools:\nnpm i -g clever-tools clever login cd myStaticApp clever create -t static-apache myStaticApp To deploy on Clever Cloud, your local folder need to be a git repository (if not, git init) linked to an application. If you already have an application on Clever Cloud and want to link it to the current local folder:\nclever link your_app_name_or_ID Configure environment variables Next, we configure the application with a medium build instance to quickly generate static files. The host instance is nano-sized, enough for a simple website. As Clever Cloud is based on standards, you only need to define a few variables:\nclever scale --build-flavor M clever scale --flavor nano clever env set CC_NODE_VERSION \"20\" clever env set CC_WEBROOT \"/.output/public\" clever env set CC_OVERRIDE_BUILDCACHE \"/.output/public\" clever env set CC_PRE_BUILD_HOOK \"npm install\" clever env set CC_POST_BUILD_HOOK \"npx nuxi generate\" Push your code Once you complete these steps, commit your content to the local repository and deploy it:\ngit add . git commit -m \"First deploy\" clever deploy clever open You can display your website’s URL or add a custom domain to it (you’ll need to configure DNS):\nclever domain clever domain add your.website.tld "},"title":"Nuxt"},"/developers/guides/pgpool/":{"data":{"":"","how-to-configure-pgpool-ii#How to configure Pgpool-II":"Generate direct variables for PG Go to the “Add-on dashboard” tab of your PostgreSQL add-ons and click on the “Generate direct hostname and port” button.\nEnable Pgpool-II In order to configure Pgpool-II, the first thing to do is to link your PostgreSQL add-on. To do that, you can go to the Service Dependencies page of your application and select your PostgreSQL add-on.\nOnce linked, you can enable the Pgpool-II feature by defining the following environment variable: CC_ENABLE_PGPOOL=true. If you ever need to stop using Pgpool-II, you can remove this variable or set it to false.\nYour application will use a Unix Domain Socket to connect to Pgpool-II. Unix domain sockets are faster than TCP sockets because there is no handshake and the connection is made locally on the same machine. A special environment variable will be injected to your environment variables: CC_PGPOOL_SOCKET_PATH. This variable contains the path to the Unix Domain Socket you have to connect to. See Usage below for some examples on how to use it.\nThe available Pgpool-II variables and their descriptions are available on our environment variables reference page.\nConcurrent session and pool size You can use the CC_PGPOOL_NUM_INIT_CHILDREN and CC_PGPOOL_MAX_POOL environment variables to set the number of concurrent sessions and the number of connection pool caches per connection.\nLet’s take an example where you have 3 PostgreSQL servers, and the CC_PGPOOL_NUM_INIT_CHILDREN variable configured with a value of 32.\nOn startup, Pgpool-II will start 32 processes, one process per connection. The CC_PGPOOL_MAX_POOL variable is used to configure the number of cached connections per connection (process). This option is mostly used when you have different credentials for the same PostgreSQL server (database, user…). But in the case of Streaming mode on Clever Cloud, you have access to only one database, and the credentials are the same on all add-ons with binary replication. You should not need to change the default value of this variable (1 by default).\nAn example of the SHOW POOL_POOLS; command with CC_PGPOOL_NUM_INIT_CHILDREN=32 and CC_PGPOOL_MAX_POOL=1:\npsql -U u1mgltc2ezvkylo2cjno -d bjzfhkl5qcdhdqatyqjk bjzfhkl5qc**********=\u003e show pool_pools; pool_pid | start_time | pool_id | backend_id | database | username | create_time | pool_backendpid | ----------+---------------------+---------+------------+----------------------+----------------------+---------------------+-----------------+ 3526 | 2021-06-02 15:22:12 | 0 | 0 | bjzfhkl5qcdhdqatyqjk | u1mgltc2ezvkylo2cjno | 2021-06-02 15:22:35 | 1520665 | 3526 | 2021-06-02 15:22:12 | 0 | 1 | bjzfhkl5qcdhdqatyqjk | u1mgltc2ezvkylo2cjno | 2021-06-02 15:22:35 | 1665071 | 3526 | 2021-06-02 15:22:12 | 0 | 2 | bjzfhkl5qcdhdqatyqjk | u1mgltc2ezvkylo2cjno | 2021-06-02 15:22:35 | 531483 | 3527 | 2021-06-02 15:22:12 | 0 | 0 | | | | 0 | 3527 | 2021-06-02 15:22:12 | 0 | 1 | | | | 0 | 3527 | 2021-06-02 15:22:12 | 0 | 2 | | | | 0 | 3528 | 2021-06-02 15:22:12 | 0 | 0 | | | | 0 | 3528 | 2021-06-02 15:22:12 | 0 | 1 | | | | 0 | 3528 | 2021-06-02 15:22:12 | 0 | 2 | | | | 0 | ... | ... | . | . | | | | . | We can see the 32 available processes (3526, 3527, 3528…), and active connections for process 3526, with an open connection for each PostgreSQL server (1520665, 1665071 and 531483).\nIf a process remains inactive for more than 300 seconds, it will be deleted and a new process will take its place. This value can be configured with the CC_PGPOOL_CHILD_LIFE_TIME variable. This is a measure to prevent memory leaks and other unexpected errors in Pgpool-II children.\nCached connections for each process do not have a default expiration time, but you can set one if needed with the CC_PGPOOL_CONNECTION_LIFE_TIME variable.\nIt’s also possible to specify the lifetime of a Pgpool-II child process (CC_PGPOOL_CHILD_MAX_CONNECTIONS) and the time in seconds to disconnect a client if it remains inactive since the last request (CC_PGPOOL_CLIENT_IDLE_LIMIT).\nReplication and load balancing Use Pgpool-II to distribute the load and separate WRITE and READ queries between your PostgreSQL servers.\nWhen using the Streaming mode, it’s not Pgpool-II that manages the replication of your databases. Replication must be set up on the PostgreSQL side, otherwise known as binary, Hot Standby or Streaming replication. To schedule this procedure, you can contact our support at support@clever-cloud.com or make a request via our sales form.\nOnce replication is in place, you can use the CC_PGPOOL_FOLLOWERS environment variable to add the followers to your Pgpool-II configuration. This variable is in JSON format, and must contain the host, port and weight of each follower.\nℹ️ For the HOST and PORT, you must use the values of the POSTGRESQL_ADDON_DIRECT_HOST and POSTGRESQL_ADDON_DIRECT_PORT variables. An example of the CC_PGPOOL_FOLLOWERS variable with two followers:\n1 2 3 4 5 6 7 8 9 10 11 12 [ { \"hostname\": \"\u003cHOST\u003e\", \"port\": \"\u003cPORT\u003e\", \"weight\": \"1\" }, { \"hostname\": \"\u003cHOST\u003e\", \"port\": \"\u003cPORT\u003e\", \"weight\": \"1\" } ] The weight is used to specify the load balance ratio of the backends, you can also configure the weight of the leader with the CC_PGPOOL_LEADER_WEIGHT variable.\nℹ️ You can set a higher value for followers to avoid overloading the leader with SELECT queries that could be made on followers. Many other load balancing options are configurable with environment variables. You can refer to our environment variables reference page and the official Pgpool-II documentation for more information.\nHealth check Pgpool-II periodically connects to the configured PostgreSQL backends to detect any error on the servers or networks. If an error is detected, Pgpool-II performs failover or degeneration depending on the configurations.\nThe health check is not activated by default, but you can activate it with the CC_PGPOOL_HEALTH_CHECK_PERIOD variable.\nMany other health check options are configurable with environment variables, such as:\nCC_PGPOOL_HEALTH_CHECK_TIMEOUT: Specifies the timeout in seconds to give up connecting to the backend PostgreSQL if the TCP connect does not succeed within this time. CC_PGPOOL_HEALTH_CHECK_MAX_RETRIES: Specifies the maximum number of retries before giving up and initiating failover when health check fails. CC_PGPOOL_HEALTH_CHECK_RETRY_DELAY: Specifies the amount of time (in seconds) to sleep before retrying after a failed health check retries. CC_PGPOOL_CONNECT_TIMEOUT: Specifies the amount of time in milliseconds before giving up connecting to backend using connect() system call. You can consult the official Pgpool-II documentation to get more information about the health check.\nIn memory cache In memory cache saves the pair of SELECT statement and its result. If the same SELECT comes in, Pgpool-II returns the value from cache. This feature can be activated with the CC_PGPOOL_MEMORY_CACHE_ENABLED=on variable.\nMany other in memory cache options are configurable with environment variables, such as:\nCC_PGPOOL_MEMQCACHE_TOTAL_SIZE: Specifies the shared memory cache size in bytes. CC_PGPOOL_MEMQCACHE_MAX_NUM_CACHE: Specifies the number of cache entries. This is used to define the size of cache management space. CC_PGPOOL_MEMQCACHE_CACHE_BLOCK_SIZE: Specifies the cache block size. CC_PGPOOL_MEMQCACHE_EXPIRE: Specifies the life time of query cache in seconds. CC_PGPOOL_MEMQCACHE_AUTO_CACHE_INVALIDATION: Automatically deletes the cache related to the updated tables. CC_PGPOOL_MEMQCACHE_MAXCACHE: Specifies the maximum size in bytes of the SELECT query result to be cached. CC_PGPOOL_CACHE_SAFE_MEMQCACHE_TABLE_LIST: Specifies a comma-separated list of table names whose SELECT results should be cached by Pgpool-II. CC_PGPOOL_CACHE_UNSAFE_MEMQCACHE_TABLE_LIST: Specifies a comma-separated list of table names whose SELECT results should NOT be cached by Pgpool-II. You can consult the official Pgpool-II documentation to get more information about the in memory cache.\nScalability When the scalability of your application is enabled, you may need to tweak the CC_PGPOOL_NUM_INIT_CHILDREN value. This is what we are going to see here.\nAuto scalability will add or remove instances following your needs. This means that you may have multiple instances running at the same time for a certain period of time. If your application restarts, you will have your current instance number * 2 instances running in parallel while the deployment finishes and the old instances are stopped. A new deployment starts new instances alongside the old ones.\nThis means that have up to maximum scalability * 2 instances can run at the same time. And if all of your instances open the maximum connections they are allowed to, it means there will be up to maximum scalability * 2 * CC_PGPOOL_NUM_INIT_CHILDREN connections at the same time. We will call this result MaxCon.\n⚠️ Each PostgreSQL add-on has a connection limit which varies following the plan you are using. You must be sure that MaxCon doesn’t exceed your plan’s max connections. If it does, you might have issues connecting to the remote PostgreSQL add-on. You have to adjust CC_PGPOOL_NUM_INIT_CHILDREN to a number that makes sense for your scalability parameters. Example Let’s say that I’m hosting a simple PHP application on 1 XS instance, with a scalability that can go up to 4 M instances. And I’m using the PostgreSQL S Small Space plan which has a connection limit of 125.\nNow my application receives a lot of traffic and scales up to 4 M instances. But at the same time, I also need to deploy a hot fix. This means that 4 new M instances will be started, alongside the already existing 4 M instances. I need to make sure that MaxCon doesn’t go above 125.\nHere is the summary:\n8 instances: 4 currently running, 4 currently deploying my hot fix 125 max connections: the maximum number of connections of my PostgreSQL add-on’s plan 5 other connections: I want to be able to use PG Studio or any CLI tool at the same time, in case I need it CC_PGPOOL_NUM_INIT_CHILDREN = ( (125 - 5) / 8 ) = 15. If I set CC_PGPOOL_NUM_INIT_CHILDREN to 15, each instance should have enough connections to query the database without errors. And it also leaves me some spare connections (5) available if anything goes wrong and I need to connect to my database using a CLI tool or PG Studio.","tips--debug#Tips / debug":"Connecting to Pgpool-II Connect via ssh to your application and use the psql command.\nssh -t ssh@sshgateway-clevercloud-customers.services.clever-cloud.com \u003capp_id\u003e Then, launch the psql command with :\npsql Showing configured nodes You can use the SHOW POOL_NODES; command.\nbjzfhkl5qc**********=\u003e SHOW POOL_NODES; node_id | hostname | port | status | lb_weight | role | select_cnt | load_balance_node | ---------+-----------------------------------------------------------+------+--------+-----------+---------+------------+-------------------+ 0 | bjzfhkl5qc**********-postgresql.services.clever-cloud.com | 57** | up | 0.333333 | primary | 0 | false | 1 | b3diajq7iy**********-postgresql.services.clever-cloud.com | 57** | up | 0.333333 | standby | 2 | false | 2 | bmtwtemn40**********-postgresql.services.clever-cloud.com | 57** | up | 0.333333 | standby | 1 | true | Watching Pgpool-II processes You can use the SHOW POOL_PROCESSES; command to see processes waiting for connections and processing a connection.\nbjzfhkl5qc**********=\u003e SHOW POOL_PROCESSES; pool_pid | start_time | database | username | create_time | pool_counter ----------+---------------------+----------------------+----------------------+---------------------+-------------- 21554 | 2021-06-03 11:28:36 | bjzfhkl5qc********** | u5dh6v2ymn********** | 2021-06-03 11:28:48 | 1 11409 | 2021-06-02 19:54:53 | | | | 11410 | 2021-06-02 19:54:53 | | | | 21566 | 2021-06-03 11:29:20 | | | | Listing managed pools You can use the SHOW POOL_POOLS; command to see the list of pools managed by Pgpool-II.\nbjzfhkl5qc**********=\u003e SHOW POOL_POOLS; pool_pid | start_time | pool_id | backend_id | database | username | create_time | pool_backendpid | ----------+---------------------+---------+------------+----------------------+----------------------+---------------------+-----------------+ 21554 | 2021-06-03 11:28:36 | 0 | 0 | bjzfhkl5qc********** | u5dh6v2ymn********** | 2021-06-03 11:28:48 | 1549123 | 21554 | 2021-06-03 11:28:36 | 0 | 1 | bjzfhkl5qc********** | u5dh6v2ymn********** | 2021-06-03 11:28:48 | 1695967 | 21554 | 2021-06-03 11:28:36 | 0 | 2 | bjzfhkl5qc********** | u5dh6v2ymn********** | 2021-06-03 11:28:48 | 562378 | 11409 | 2021-06-02 19:54:53 | 0 | 0 | | | | 0 | 11409 | 2021-06-02 19:54:53 | 0 | 1 | | | | 0 | 11409 | 2021-06-02 19:54:53 | 0 | 2 | | | | 0 | 11410 | 2021-06-02 19:54:53 | 0 | 0 | | | | 0 | 11410 | 2021-06-02 19:54:53 | 0 | 1 | | | | 0 | 11410 | 2021-06-02 19:54:53 | 0 | 2 | | | | 0 | 21566 | 2021-06-03 11:29:20 | 0 | 0 | | | | 0 | 21566 | 2021-06-03 11:29:20 | 0 | 1 | | | | 0 | 21566 | 2021-06-03 11:29:20 | 0 | 2 | | | | 0 | Statistics of SQL commands You can use the SHOW POOL_BACKEND_STATS; command to see the statistics of SQL commands.\nbjzfhkl5qc**********=\u003e SHOW POOL_BACKEND_STATS; node_id | hostname | port | status | role | select_cnt | insert_cnt | update_cnt | delete_cnt | ---------+-----------------------------------------------------------+------+--------+---------+------------+------------+------------+------------+ 0 | bjzfhkl5qc**********-postgresql.services.clever-cloud.com | 57** | up | primary | 0 | 0 | 0 | 1 | 1 | b3diajq7iy**********-postgresql.services.clever-cloud.com | 57** | up | standby | 2 | 0 | 0 | 0 | 2 | bmtwtemn40**********-postgresql.services.clever-cloud.com | 57** | up | standby | 1 | 0 | 0 | 0 | Using the PCP command The PCP tool is pre-configured and available on your application.\npcp_pool_status -h /tmp -U pcp -w Managing nodes Attach or detach a given node to Pgpool-II;\npcp_pool_status -h /tmp -U pcp -w -n 0 pcp_pool_status -h /tmp -U pcp -w -n 0 Statistical data Display the statistical data of the health check on the given node ID\npcp_pool_status -h /tmp -U pcp -w -n 0 -v Node Id : 0 Host Name : bjzfhkl5qc**********-postgresql.services.clever-cloud.com Port : 57** Status : up Role : primary Last Status Change : 2021-06-02 19:54:53 Total Count : 0 Success Count : 0 Fail Count : 0 Skip Count : 0 Retry Count : 0 Average Retry Count : 0.000000 Max Retry Count : 0 Max Health Check Duration : 0 Minimum Health Check Duration : 0 Average Health Check Duration : 0.000000 Last Health Check : Last Successful Health Check : Last Skip Health Check : Last Failed Health Check : You can find all PCP commands in the official Pgpool-II documentation.","usage#Usage":" ℹ️ Please note that to connect to Pgpool-II, the default port 5432 must be used. So if you already have a different port set in your code, you have to change it or simply remove the port from the connection information. PHP using PDO Using PDO, you have to use the unix_socket option in your DSN:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u003c?php // This variable is injected during deployment $host = getenv(\"CC_PGPOOL_SOCKET_PATH\"); // Get the database name from the environment $database = getenv(\"POSTGRESQL_ADDON_DB\"); // Get the database user from the environment $user = getenv(\"POSTGRESQL_ADDON_USER\"); // Get the database password from the environment $password = getenv(\"POSTGRESQL_ADDON_PASSWORD\"); $dsn = \"pgsql:host=$host;dbname=$database;user=$user;password=$password\"; try { $conn = new PDO($dsn); if($conn){ echo \"Successfully connected to $dbname!\"; } } catch (PDOException $e){ echo $e-\u003egetMessage(); } ?\u003e WordPress For WordPress, you can change the DB_HOST variable in your wp-config.php:\n1 2 // To connect using a socket, the syntax is: `localhost:/path/to/socket` define( 'DB_HOST', \"localhost:\" . getenv(\"CC_PGPOOL_SOCKET_PATH\") ); Node.js On Node.js, using the pg npm package:\n1 2 3 4 5 6 7 8 9 10 11 12 13 const { Client } = require('pg'); client = new Client({ // This variable is injected during the deployment host: process.env[\"CC_PGPOOL_SOCKET_PATH\"], // Get the database name from the environment database: process.env[\"POSTGRESQL_ADDON_DB\"], // Get the database user from the environment user: process.env[\"POSTGRESQL_ADDON_USER\"], // Get the database password from the environment password: process.env[\"POSTGRESQL_ADDON_PASSWORD\"], }); client.connect(); ","whats-pgpool-ii#What\u0026rsquo;s Pgpool-II?":"Pgpool-II is a tool available on application instances to help manage your connection pool and load balancing of your PostgreSQL add-ons.\n⚠️ Pgpool-II is not available on Docker instances. If you want to use Pgpool-II, you can add it and configure it in your Dockerfile. What’s Pgpool-II? Pgpool-II is a proxy software that sits between PostgreSQL servers and a PostgreSQL database client.\nYou can read the official project page for more information.","why-use-pgpool-ii#Why use Pgpool-II?":"Connection pooling: Pgpool-II maintains established connections to the PostgreSQL servers, and reuses them whenever a new connection with the same properties (user name, database, protocol version, and other connection parameters if any) comes in. It reduces the connection overhead, and improves the system’s overall throughput.\nLoad balancing: If a database is replicated (because running in either replication mode or native replication mode), performing a SELECT query on any server will return the same result. Pgpool-II takes advantage of the replication feature in order to reduce the load on each PostgreSQL server. It does that by distributing SELECT queries among available servers, improving the system’s overall throughput. In an ideal scenario, read performance could improve proportionally to the number of PostgreSQL servers. Load balancing works best in a scenario where a lot of users execute many read-only queries at the same time.\nAutomated fail over: If one of the database servers goes down or becomes unreachable, Pgpool-II will detach it and will continue operations by using the rest of the database servers. Some sophisticated features that help for automated failovers including timeouts and retries.\nLimiting Exceeding Connections: PostgreSQL puts a limit on the amount of concurrent connections, so that new connections are rejected when this number is reached. Raising this maximum number of connections, however, increases resource consumption and has a negative impact on overall system performance. Pgpool-II also limits the number of concurrent connections, but extra connections will be queued instead of returning an error immediately. Or you can configure it to return an error when the connection limit is exceeded (4.1 or later).\nIn Memory Query Cache: In memory query cache allows to save a SELECT statement with its result. If an identical SELECT comes in, Pgpool-II returns the value from cache. Since neither SQL parsing nor access to PostgreSQL are involved, using in memory cache is extremely fast. On the other hand, it might be slower than the normal path in some cases, because it adds some overhead of storing cache data.\nThe various features are available in the official Pgpool documentation.\nℹ️ We only support the Streaming mode, which is the most used and recommended mode for Pgpool-II. If you need other modes or features that are not supported on Clever Cloud, please contact us at support@clever-cloud.com "},"title":"Pgpool-II"},"/developers/guides/play-framework-1/":{"data":{"":"","configure-your-scala--play-1-application#Configure your Scala + Play! 1 application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","enable-health-check-during-deployment#Enable health check during deployment":"Overview Clever Cloud supports Play 1.x applications natively. The present guide explains how to set up your application to run on Clever Cloud.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Scala + Play! 1 application Select Play! 1.x version Clever Cloud supports Play! 1.2, 1.3, 1.4, 1.5. You can select the Play! version for your application by setting the PLAY1_VERSION environment variable (or by putting it in a file named clevercloud/play1_version).\nThe PLAY1_VERSION environment variable can contain one of the following values:\n1.2 or 12 for Play! 1.2. 1.3 or 12 for Play! 1.3. 1.4 or 14 for Play! 1.4. 1.5 or 15 for Play! 1.5. Play! configuration with application.conf By default, your application will run on Clever Cloud with the option --%clevercloud.\nIt means that you can define special keys in your application.conf file that will be used only on Clever Cloud.\nYou can for example:\nset production mode so the files are compiled at startup time and the errors are logged in a file:\n%clevercloud.application.mode=prod set up a mysql database (using environment variables)\n%clevercloud.db.url=\"jdbc:mysql://\"${MYSQL_ADDON_HOST}\"/\"${MYSQL_ADDON_DB} %clevercloud.db.driver=com.mysql.jdbc.Driver %clevercloud.db.user=${MYSQL_ADDON_USER} %clevercloud.db.pass=${MYSQL_ADDON_PASSWORD} More information on playframework.com.\nHTTPS support HTTPS is handled by Clever Cloud ahead of your application, your application retrieves the traffic in plain http. To be able to use request.secure, you have to add XForwardedSupport=all in application.conf.\nMonitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nTo access the environment variables from your code, you need to add my.option=${MY_VARIABLE} in your application.conf file, and then use the configuration item my.option in your application. e.g %clevercloud.db.url=\"jdbc:mysql://\"${MYSQL_ADDON_HOST}\"/\"${MYSQL_ADDON_DB}\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Play Framework 1.x Scala"},"/developers/guides/play-framework-2/":{"data":{"":"","configure-your-scala--play-2-application#Configure your Scala + Play! 2 application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","enable-health-check-during-deployment#Enable health check during deployment":"Overview Clever Cloud supports Play! 2 applications natively. The following guide explains how to set up your application to run on Clever Cloud.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Scala + Play! 2 application Mandatory configuration Starting from Play 2.4, your application needs Java 8 to run. Please read select java version for more information. Play! 2 applications use sbt. Please have a look at deploy scala apps for a complete documentation on sbt deployment options.\nGenerate application secret To deploy a Play! application you have to set a secret in your conf/application.conf the environment variable name depends on your Play2! version:\n2.6.x: play.http.secret.key=${?APPLICATION_SECRET}, to generate secret use sbt playGenerateSecret; 2.4.x -\u003e 2.5.x: play.crypto.secret=${?APPLICATION_SECRET} -\u003e sbt playGenerateSecret; 2.3.x: application.secret=${?APPLICATION_SECRET} -\u003e sbt play-generate-secret. Then, in your Clever Cloud application define APPLICATION_SECRET environment variable with the generated value.\nCustom config file If you don’t want to use the default conf/application.conf configuration file, you can use the SBT_DEPLOY_GOAL environment variable SBT_DEPLOY_GOAL=-Dconfig.resource=clevercloud.conf\nHTTPS support HTTPS is handled by Clever Cloud ahead of your application, your application retrieves the traffic in plain http.\nIf you want to redirect HTTP traffic to HTTPS, please have a look at How to Redirect to HTTPS With Play 2.4.\nHTTP support with Play! 2.x \u003c 2.4 To be able to use request.secure, you have to add trustxforwarded=true in application.conf.\nMulti-module project If you have a single repository with multiple modules, then you can specify which module to run with CC_SBT_TARGET_DIR environment variable.\nFor instance, if your Sbt project contains a shared and play module and you want to execute the play module, then add CC_SBT_TARGET_DIR=play environment variable.\nMonitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nTo access the environment variables from your code, you need to add my.option=${MY_VARIABLE} in your application.conf file, and then use the configuration item my.option in your application. e.g %clevercloud.db.url=\"jdbc:mysql://\"${MYSQL_ADDON_HOST}\"/\"${MYSQL_ADDON_DB}. You can also use the System.getenv(\"MY_VARIABLE\") method. Be aware that it can return null.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nKnown problems with Play! 2 sbt-plugin unresolved dependency error If your project fails with the error sbt.ResolveException: unresolved dependency: play#sbt-plugin;2.0: not found this is because some versions of Play2 try to retrieve a nonexistent version of “sbt-plugin” which is required by the framework. You have two options to fix this problem:\nYou can set the “play.version” environment variable in the /clevercloud/sbt.json file. For example, for Play 2.0.4: { \"deploy\": { \"goal\": \"-Dplay.version=2.0.4\" } } You can modify plugins.sbt in the project folder of your app like the following: // Comment to get more information during initialization logLevel := Level.Warn // The Typesafe repository resolvers += \"Typesafe repository\" at \"https://repo.typesafe.com/typesafe/releases/\" // Use the Play sbt plugin for Play projects addSbtPlugin(\"play\" % \"sbt-plugin\" % \"2.0.4\") // The important part of the configuration Both alternatives effectively fulfill the task at hand; you are free to select the one that best suits your preference.\nMore info on playframework.com.\nBad root server path error The error occurs when we cannot find a bin to execute your project.\nFailed to acquire connection: Too many connections You may run into this error during deployments:\n[error] c.j.b.h.AbstractConnectionHook - Failed to acquire connection to jdbc:\u003caddress\u003e Sleeping for 1000ms and trying again. Attempts left: 10. Exception: null.Message:FATAL: too many connections for role \"\u003cuser\u003e\" By default, Play! opens a pool of 10 connections, which is more than the connection limit allowed by DEV database plans. During a no-downtime deployment, there are at least two instances of the application running in parallel, so it’s 20 connections.\nTo avoid connection exhaustion, you should limit your pool at half the number of available connections (if you have horizontal scaling enabled, adjust accordingly).\n# conf/application.conf db.default.partitionCount=2 db.default.maxConnectionsPerPartition=5 db.default.minConnectionsPerPartition=5 More configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.\nEnable health check during deployment The healthcheck allows you to limit downtimes. Indeed, you can provide Clever Cloud with paths to check. If these paths return something other than 200, the deployment will fail.\nAdd one (or several) environment variable as such:\nCC_HEALTH_CHECK_PATH=/my/awesome/path Or\nCC_HEALTH_CHECK_PATH_0=/my/awesome/path CC_HEALTH_CHECK_PATH_1=/my/other/path The deployment process checks all paths. All of them must reply with a 200 OK response code.\nBy default, when no environment variable (for ex: APP_HOME) is defined, the monitoring checks your repository root path /.\nExample Using the path listed above, below are the expected logs:\nResponse from GET /my/awesome/path is 200 Response from GET /my/other/path is 500 Health check failed: - GET /my/other/path returned 500. If the deployment fails after this message, please update your configuration and redeploy. In this example, the first path is OK, but the second one failed. This gives you a hint on what failed in your application.\nBest practice for healthcheck endpoints To make the most of a healthcheck endpoint, have it check your critical dependencies. For example:\nexecute SELECT 1 + 1; on your database retrieve a specific Cellar file ping a specific IP through a VPN ","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","known-problems-with-play-2#Known problems with Play! 2":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Play Framework 2 Scala"},"/developers/guides/proxysql/":{"data":{"":"ProxySQL is a tool available on applications instances to help you manage your connection pool towards your MySQL add-on.\n⚠️ ProxySQL is not available on Docker instances. If you want to use ProxySQL, you can add it and configure it in your Dockerfile. ","how-to-configure-proxysql#How to configure ProxySQL":"In order to configure ProxySQL, the first thing to do is to link your MySQL add-on. To do that, you can go to the Service Dependencies page of your application and select your MySQL add-on.\nOnce linked, you can enable the ProxySQL feature by defining the following environment variable: CC_ENABLE_MYSQL_PROXYSQL=true. If you ever need to stop using ProxySQL, you can remove this variable or set it to false.\nYou can customize some other parameters:\nCC_MYSQL_PROXYSQL_MAX_CONNECTIONS: Integer. This is the maximum connections ProxySQL will open to your add-on. See the Scalability part below for more explanations on how to customize this variable. Defaults to 10. CC_MYSQL_PROXYSQL_USE_TLS: Boolean (true or false). This controls whether ProxySQL should open a secure connection using TLS to your add-on. Defaults to true. To connect to ProxySQL, a special environment variable will be injected to your environment variables: CC_MYSQL_PROXYSQL_SOCKET_PATH. This variable contains the path to the Unix Domain Socket you have to connect. See Usages below for some example on how to use it.\nScalability When the scalability of your application is enabled, you may need to tweak the CC_MYSQL_PROXYSQL_MAX_CONNECTIONS value. This is what we are going to see here.\nAuto scalability will add or remove instances following your needs. This means that you may have multiple instances running at the same time for a certain period of time. If your application restarts, you will have your current instance number * 2 instances running in parallel while the deployment finishes and the old instances are stopped. A new deployment starts new instances with the old ones alongside them.\nThis means that have up to maximum scalability * 2 instances can run at the same time. And if all of your instances open the maximum connections they are allowed to, it means there will be up to maximum scalability * 2 * CC_MYSQL_PROXYSQL_MAX_CONNECTIONS connections at the same time. We will call this result MaxCon.\nEach MySQL add-on has a connection limit which varies following the plan you are using. You must be sure that MaxCon doesn’t exceed your plan’s max connections. If it does, you might have issues connecting to the remote MySQL add-on. You have to adjust CC_MYSQL_PROXYSQL_MAX_CONNECTIONS to a number that makes sense for your scalability parameters.\nExample Let’s say that I’m hosting a simple PHP application on 1 XS instance, with a scalability that can go up to 4 M instances. And I’m using the MySQL S Small Space plan which has a connection limit of 125.\nNow my application receives a lot of traffic and scales up to 4 M instances. But at the same time, I also need to deploy a hot fix. This means that 4 new M instances will be started, alongside the already existing 4 M instances. I need to make sure that MaxCon doesn’t go above 125.\nHere is the summary:\n8 instances: 4 currently running, 4 currently deploying my hot fix 125 max connections: the maximum number of connections of my MySQL add-on’s plan 5 other connections: I want to be able to use PHPMyAdmin or any CLI tool at the same time, in case I need it CC_MYSQL_PROXYSQL_MAX_CONNECTIONS = ( (125 - 5) / 8 ) = 15. If I set CC_MYSQL_PROXYSQL_MAX_CONNECTIONS to 15, each instance should have enough connections to query the database without errors. And it also let you some spare connections (5) available if anything goes wrong and you need to connect to your database using a CLI tool or PHPMyAdmin.","metrics#Metrics":"ProxySQL exposes some metrics using Prometheus. Some of those metrics are ingested in our metrics system. You can then explore them in the Web Console.\nHere is the list of currently tracked metrics, those may evolve over time:\nprometheus.proxysql_access_denied_max_connections_total prometheus.proxysql_access_denied_max_user_connections_total prometheus.proxysql_access_denied_wrong_password_total prometheus.proxysql_client_connections_connected prometheus.proxysql_client_connections_hostgroup_locked prometheus.proxysql_client_connections_non_idle prometheus.proxysql_client_connections_total prometheus.proxysql_connpool_conns prometheus.proxysql_connpool_conns_latency_us prometheus.proxysql_connpool_conns_queries_total prometheus.proxysql_connpool_conns_status prometheus.proxysql_connpool_conns_total prometheus.proxysql_connpool_data_bytes_total prometheus.proxysql_connpool_get_conn_failure_total prometheus.proxysql_connpool_get_conn_success_immediate_total prometheus.proxysql_connpool_get_conn_success_latency_awareness_total prometheus.proxysql_connpool_get_conn_success_total prometheus.proxysql_connpool_memory_bytes prometheus.proxysql_mysql_error_total prometheus.proxysql_server_connections_connected Those metrics might help you follow how effective your connection pool is or have more insights into your client’s requests.\nKeep in mind that each instance will have those metrics because each instance has its own ProxySQL service.","usages#Usages":"PHP using PDO Using PDO, you have to use the unix_socket option in your DSN:\n\u003c?php // Get the database name from the environment $db = getenv(\"MYSQL_ADDON_DB\"); // Get the database user from the environment $user = getenv(\"MYSQL_ADDON_USER\"); // Get the database password from the environment $pass = getenv(\"MYSQL_ADDON_PASSWORD\"); // This variable is injected during the deployment $socket = getenv(\"CC_MYSQL_PROXYSQL_SOCKET_PATH\"); $dsn = \"mysql:unix_socket=$socket;dbname=$db\"; try { $pdo = new PDO($dsn, $user, $pass); } catch (PDOException $e) { throw new PDOException($e-\u003egetMessage(), (int)$e-\u003egetCode()); } Wordpress For Wordpress, you can change the DB_HOST variable in your wp-config.php:\n// To connect using a socket, the syntax is: `localhost:/path/to/socket` define( 'DB_HOST', \"localhost:\" . getenv(\"CC_MYSQL_PROXYSQL_SOCKET_PATH\") ); Symfony For symfony, you will need to edit its configuration.\nA working example would be:\ndbal: unix_socket: '%env(CC_MYSQL_PROXYSQL_SOCKET_PATH)%' url: 'mysql://%env(MYSQL_ADDON_USER)%:%env(MYSQL_ADDON_PASSWORD)%@localhost/%env(MYSQL_ADDON_DB)%?serverVersion=%env(MYSQL_ADDON_VERSION)%' Node.js On Node.js, using the mysql npm package, you have to set the socketPath property:\nconst mysql = require('mysql'); const connection = mysql.createConnection({ // Get ProxySQL unix domain socket path from the environment socketPath : process.env[\"CC_MYSQL_PROXYSQL_SOCKET_PATH\"], // Get the database user from the environment user : process.env[\"MYSQL_ADDON_USER\"], // Get the database password from the environment password : process.env[\"MYSQL_ADDON_PASSWORD\"], // Get the database name from the environment database : process.env[\"MYSQL_ADDON_DB\"] }); connection.connect(function(err) { if (err) { console.error('error connecting: ' + err.stack); return; } console.log('connected as id ' + connection.threadId); }); ","what-is-proxysql#What is ProxySQL":"ProxySQL is a tool that acts like a proxy between your application and your MySQL add-on. Instead of connecting to your MySQL add-on, you can connect to the local ProxySQL and it will forward all your requests to your MySQL add-on.\nThis allows you to let ProxySQL take care of some interesting features like connection pooling or leader / follower setup.","when-do-ineed-proxysql#When do I need ProxySQL":"You might need ProxySQL if your application can’t manage a connection pool. This is usually the case with PHP applications or any other application that do not have a connection pooling policy in place.\nℹ️ A connection pool will cache your database connections and keep them open for future requests. The connections can then be reused if needed or closed if they weren’t used after a certain time. By using connection pooling from ProxySQL to your MySQL add-on, you make sure that a certain number of connections stay open to your add-on, leading to faster requests.\nFor example, on a PHP application, each HTTP request will spawn a new Apache worker and your PHP code will be executed. If your application does an SQL request, a new TCP connection will be open to the remote MySQL add-on. Once your SQL request is done, the TCP connection will be closed and a new one will need to be opened on the next SQL query.\nEach new connection means a new TCP handshake which takes some time. If you use TLS to secure the connection, then there is an aditionnal handshake. All of this, multiplied by the number of connections you make to your add-on can greatly increase your application’s response time.\nOne of the goals of ProxySQL is to keep the connections open to your MySQL add-on. Your application can then connect to the local proxy using a Unix Domain Socket for each SQL request it has to do. Unix Domain Sockets are faster than TCP sockets because there are no handshakes and the connection is made locally on the same machine.\nWhen ProxySQL receives a new SQL query, it will open a new connection to the remote MySQL add-on if no connection is currently available. But if one is available, it will be reused and the query should take less time. The connection will then be kept for further use."},"title":"ProxySQL"},"/developers/guides/python-django-sample/":{"data":{"":"","configure-your-django-application#Configure your Django application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"Overview The goal of this article is to show you how to deploy a Django application on Clever Cloud. The application is a very basic one. More information about the application in theGitHub repo.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Django application Note :\nSelect at least a nano instance (pico doesn’t have enough resources for a Django project). Connect your Django project to Postgresql version 12+ if you’re using django 4.2+ (postgresql 11 is deprecated since this version). My application does not exists already If you want to test easily a Django deployment on Clever Cloud, just clone the GitHub repo and go the next section.\nMy application already exists ⚠️ Do not forget to add the CC_PYTHON_MODULE environment variable or the file clevercloud/python.json in any Python project so that we get your required modules. Fine tuning the application You can find a lot more configuration options such as choosing python version and more on our dedicated Python documentation.\nMonitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nManage.py tasks Clever Cloud supports execution of multiple manage.py tasks.\nThe tasks are launched after the dependencies from requirements.txt have been installed, and before the web server starts.\nYou can declare the manage.py tasks with the environment variable CC_PYTHON_MANAGE_TASKS=\"migrate\".\nValues must be separated by a comma:\nCC_PYTHON_MANAGE_TASKS=\"migrate, assets:precompile\" Environment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nTo access environment variables from your code, just get them from the environment with:\nimport os os.getenv(\"MY_VARIABLE\") Git Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Django"},"/developers/guides/ruby-on-rails/":{"data":{"":"","configure-your-ruby-on-rails-application#Configure your Ruby on Rails application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"Overview Ruby on Rails is an open source web application framework which runs on the Ruby programming language. It is a full-stack framework: it allows creating pages and applications that gather information from the web server, talk to or query the database, and render templates out of the box. As a result, Rails features a routing system that is independent of the web server.\nClever Cloud allows you to deploy any Ruby on Rails application. This page will explain you how to set up your application to run it on our service. You do not need to change a lot in your application, the requirements will help you configure your applications with some mandatory files to add, and properties to setup.\nYou can find here an example of Ruby on Rails application on Clever Cloud.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Ruby on Rails application Mandatory configuration Be sure that:\nyou push to the master branch you commit your gems.locked or Gemfile.lock file you have a config.ru file (this one is most of the time generated by rails) you have gem puma in your Gemfile (puma is the default application server from rails, when creating a new ruby application, an environment variable is automatically added: CC_RACKUP_SERVER=puma) You need to provide a gems.locked or Gemfile.lock file. To do that ensure you have at least once run bundle install in your terminal at the root of your rails project.\nChoose ruby version If you specify a ruby version in your gems.rb of Gemfile, we’ll use it, otherwise; keep reading.\nOn your Clever Cloud application create an environment variable CC_RUBY_VERSION=rubyversion where rubyversion represents:\n“3” will select the greatest “3.X.Y” version available. “3.3” will select the greatest “3.3.Y” version available. “3.3.1” will select the “3.3.1” version. Due to current landscape in ruby applications, the default version is the greatest 3.3.Y. We also provide versions 2.3.Y, 2.4.Y, 2.5.Y, 2.6.Y and 2.7.Y.\nIf given rubyversion does not match any available version, your deployment will fail.\nChoose your environment You can set the RUBY_ENV environment variable to the value you want. By default it is set to production. Most used values are production and development but you can use any custom one as long as you have set up of the required variables for this environment in your ./config/ folder files.\nSecure configuration of secret key There are many way to add secret key to your environment and each one is valid. Clever Cloud provides you a secure way so you don’t have to commit any file containing it.\ngenerate the secret key locally with rake secret add it to your environment in ./config/secret.yml with: production: secret_key_base: \u003c%= ENV[\"SECRET_KEY_BASE\"] %\u003e Configure Rake goals You can specify a list of rake goals to execute before the deployment of your application by using the CC_RAKEGOALS environment variable.\nThe value of this variable must be a comma-separated list of goals, for instance:\nCC_RAKEGOALS=\"db:migrate, assets:precompile\" We do not execute any rake goals by default.\nConfigure Sidekiq To run a Sidekiq process in background you will need to enable it with the CC_ENABLE_SIDEKIQ=true environment variable.\nPlease note you will need a Redis instance to use this feature.\nYou can specify multiple Sidekiq configuration files with the CC_SIDEKIQ_FILES environment variable.\nThe value of this variable must be a comma-separated list of files:\nCC_SIDEKIQ_FILES=\"./config/sidekiq_1.yml,./config/sidekiq_2.yml,./config/sidekiq_3.yml\" Note: CC_SIDEKIQ_FILES have precedence over CC_ENABLE_SIDEKIQ which means that even if CC_SIDEKIQ_FILES is defined and CC_ENABLE_SIDEKIQ is set to false, Sidekiq will still be enabled.\nEach path is the path from the root of the repository to a sidekiq configuration file.\nEach file might contain something like this standard sidekiq.yml file:\n--- :concurrency: 4 :pidfile: tmp/pids/sidekiq_1.pid :queues: - [critical, 2] - default production: :logfile: ./log/sidekiq.log --- Manage your static files and assets Static files are configured with environment variables:\nSTATIC_FILES_PATH: should point to a directory where your static files are stored.\nSTATIC_URL_PREFIX: the URL path under which you want to serve static files (for example /public/)\nNote: the path of your folder must be absolute regarding the root of your application.\nNote: setting the STATIC_URL_PREFIX to / will make the deployment to fail.\nIf you use the asset pipeline, make sure to include the assets:precompile task in the CC_RAKEGOALS environment variable value.\nCC_RAKEGOALS=\"db:migrate, assets:precompile\" Note: if your project uses webpacker, make sure to enable the dedicated build instance option in the Information menu of your application in the Clever Cloud console because webpacker needs a lot a resources when starting.\nUsing Active Storage and Cellar S3 Only for Rails \u003e= 5.2.\nEnable Active Storage for your application: $ rails active_storage:install then $ rake db:migrate\nAdd gem \"aws-sdk-s3\", require: false to your Gemfile, run $ bundle install\nAdd config.active_storage.service = :clevercloud in config/environments/production.yml\nAdd in config/storage.yml:\nclevercloud: service: S3 access_key_id: \u003c%= ENV['CELLAR_ADDON_KEY_ID'] %\u003e secret_access_key: \u003c%= ENV['CELLAR_ADDON_KEY_SECRET'] %\u003e region: us-east-1 bucket: \u003c%= ENV['CELLAR_ADDON_BUCKET_NAME'] %\u003e endpoint: \u003c%= ENV['CELLAR_ADDON_ENDPOINT'] %\u003e force_path_style: true In the clever cloud console create a Cellar S3 storage add-on, name it, link it to your rails application and create a bucket.\nIn the environment variables section of your Ruby on Rails application on Clever Cloud add the following environment variables:\nCELLAR_ADDON_BUCKET_NAME=\"\u003cyour bucket name\u003e\" CELLAR_ADDON_ENDPOINT=\"https://cellar-c2.services.clever-cloud.com\" You can now commit and push your changes.\nAlso, you are able to use a Filesystem Bucket to store your static files. Please refer to the File System Buckets section.\nNGINX configuration NGINX settings can be configured with environment variables:\nNGINX_READ_TIMEOUT: the response timeout in seconds. (Default: 300) Basic authentication If you need basic authentication, you can enable it using environment variables. You will need to set CC_HTTP_BASIC_AUTH variable to your own login:password pair. If you need to allow access to multiple users, you can create additional environment CC_HTTP_BASIC_AUTH_n (where n is a number) variables.\nNGINX optional configuration with clevercloud/http.json NGINX settings can be configured further in clevercloud/http.json. All its fields are optional.\nlanguages: configure a default language and redirections error_pages: configure custom files for error pages force_https: automatically redirect HTTP traffic to HTTPS aliases: set up redirections charset: force a specific charset { \"languages\": { \"default\": {\"rewrite\": \"en\"}, \"fr\": {\"rewrite\": \"en\"} }, \"error_pages\": { \"404\": \"path/to/page\" }, \"force_https\": true, \"aliases\": { \"/path\": \"redirection\" }, \"charset\": \"latin-1\" } Puma configuration Puma reads its configuration from the config/puma.rb file. See the puma documentation for more information.\nYou can override this configuration with environment variables. Each of them, when specified, will be preferred over the setting from config/puma.rb.\nCC_PUMA_WORKERS overrides the number of workers (for example, CC_PUMA_WORKERS=2) CC_PUMA_THREADS overrides the number of threads per worker, can be a raw number or a range (for example, CC_PUMA_THREADS=6 or CC_PUMA_THREADS=4:8) If they are not defined in the environment nor in config/puma.rb we will setup the values depending on the size of the scaler your application is running on. We also fill the WEB_CONCURRENCY and RAILS_MAX_THREADS environment variable if they are not present as they may be used by rails’ puma configuration.\nOverriding rackup application server You can override the puma default server by setting an environment variable CC_RACKUP_SERVER=yourserver. We do not recommend you do it.\nMonitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nTo access environment variables from your code, just get them from the environment with ENV[\"MY_VARIABLE\"].\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.","overriding-rackup-application-server#Overriding rackup application server":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Ruby on Rails"},"/developers/guides/ruby-rack-app-tutorial/":{"data":{"":"","configure-your-rack-based-application#Configure your Rack based application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"Overview Introduction Currently, Clever Cloud supports Rack-based applications. Created in 2007, Rack has become the de-facto standard for ruby web applications and is used in many frameworks such as Ruby on Rails.\nConfigure your Rack based application Mandatory configuration To follow this tutorial, you will need:\nRuby \u003e= 1.9.2 (w/ Rubygems) Bundler (gem install bundler and you’re good to go!) Your preferred editor Git (for the deploy part) ℹ️ To manage your gems and ruby versions, we recommend rbenv. If you use a system-wide installation of ruby, You will have to use sudo with the gem and bundle commands, or use arguments that will make gem and bundle install the gem in directories you have write-permissions in. My application does not exists already Create a Ruby + Rake application locally Our demo for this tutorial is here: https://helloworld-rack-demo.cleverapps.io/.\nYou can also doing it manually by following these instructions:\nmkdir helloworld-rack cd helloworld-rack touch hello.rb config.ru Gemfile ## or gems.rb Inside hello.rb put the following:\nclass HelloWorld def call(env) [200, {\"Content-Type\" =\u003e \"text/plain\"}, [\"Hello world!\"]] end end Inside the config.ru (That is, the main Rack entry-point) put:\nrequire './hello' run HelloWorld.new The gems.rb or Gemfile file will contain our dependencies:\nsource 'https://rubygems.org' gem 'rack', '~\u003e1.5.1' gem \"puma\", \"~\u003e 6.4\" We don’t need any more dependencies. The gems.rb or Gemfile is mandatory to deploy on Clever Cloud.\nDo not forget to init an empty git repository with $ git init\nTest your application locally To test your application, just fetch the dependencies using bundler:\n$ bundle install Fetching gem metadata from https://rubygems.org/.......... Resolving dependencies... Using rack (1.5.2) Using puma (6.4.2) Using bundler (1.3.5) Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed. And start your application:\n$ bundle exec rackup [2013-09-16 17:35:26] INFO WEBrick 1.3.1 [2013-09-16 17:35:26] INFO ruby 2.0.0 (2013-06-27) [x86_64-linux] [2013-09-16 17:35:26] INFO WEBrick::HTTPServer#start: pid=5656 port=9292 You can now test with your browser at localhost:9292.\nYou can now read My application already exists\nMy application already exists Create an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nTo access environment variables from your code, just get them from the environment with ENV[\"MY_VARIABLE\"].\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.","overview-introduction#Overview Introduction":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Rack full tutorial"},"/developers/guides/ruby-rack/":{"data":{"":"","configure-your-ruby-and-rake-application#Configure your Ruby and Rake application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","environment-injection#Environment injection":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"Overview Currently, Clever Cloud supports Rack-based applications. Created in 2007, Rack has become the de-facto standard for ruby web applications and is used in many frameworks such as Ruby on Rails.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Ruby and Rake application Mandatory configuration Be sure that:\nBundler is installed locally (gem install bundler) you have a config.ru file Git (for the deploy part) you have a gems.rb or Gemfile containing your dependencies Tutorial and sample app You can find an hello world tutorial of a Ruby and Rack application here and find the source code of the demo here.\nMonitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nTo access environment variables from your code, just get them from the environment with ENV[\"MY_VARIABLE\"].\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Rack setup"},"/developers/guides/tutorial-drupal/":{"data":{"":"","configure-your-database#Configure your database":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","environment-injection#Environment injection":"","ftp-deployment#FTP Deployment":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"Overview Drupal applications almost work out of the box on Clever Cloud, you just have a few adjustments to make.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nMonitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nConfigure your database Make sure you have created a MySQL database add-on in the Clever Cloud console, and that it’s linked to your application. When it’s done, you will be able to access all of your add-on environment variables from the application. You can use them as DATABASE_URL=$MYSQL_ADDON_URI.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nGit specific Drupal instructions We at this point assume you have downloaded the source files of drupal from drupal.org and already have linked your MySQL add-on.\nOpen .gitignore file and delete sites/*/settings*.php line Copy the file sites/default/default.settings.php to sites/default/settings.php Open sites/default/settings.php and line 213, replace 1 $databases = array(); by\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $databases = array ( 'default' =\u003e array ( 'default' =\u003e array ( 'database' =\u003e getenv('MYSQL_ADDON_DB'), 'username' =\u003e getenv('MYSQL_ADDON_USER'), 'password' =\u003e getenv('MYSQL_ADDON_PASSWORD'), 'host' =\u003e getenv('MYSQL_ADDON_HOST'), 'port' =\u003e getenv('MYSQL_ADDON_PORT'), 'driver' =\u003e 'mysql', 'prefix' =\u003e '', ), ), ); Replace the line $settings['hash_salt'] = '' ($drupal_hash_salt for Drupal 7) with $settings['hash_salt'] = getenv('DRUPAL_SALT'). You can generate salts with this link. Add a new DRUPAL_SALT environment variable to the application with the salt you have generated. As mentioned in this article, with Git deployments, files that are uploaded by users must be persisted in a File System Bucket. In order to do so, add a File Bucket via the console. At the root of your application, create a clevercloud/buckets.json file (create a clevercloud folder in which you create a buckets.json file). Copy the bucket.json content from the FS bucket addon dashboard (make sure to edit the folder field): 1 2 3 4 5 6 [ { \"bucket_host\": \"\u003cbucket-id\u003e-fsbucket.services.clever-cloud.com\", \"folder\": \"/sites/default/files\" } ] Send these Drupal files via Git. When finished, get the url that you can find in the domains panel in the left sidebar. Then open the following link: https://yourapplication.cleverapps.io/install.php\nDo not forget the /install.php page otherwise installation will not happen.\nFTP Deployment Make sure you have Filezilla or an other FTP software installed in your machine.\nWhen you chose to deploy your application via FTP at the application creation, the system creates a free FS Bucket with an ID matching your application’s ID.\nFind the FTP credentials in the configuration tab of this particular FS Bucket.\nJust follow the instructions of your FTP Software to send code to Clever Cloud.\n⚠️ An FTP application automatically starts once you create the application, even if you don’t send any code yet.\nRefer to Quick Start - FTP deployment for more details.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Drupal"},"/developers/guides/tutorial-laravel/":{"data":{"":"","configure-your-laravel-application#Configure your Laravel Application":"","go-further#Go Further":" Monitor your App with New RelicConnect your application to New Relic. FS BucketExternal File System for your apps Deployment hooksLearn about custom commands used in this guide. Laravel DocumentationRead Laravel documentation on deployments. ","more-configuration#More configuration":" Laravel is a PHP web application framework with expressive, elegant syntax. This guide walks you through the minimal requirements to successfully deploy your app. Overview Deploying a Laravel application on Clever Cloud requires:\nPHP application A database add-on: (MySQL or PostgreSQL) An FS Bucket for persistent storage. The following sections explain how to set up each instance step by step:\nConfigure your Laravel Application Create a PHP application From the Clever Cloud Console, create a new PHP application and choose your deployment method: git, GitHub or FTP.\nAdd DocumentRoot variable Add the following environment variable in the Console: CC_WEBROOT=\"/public\".\nOr set it with the Clever Cloud CLI:\nclever env set CC_WEBROOT /public Add your application key variable Make sure config/app.php contains the following line:\n'key' =\u003e env('APP_KEY'), Locally, run php artisan key:generate. It should output something like base64:tQbFzxwUfOfKKqNlbjXuduwaUFDQUy+NL8DBfgb3o3s=.\nCopy this value and add an environment variable named APP_KEY, with this value.\nConfigure monolog to use syslog Make sure config/logging.php contains the following line:\n'default' =\u003e env('LOG_CHANNEL', 'stack'), In your environment variables, add the LOG_CHANNEL=syslog environment variable. This allows you to read your application logs directly from the console or the CLI tool.\nOptional: configure the front-end build If you need to build your frontend assets (eg. JavaScript or CSS files), you can either add it as a step in your composer file, or you can add a post build hook with the CC_PRE_RUN_HOOK environment variable.\nFor example: CC_PRE_RUN_HOOK=\"npm install \u0026\u0026 npm run prod\".\nThis step is necessary if you are building your Laravel application with Blade, for example.\nConnect a database Edit config/database.php to set the correct environment variable names. For example, replace DB_xxx by MYSQL_ADDON_xxx for a MySQL database.\nFor instance for MySQL:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // ... 'connections' =\u003e [ // ... 'mysql' =\u003e [ 'driver' =\u003e 'mysql', 'host' =\u003e env('MYSQL_ADDON_HOST', '127.0.0.1'), 'port' =\u003e env('MYSQL_ADDON_PORT', '3306'), 'database' =\u003e env('MYSQL_ADDON_DB', 'forge'), 'username' =\u003e env('MYSQL_ADDON_USER', 'forge'), 'password' =\u003e env('MYSQL_ADDON_PASSWORD', ''), 'unix_socket' =\u003e env('DB_SOCKET', ''), 'charset' =\u003e 'utf8mb4', 'collation' =\u003e 'utf8mb4_unicode_ci', 'prefix' =\u003e '', 'strict' =\u003e true, 'engine' =\u003e null, ], // ... ] // ... Create a database add-on (either MySQL or PostgresSQL) and link it to your application. If your add-on already exists, use the Service Dependencies \u003e Link add-ons dropdown menu in your application options, to select the name of the add-on you want to link and use the add button to finish the process.\nOptional: automatically run migrations upon deployment If you want to have database migrations automatically run during each deployment, add this hook instruction to the application’s environment variables CC_POST_BUILD_HOOK=php artisan migrate --force\nConfigure storage Create a FS Bucket add-on and link it to your application. Note its host (you can see it from the add-on configuration panel, or in the environment variables exported by the add-on). It looks like bucket-01234567-0123-0123-0123-012345678987-fsbucket.services.clever-cloud.com.\nCreate a new environment variable called CC_FS_BUCKET and set /storage/app:\u003cbucket-host\u003e as its value.\nOptional Further Configuration Task scheduling If your app uses task scheduling, you need to configure a cron to run the scheduling process:\nCreate a clevercloud/cron.json file in your project, containing: [ \"* * * * * $ROOT/clevercloud/cron.sh\" ] This installs a cron to run clevercloud/cron.sh every minute.\nCreate a clevercloud/cron.sh file in your project (with execute permissions), containing: #!/bin/bash -l set -euo pipefail pushd \"$APP_HOME\" php artisan schedule:run \u003e\u003e /dev/null 2\u003e\u00261 Note: the PHP CLI process uses a memory_limit configuration value that depends on the instance’s size (you can verify this value by connecting to your app using SSH and running php -i).\nIf one of your scheduled tasks needs to allocate more memory than this limit, the php artisan schedule:run process is going to silently crash.\nTo allow it to use more memory, you can call ini_set() inside a php_sapi_name() === 'cli' condition from an early hook to the app’s lifecycle (like the AppServiceProvider).\nSee this Gist for an example implementation.\nTrusted Proxy To ensure Laravel correctly handles HTTP requests when using the Clever Cloud HTTP reverse proxy (Sōzu), add the following code to the config/trustedproxy.php file:\n1 2 3 4 \u003c?php return [ 'proxies' =\u003e env('CC_REVERSE_PROXY_IPS'), ]; This environment variable exists in any Clever Cloud instance. This configuration specifies to trust Clever Cloud proxies, allowing Laravel to seamlessly recognize HTTP requests in the presence of a proxyhugo server.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.","optional-further-configuration#Optional Further Configuration":"","overview#Overview":""},"title":"Laravel"},"/developers/guides/tutorial-symfony/":{"data":{"":"","configure-your-database#Configure your database":"","configure-your-symfony-application#Configure your Symfony application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","environment-injection#Environment injection":"","ftp-deployment#FTP Deployment":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","linking-a-database-or-any-other-add-on-to-your-application#Linking a database or any other add-on to your application":"","more-configuration#More configuration":"Overview This tutorial assumes that your application is based on Symfony \u003e= 3.4 and Symfony Flex. Symfony applications almost work out of the box on Clever Cloud, you just have a few adjustments to make.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nConfigure your Symfony application Configure DocumentRoot Add a new environment variable called CC_WEBROOT and set /public as its value CC_WEBROOT=/public.\nConfigure your application secret APP_SECRET environment variable is required to generate CSRF tokens. By default for symfony/framework-bundle generates one when it’s installed via Symfony Flex. If you do not use Flex, make sure to change your APP_SECRET. The default value is ThisTokenIsNotSoSecretChangeIt, change it.\nConfigure the Symfony environment If you’re using .env file in your application, please don’t commit productions credentials in this file or in a .env.production file. They are not meant to be committed alongside your applications. Clever Cloud allows you to inject environment in your app, so you can dynamically link databases and have separate environments with the same code base.\nFrom the console, you can edit the application’s environment variables. Click on “expert mode”, you’ll be able to directly paste the contents of the .env file.\nFrom the CLI, it’s even simpler: clever env import \u003c .env.\nYou will also need to set the environment variable APP_ENV to one of:\ndev test prod You can anyway add your environment with any of the methods mentioned in Setting up environment variables on Clever Cloud.\nConfigure monolog to get application logs For your application logs to be collected and available in the console and CLI, you need to configure monolog to use its error_log output. That does not mean that it will only output error level logs, you can set it to use any level, here is an example with the info level (and above):\nconfig_prod.ymlmonolog: handlers: filter_for_errors: type: fingers_crossed action_level: error handler: error_log_handler excluded_404s: # regex: exclude all 404 errors from the logs - ^/ error_log_handler: type: error_log level: info Configure Symfony to work behind Clever Cloud reverse proxies You can use the CC_REVERSE_PROXY_IPS environment variable that contains a list of trusted IP addresses, separated by commas.\n.envTRUSTED_PROXIES=127.0.0.1,${CC_REVERSE_PROXY_IPS} config/packages/framework.yamlframework: # ... trusted_proxies: '%env(TRUSTED_PROXIES)%' For more information on configuring symfony behind a reverse proxy, you can read the official documentation.\nApache 404 error after deployment If everything looks fine and you still get 404 errors, remember that CleverCloud works with an Apache server, so you’ll need an htaccess in the /public directory. Symfony got your back on this: just run composer require symfony/apache-pack. See the official documentation of Symfony for more information.\nMonitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nEnvironment injection Clever Cloud injects environment variables from your application settings as mentioned in setting up environment variables and is also injecting in your application production environment, those from your linked add-ons.\nCustom build configurations On Clever Cloud you can define some build configuration: like the app folder to deploy or the path to validate your application deployment is ready To do that follow the documentation here and add the environement variable you need.\nLinking a database or any other add-on to your application By linking an application to an add-on, the application has the add-on environment variables in its own environment by default.\nOn add-on creation Many add-ons do exist on Clever Cloud: refer to the full list and check add-ons dedicated pages for full instructions.\nDuring add-on creation, an Applications screen appears, with a list of your applications. You can toggle the button to Link and click next. If you finish the process of add-on creation, the application is automatically linked to it.\nAdd-on already exists In the Clever Cloud console, under the Service Dependencies menu of your application, you can use the Link add-ons dropdown menu to select the name of the add-on you want to link and use the add button to finish the process.\nYou can also link another application from the same page in the Clever Cloud console, using the Link applications dropdown menu.\nConfigure your database Make sure you have created a database add-on in the Clever Cloud console, and that it’s linked to your application. When it’s done, you will be able to access all of your add-on environment variables from the application.\nChange the default DATABASE_URL environment variable used in your config/packages/doctrine.yaml to \u003cADDON_PREFIX\u003e_ADDON_URI where \u003cADDON_PREFIX\u003e depending on the database addon you created (e.g. MYSQL for MySQL, POSTGRESQL for PostgreSQL or MONGODB for MongoDB) or be sure to use the environment variable in your production configuration file as explained in the configuration documentation of Symfony.\nConfigure ProxySQL for MySQL To manage your connection pool towards your MySQL add-on, you can set-up a ProxySQL.\nOnce you have activated the ProxySQL (through the environment variable), a configuration example would be:\ndoctrine.yamldbal: unix_socket: '%env(CC_MYSQL_PROXYSQL_SOCKET_PATH)%' url: 'mysql://%env(MYSQL_ADDON_USER)%:%env(MYSQL_ADDON_PASSWORD)%@localhost/%env(MYSQL_ADDON_DB)%?serverVersion=%env(MYSQL_ADDON_VERSION)%' Optional: run tasks after build step If you want to have database migrations automatically run during each deployment, or frontend assets which must be built, you can write all these commands in clevercloud/post_build.sh like this one:\nclevercloud/post_build.sh# Database migrations ./bin/console doctrine:migrations:migrate --no-interaction # Frontend build yarn install \u0026\u0026 yarn run build Make sure this file is executable:\nchmod +x clevercloud/post_build.sh Then, add this to the application’s environment variables CC_POST_BUILD_HOOK=./clevercloud/post_build.sh.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nFTP Deployment Make sure you have Filezilla or an other FTP software installed in your machine.\nWhen you chose to deploy your application via FTP at the application creation, the system creates a free FS Bucket with an ID matching your application’s ID.\nFind the FTP credentials in the configuration tab of this particular FS Bucket.\nJust follow the instructions of your FTP Software to send code to Clever Cloud.\n⚠️ An FTP application automatically starts once you create the application, even if you don’t send any code yet.\nRefer to Quick Start - FTP deployment for more details.\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"Symfony"},"/developers/guides/tutorial-wordpress/":{"data":{"":"","configure-your-wordpress-application#Configure your WordPress application":"","create-an-application-on-clever-cloud#Create an application on Clever Cloud":"","deploy-wordpress-the-immutable-way#Deploy WordPress the immutable way":"","ftp-deployment#FTP Deployment":"","git-deployment-on-clever-cloud#Git Deployment on Clever Cloud":"","more-configuration#More configuration":"Overview WordPress applications almost work out of the box on Clever Cloud, you just have a few adjustments to make.\nFirst, you could check our global PHP documention.\nThis tutorial is mainly concerning a Git deployment. However, you can deploy using a classic FTP PHP app. Choose “FTP” when you create a new PHP app.\nCreate an application on Clever Cloud With the web console Refer to Quickstart for more details on application creation via the console.\nWith the Clever Tools CLI Make sure you have clever-tools installed locally or follow our CLI getting started guide. In your code folder, do clever create --type \u003ctype\u003e \u003capp-name\u003e --region \u003czone\u003e --org \u003corg\u003e where : type is the type of technology you rely on app-name the name you want for your application, zone deployment zone (par for Paris and mtl for Montreal) org the organization ID the application will be created under. Refer to clever create for more details on application creation with Clever Tools.\nSetting up environment variables on Clever Cloud With the Clever Cloud console Go to the Clever Cloud console, and find the app you want to fine tune under it’s organization. Find the Environment variables menu and select it. In this menu, you will see a form with VARIABLE_NAME and variable value fields. Fill them with the desired values then select Add. Don’t forget to “Update Changes” at the end of the menu. With the Clever Tools CLI Make sure you have clever-tools installed locally. Refer to our CLI getting started. In your code folder, do clever env set \u003cvariable-name\u003e \u003cvariable-value\u003e Refer to environment variables reference for more details on available environment variables on Clever Cloud.\nYou can of course create custom ones with the interface we just demonstrated, they will be available for your application.\nGit Deployment on Clever Cloud You need Git on your computer to deploy via this tool. Here is the official website of Git to get more information: git-scm.com\nSetting up your remotes The “Information” page of your app gives you your Git deployment URL, it looks like this:\ngit+ssh://git@push.clever-cloud.com/\u003cyour_app_id\u003e.git Copy it in your clipboard Locally, under your code folder, type in git init to set up a new git repository or skip this step if you already have one\nAdd the deploy URL with git remote add \u003cname\u003e \u003cyour-git-deployment-url\u003e\nAdd your files via git add \u003cfiles path\u003e and commit them via git commit -m \u003cyour commit message\u003e\nNow push your application on Clever Cloud with git push \u003cname\u003e master\nRefer to git deployments for more details.\nFTP Deployment Make sure you have Filezilla or an other FTP software installed in your machine.\nWhen you chose to deploy your application via FTP at the application creation, the system creates a free FS Bucket with an ID matching your application’s ID.\nFind the FTP credentials in the configuration tab of this particular FS Bucket.\nJust follow the instructions of your FTP Software to send code to Clever Cloud.\n⚠️ An FTP application automatically starts once you create the application, even if you don’t send any code yet.\nRefer to Quick Start - FTP deployment for more details.\nConfigure your WordPress application Configuration file Rename the file wp-config-sample.php to wp-config.php. All the PHP code for the configuration should be written in this file.\nConfigure your database Make sure you have created a MySQL database add-on in the Clever Cloud console, and that it’s linked to your application. When it’s done, you will be able to access all of your add-on environment variables from the application. You can use them, in wp-config.php, as :\ndefine( 'DB_NAME', getenv(\"MYSQL_ADDON_DB\") ); define( 'DB_USER', getenv(\"MYSQL_ADDON_USER\") ); define( 'DB_PASSWORD', getenv(\"MYSQL_ADDON_PASSWORD\") ); define( 'DB_HOST', getenv(\"MYSQL_ADDON_HOST\").':'.getenv(\"MYSQL_ADDON_PORT\") ); ⚠️ **Make sure you use ** in wp-config.php the port the add-on dashboard provides. Use the MYSQL_ADDON_PORT environment variable for that. We don’t use the default MySQL port. SSL Configuration Since your website is behind a reverse proxy managed by Clever Cloud, you need to detect specific headers like X_FORWARDED_PROTO or HTTP_X_FORWARDED_PROTO to enable SSL. To do so edit wp-config.php and add the following code above the last require_once call.\n1 2 3 4 5 if (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) \u0026\u0026 $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https') { $_SERVER['HTTPS'] = 'on'; } elseif (isset($_SERVER['X_FORWARDED_PROTO']) \u0026\u0026 $_SERVER['X_FORWARDED_PROTO'] == 'https') { $_SERVER['HTTPS'] = 'on'; } Using a CDN as Cloudflare with SSL (avoid infinite loops) As with SSL configuration, you need to detect specific headers like X_FORWARDED_PROTO or HTTP_X_FORWARDED_PROTO to enable SSL. In this case, the chained proxies might concatenate those headers. As a result, headers values can look like php [HTTP_X_FORWARDED_PROTO] =\u003e https, https The previous code snippet would not enable SSL on the Clever Cloud application, resulting in mixed content or infinite loop.\nIn order to avoid this, you’ll need to add the following code snippet to your wp-config.php file (it replaces the previous code snippet). Add the following code above the last require_once call or at the beginning of the wp-config.php file.\nTo do so edit wp-config.php and add the following code above the last require_once call.\nfunction check_proto_set_ssl($forwarded_protocols){ $secure = 'off'; if ( strstr($forwarded_protocols , \",\") ) { $previous = null; foreach ( explode(\",\", $forwarded_protocols) as $value ) { if ( $previous ) { trim($value) == $previous \u0026\u0026 trim($value) == 'https' ? $secure = 'on' : $secure = 'off'; } $previous = trim($value); } $_SERVER[\"HTTPS\"] = $secure; }else{ $forwarded_protocols == 'https' ? $_SERVER[\"HTTPS\"] = 'on' : $_SERVER[\"HTTPS\"] = $secure = 'off'; } } if (isset($_SERVER['HTTP_X_FORWARDED_PROTO'])) { check_proto_set_ssl($_SERVER['HTTP_X_FORWARDED_PROTO']); } elseif (isset($_SERVER['X_FORWARDED_PROTO'])) { check_proto_set_ssl($_SERVER['X_FORWARDED_PROTO']); } Configure storage To store static files, you need to configure a FS Bucket.\nCreate a FS Bucket add-on and link it to your application. Note its host (you can see it from the addon configuration panel, or in the environment variables exported by the addon). It looks like bucket-01234567-0123-0123-0123-012345678987-fsbucket.services.clever-cloud.com.\nTo use the bucket in your wordpress app, there are 2 methods :\nEnvironment variables Create a new environment variable called CC_FS_BUCKET and set /\u003cpath-to-static-files\u003e:\u003cbucket-host\u003e as its value.\nIf you need to have many associated buckets with your app, you need to create en new encironment variable, with a suffix : CC_FS_BUCKET_1, CC_FS_BUCKET_2…\nJSON 🧹 This method is deprecated\nWe strongly recommend that you use environment variables.\nIf you want to switch from this method to the environment variables, you need to remove the buckets.json file. Otherwise, the environment variables will be ignored.\nAt the root of your application, create a clevercloud/buckets.json file (create a clevercloud folder in which you create a buckets.json file). Add the following lines in this file. Do not forget to replace bucketId by the bucketId displayed in the information section of the FS Bucket add-on.\n[ { \"bucket\" : \"bucketId\", \"folder\" : \"/\u003cpath-to-static-files\u003e\" } ] Install a WordPress plugin with Git If you choose git deployment over FTP, the code of your plugins won’t be tracked by git. This implies that you will not be able to install plugins from the administration panel and persist them between two deployments.\nTo solve this problem, we recommend to install the plugin manually by copying the content of the plugin to the /wp-content/plugins/ folder, add the new files to git and then deploy your application.\nThe plugin will then be available in the Extensions section of your admin panel and you will be able to manage it as others WordPress plugins. To uninstall the plugin, the procedure is the same as before except that you have to delete the folder corresponding to the plugin you want to delete. The extension will be automatically disabled, but we recommend you to delete it from you admin panel before removing the file, in order to clean your database and all files that the plugin could have created.\nOptimise and speed-up your WordPress There are multiple ways to optimise your WordPress and speed-up its response time. We provide different tools and software to help you in this task as Varnish for the HTTP cache, and Redis for the object caching.\nPerformance plugins ⚠️ We recommend you to not use performance plugins like W3 Total Cache or JetPack as they are intended to be used on a shared hosting server.\nWe noticed performances problems when performance plugins are enabled and we recommend to use Varnish and Redis if you need performance optimisations on Clever Cloud. HTTP Cache with Varnish Enabling Varnish for your application is very simple. All instances of PHP provide Varnish, you just have to configure your application to use it.\nTo use Varnish in your application, you have to create a varnish.vcl file in the clevercloud folder of your application. If this folder doesn’t exist, create it in the root of your project.\nCopy this code into the varnish.vcl file you just created. It’ll configure Varnish to work with your WordPress.\nTo properly purge the Varnish cache of your application when a post is created/updated, a comment is posted, … we recommend you to install the Varnish HTTP Purge plugin to your WordPress. It’ll purge the Varnish cache for you and give you the possibility to purge it manually.\nIf you need to manually purge the Varnish cache, the plugin provides a Purge Varnish cache button on the top bar of your website.\nObject cache with Redis Redis is an add-on that offers you a good way to speed-up your application by caching some of the objects of your application, as the result of SQL queries of your application, improving the response time.\nTo enable Redis for your WordPress, you need to disable other Object Cache and Data Cache of your application (as those provided by W3 Total Cache for example). Make sure they aren’t enabled to avoid conflicts and performance problems.\nCreate a Redis add-on for your application.\nAdd the following lines to your wp-config.php file. Make sure they are before the require_once(ABSPATH . 'wp-settings.php'); line, otherwise the Redis connexion will not work for your application and your application will return only white pages!\ndefine('WP_CACHE_KEY_SALT', 'tvm_'); define('WP_REDIS_CLIENT', 'pecl'); define('WP_REDIS_HOST', getenv('REDIS_HOST')); define('WP_REDIS_PORT', getenv('REDIS_PORT')); define('WP_REDIS_PASSWORD', getenv('REDIS_PASSWORD')); Download this file who manages the connexion with Redis and WordPress and moves it to your /wp-content folder. The file must be named object-cache.php. Redis should now work with your WordPress.\nMonitor your application with New Relic You can use New Relic to monitor your application on Clever Cloud.\nPlease refer to our New Relic documentation to configure it for your application.\nDeploy WordPress the immutable way Discover a new way to deploy WordPress using Composer with Bedrock’s boilerplate : our tutorial on GitHub\nMore configuration Need more configuration? To run a script at the end of your deployment? To add your private SSH key to access private dependencies?\nGo check the Common configuration page.\nYou may want to have an advanced usage of your application, in which case we recommend you to read the Administrate documentation section.\nIf you can’t find something or have a specific need like using a non supported version of a particular software, please reach out to the support.","optimise-and-speed-up-your-wordpress#Optimise and speed-up your WordPress":"","overview#Overview":"","setting-up-environment-variables-on-clever-cloud#Setting up environment variables on Clever Cloud":""},"title":"WordPress"},"/developers/postmortem/":{"data":{"":" 2024-08-02 "},"title":"Postmortem"},"/developers/readme/":{"data":{"clever-cloud-documentation-module#Clever Cloud Documentation Module":"Clever Cloud Documentation ModuleThis repo contains all the content from the Clever Cloud Doc as a Hugo module.\nThis repo is automatically updated with a Git hook at the same time the main project is.\nFind all updates and contibuting guidelines on the main repo here."},"title":"README"}}