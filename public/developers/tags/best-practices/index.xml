<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clever Cloud Documentation – Best-Practices</title>
    <link>https://stagingv6.cleverapps.io/developers/tags/best-practices/</link>
    <description>Recent content in Best-Practices on Clever Cloud Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="https://stagingv6.cleverapps.io/developers/tags/best-practices/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blue/Green Deployments</title>
      <link>https://stagingv6.cleverapps.io/developers/doc/best-practices/blue-green/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stagingv6.cleverapps.io/developers/doc/best-practices/blue-green/</guid>
      <description>
        
        
        &lt;p&gt;Blue/Green deployment is a technique used in automated deployment of applications, databases and services.
Its main goal is to minimize the downtime and risks of an application by running two identical environment instances, one called &lt;em&gt;Blue&lt;/em&gt; and the other one called &lt;em&gt;Green&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Contextual example&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;contextual-example&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#contextual-example&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s say you have a production environment called &lt;em&gt;Blue&lt;/em&gt;, running for instance an e-commerce application. Your customers are routed to this &lt;em&gt;Blue&lt;/em&gt; instance. In parallel, you will have a &amp;ldquo;sleeping clone&amp;rdquo; of &lt;em&gt;Blue&lt;/em&gt;, named &lt;em&gt;Green&lt;/em&gt;.
Now let&amp;rsquo;s say you have achieved a new feature and want your customers to benefit of it. Using the &amp;ldquo;Blue/Green&amp;rdquo; technique, the new code will be used in &lt;em&gt;Green&lt;/em&gt;. Once &lt;em&gt;Green&lt;/em&gt; is ready, you will redirect your customers to &lt;em&gt;Green&lt;/em&gt;, and we will put &lt;em&gt;Blue&lt;/em&gt; in &amp;ldquo;sleeping mode&amp;rdquo;. When you will add new modification you will do it on &lt;em&gt;Blue&lt;/em&gt; this time, then on &lt;em&gt;Green&lt;/em&gt; again, and so on.&lt;/p&gt;
&lt;p&gt;There are many benefits to this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if &lt;em&gt;Green&lt;/em&gt; fails to deploy there will be no downtime for your customers or users as you will not use the broken &lt;em&gt;Green&lt;/em&gt; and stay on &amp;ldquo;Blue&amp;rdquo; until you fix your code so it can start&lt;/li&gt;
&lt;li&gt;if you are not happy with the changes you added in &lt;em&gt;Green&lt;/em&gt;, you can &amp;ldquo;awake&amp;rdquo; &lt;em&gt;Blue&lt;/em&gt; and get back to the previous version easily by routing the traffic to it&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;In the Clever Cloud context&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;in-the-clever-cloud-context&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#in-the-clever-cloud-context&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When you push your source code to the Clever Cloud git remote, Clever Cloud will automatically use the &amp;ldquo;Blue/Green&amp;rdquo; pattern to apply your changes to your production.&lt;/p&gt;
&lt;p&gt;A new VM, let&amp;rsquo;s call it &lt;em&gt;Blue&lt;/em&gt; is created. The deployment is successful when there&amp;rsquo;s no error in the build phase and the &lt;a href=&#34;https://developers.clever-cloud.com/doc/develop/healthcheck/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;deployment healthcheck&lt;/a&gt; is successful. And that&amp;rsquo;s it, you will use the new version on production within seconds.&lt;/p&gt;
&lt;p&gt;If you push new changes, a &lt;em&gt;Green&lt;/em&gt; VM will be created.&lt;/p&gt;
&lt;h3&gt;Deployment succeeds&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;deployment-succeeds&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#deployment-succeeds&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If the deployment succeeds, &lt;em&gt;Green&lt;/em&gt; will be the version in production and &lt;em&gt;Blue&lt;/em&gt; will be turned off minutes later.
This way, if you are not happy with the changes you made, just go the Clever Cloud web console, select your application and in the &lt;strong&gt;Overview&lt;/strong&gt; menu, click the &amp;ldquo;Start last pushed commit&amp;rdquo; button, this will &amp;ldquo;awake&amp;rdquo; &lt;em&gt;Blue&lt;/em&gt; and reverse your changes in production within a few minutes.&lt;/p&gt;
&lt;h4&gt;Deployment fails&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;deployment-fails&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#deployment-fails&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;If there is an error during the build phase or if the &lt;em&gt;Green&lt;/em&gt; servers answers an error code on :8080/, we will alert you by email and &lt;em&gt;Blue&lt;/em&gt; will remain the production server.&lt;/p&gt;
&lt;p&gt;Next time you push code a new &lt;em&gt;Green&lt;/em&gt; VM will be created, then a &lt;em&gt;Blue&lt;/em&gt; one, and so on.&lt;/p&gt;
&lt;p&gt;You also may see some deployments that you haven&amp;rsquo;t triggered in your logs. It is because Clever Cloud uses &amp;ldquo;Blue/Green&amp;rdquo; pattern to update VMs, either security patches or versions updates.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blue/Green Deployments</title>
      <link>https://stagingv6.cleverapps.io/developers/doc/develop/best-practices/blue-green/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stagingv6.cleverapps.io/developers/doc/develop/best-practices/blue-green/</guid>
      <description>
        
        
        &lt;p&gt;Blue/Green deployment is a technique used in automated deployment of applications, databases and services.
Its main goal is to minimize the downtime and risks of an application by running two identical environment instances, one called &lt;em&gt;Blue&lt;/em&gt; and the other one called &lt;em&gt;Green&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Contextual example&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;contextual-example&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#contextual-example&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s say you have a production environment called &lt;em&gt;Blue&lt;/em&gt;, running for instance an e-commerce application. Your customers are routed to this &lt;em&gt;Blue&lt;/em&gt; instance. In parallel, you will have a &amp;ldquo;sleeping clone&amp;rdquo; of &lt;em&gt;Blue&lt;/em&gt;, named &lt;em&gt;Green&lt;/em&gt;.
Now let&amp;rsquo;s say you have achieved a new feature and want your customers to benefit of it. Using the &amp;ldquo;Blue/Green&amp;rdquo; technique, the new code will be used in &lt;em&gt;Green&lt;/em&gt;. Once &lt;em&gt;Green&lt;/em&gt; is ready, you will redirect your customers to &lt;em&gt;Green&lt;/em&gt;, and we will put &lt;em&gt;Blue&lt;/em&gt; in &amp;ldquo;sleeping mode&amp;rdquo;. When you will add new modification you will do it on &lt;em&gt;Blue&lt;/em&gt; this time, then on &lt;em&gt;Green&lt;/em&gt; again, and so on.&lt;/p&gt;
&lt;p&gt;There are many benefits to this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if &lt;em&gt;Green&lt;/em&gt; fails to deploy there will be no downtime for your customers or users as you will not use the broken &lt;em&gt;Green&lt;/em&gt; and stay on &amp;ldquo;Blue&amp;rdquo; until you fix your code so it can start&lt;/li&gt;
&lt;li&gt;if you are not happy with the changes you added in &lt;em&gt;Green&lt;/em&gt;, you can &amp;ldquo;awake&amp;rdquo; &lt;em&gt;Blue&lt;/em&gt; and get back to the previous version easily by routing the traffic to it&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;In the Clever Cloud context&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;in-the-clever-cloud-context&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#in-the-clever-cloud-context&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When you push your source code to the Clever Cloud git remote, Clever Cloud will automatically use the &amp;ldquo;Blue/Green&amp;rdquo; pattern to apply your changes to your production.&lt;/p&gt;
&lt;p&gt;A new VM, let&amp;rsquo;s call it &lt;em&gt;Blue&lt;/em&gt; is created. The deployment is successful when there&amp;rsquo;s no error in the build phase and the server answers on :8080/ with a non error code. And that&amp;rsquo;s it, you will use the new version on production within seconds.&lt;/p&gt;
&lt;p&gt;If you push new changes, a &lt;em&gt;Green&lt;/em&gt; VM will be created.&lt;/p&gt;
&lt;h3&gt;Deployment succeeds&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;deployment-succeeds&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#deployment-succeeds&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If the deployment succeeds, &lt;em&gt;Green&lt;/em&gt; will be the version in production and &lt;em&gt;Blue&lt;/em&gt; will be turned off minutes later.
This way, if you are not happy with the changes you made, just go the Clever Cloud web console, select your application and in the &lt;strong&gt;Overview&lt;/strong&gt; menu, click the &amp;ldquo;Start last pushed commit&amp;rdquo; button, this will &amp;ldquo;awake&amp;rdquo; &lt;em&gt;Blue&lt;/em&gt; and reverse your changes in production within a few minutes.&lt;/p&gt;
&lt;h3&gt;Deployment fails&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;deployment-fails&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#deployment-fails&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If there is an error during the build phase or if the &lt;em&gt;Green&lt;/em&gt; servers answers an error code on :8080/, we will alert you by email and &lt;em&gt;Blue&lt;/em&gt; will remain the production server.&lt;/p&gt;
&lt;p&gt;Next time you push code a new &lt;em&gt;Green&lt;/em&gt; VM will be created, then a &lt;em&gt;Blue&lt;/em&gt; one, and so on.&lt;/p&gt;
&lt;p&gt;You also may see some deployments that you haven&amp;rsquo;t triggered in your logs. It is because Clever Cloud uses &amp;ldquo;Blue/Green&amp;rdquo; pattern to update VMs, either security patches or versions updates.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Cloud Storage</title>
      <link>https://stagingv6.cleverapps.io/developers/doc/best-practices/cloud-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stagingv6.cleverapps.io/developers/doc/best-practices/cloud-storage/</guid>
      <description>
        
        
        &lt;p&gt;You want to store files but you can&amp;rsquo;t decide between FS Buckets and Cellar. This article will compare them: usage, pros/cons, pricing.&lt;/p&gt;
&lt;p&gt;Clever Cloud uses immutable disposable VMs.
Every time you redeploy your application, you lose the old instances and all the files stored on their filesystems.
If you want to avoid that, you have to store your important files outside of your instances.&lt;/p&gt;
&lt;p&gt;Cellar and FS Buckets both allow you to store files outside of your instances for later use. But there are some differences between them.&lt;/p&gt;





  












&lt;div class=&#34;hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200&#34;&gt;
  &lt;div class=&#34;ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2&#34;&gt;&lt;div class=&#34;hx-select-none hx-text-xl&#34; style=&#34;font-family: &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;;&#34;&gt;
        ℹ️
      &lt;/div&gt;&lt;/div&gt;

  &lt;div class=&#34;hx-w-full hx-min-w-0 hx-leading-7&#34;&gt;
    &lt;div class=&#34;hx-mt-6 hx-leading-7 first:hx-mt-0&#34;&gt;
      If you are coding a new project and need to store files, use Cellar. It will be cheaper and give you way more flexibility. If your want to run a WordPress site or some OSS PHP application and are in a hurry, you may not get to choose: use FS Buckets.
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;What is FS Bucket?&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;what-is-fs-bucket&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#what-is-fs-bucket&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Configuring FS Buckets in your application will give you a folder &lt;em&gt;in your filesystem&lt;/em&gt;. This folder is shared between instances/applications. It&amp;rsquo;s mounted over the network. As for any network filesystem there are upsides and downsides.&lt;/p&gt;
&lt;h3&gt;Upsides of FS Bucket&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;upsides-of-fs-bucket&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#upsides-of-fs-bucket&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If your application manages files on a filesystem, you don&amp;rsquo;t have to change anything.
Just setup your FS Bucket to mount on a given folder, setup your application to write in that folder and you are good to go!&lt;/p&gt;
&lt;p&gt;Since the folder is mounted over the network, multiple instances/applications can read it like any file on the system. At the same time.&lt;/p&gt;
&lt;h3&gt;Downsides of FS Bucket&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;downsides-of-fs-bucket&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#downsides-of-fs-bucket&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Since it&amp;rsquo;s a file on a filesystem, you can be tempted to store a SQLite (or equivalent) database in it. This would be wrong.
If many instances try to write in it at the same time, you might end up with a corrupted database.&lt;/p&gt;
&lt;p&gt;For the same reason, anything accessing a file in write at the same time might corrupt the data you put in it.&lt;/p&gt;
&lt;h2&gt;What is Cellar?&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;what-is-cellar&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#what-is-cellar&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Cellar is an Amazon S3 API implementation using &lt;a href=&#34;https://ceph.com/ceph-storage/object-storage/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ceph Rados Gateway&lt;/a&gt;.
It provides an HTTP API that can be used with any S3 API Client.
Clients exist for a lot of languages.
You can use any S3 Client, from the official Amazon ones to the community ones.&lt;/p&gt;
&lt;p&gt;If you already use S3, you will be in your element.&lt;/p&gt;
&lt;p&gt;To store a file, issue a PUT HTTP request to Cellar&amp;rsquo;s API.
To get a file, issue a GET request to the API.
You need secret and public keys to authenticate your requests.
You can manage ACLs and generate signed URLs with an expiration date.&lt;/p&gt;
&lt;h3&gt;Upsides of Cellar&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;upsides-of-cellar&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#upsides-of-cellar&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can move the file uploads to your client entirely.
Just give it a temporary signed URL (generated by your backend) and it will be able to upload directly to Cellar.
That way, you don&amp;rsquo;t have to handle the receive-and-upload part on the server side.&lt;/p&gt;
&lt;p&gt;Your files are stored in a secure way outside of your apps FS. So an attacker will have a harder time to find it.&lt;/p&gt;
&lt;p&gt;You can delegate the authorization part to Cellar by giving signed urls for file downloads and uploads.&lt;/p&gt;
&lt;p&gt;The files are stored with a replication factor of 3, meaning that there are 2 replicas in addition of the original data.&lt;/p&gt;
&lt;h3&gt;Downsides of Cellar&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;downsides-of-cellar&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#downsides-of-cellar&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When deploying an application you did not write, file uploads may already be developed using local files. Like in WordPress, PrestaShop, etc. So you would have to use plugins or hack it to upload to Cellar.&lt;/p&gt;
&lt;h2&gt;What should I choose?&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;what-should-i-choose&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#what-should-i-choose&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Well, you read the upsides and downsides of both.
You may understand where our preference goes, by now!
If you can, use Cellar.
S3 Client library exist in almost all languages.
It&amp;rsquo;s &lt;a href=&#34;https://stagingv6.cleverapps.io/developers/doc/addons/cellar/&#34; &gt;cheaper&lt;/a&gt;.
It&amp;rsquo;s more resilient to hardware failures.
It gives you free processing power: when using files on your filesystem, you have to process them yourself.
When using Cellar, you can delegate the handling of the upload to Cellar itself.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t have a choice, use whatever you have to use.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Cloud Storage</title>
      <link>https://stagingv6.cleverapps.io/developers/doc/develop/best-practices/cloud-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stagingv6.cleverapps.io/developers/doc/develop/best-practices/cloud-storage/</guid>
      <description>
        
        
        &lt;p&gt;You want to store files but you can&amp;rsquo;t decide between FS Buckets and Cellar. This article will compare them: usage, pros/cons, pricing.&lt;/p&gt;
&lt;p&gt;Clever Cloud uses immutable disposable VMs.
Every time you redeploy your application, you lose the old instances and all the files stored on their filesystems.
If you want to avoid that, you have to store your important files outside of your instances.&lt;/p&gt;
&lt;p&gt;Cellar and FS Buckets both allow you to store files outside of your instances for later use. But there are some differences between them.&lt;/p&gt;





  












&lt;div class=&#34;hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200&#34;&gt;
  &lt;div class=&#34;ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2&#34;&gt;&lt;div class=&#34;hx-select-none hx-text-xl&#34; style=&#34;font-family: &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;;&#34;&gt;
        ℹ️
      &lt;/div&gt;&lt;/div&gt;

  &lt;div class=&#34;hx-w-full hx-min-w-0 hx-leading-7&#34;&gt;
    &lt;div class=&#34;hx-mt-6 hx-leading-7 first:hx-mt-0&#34;&gt;
      &lt;p&gt;If you are coding a new project and need to store files, use Cellar. It will be cheaper and give you way more flexibility.&lt;/p&gt;
&lt;p&gt;If your want to run a WordPress site or some OSS PHP application and are in a hurry, you may not get to choose: use FS Buckets.&lt;/p&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;What is FS Bucket?&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;what-is-fs-bucket&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#what-is-fs-bucket&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Configuring FS Buckets in your application will give you a folder &lt;em&gt;in your filesystem&lt;/em&gt;. This folder is shared between instances/applications. It&amp;rsquo;s mounted over the network. As for any network filesystem there are upsides and downsides.&lt;/p&gt;
&lt;h3&gt;Upsides&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;upsides&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#upsides&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If your application manages files on a filesystem, you don&amp;rsquo;t have to change anything.
Just setup your FS Bucket to mount on a given folder, setup your application to write in that folder and you are good to go!&lt;/p&gt;
&lt;p&gt;Since the folder is mounted over the network, multiple instances/applications can read it like any file on the system. At the same time.&lt;/p&gt;
&lt;h3&gt;Downsides&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;downsides&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#downsides&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Since it&amp;rsquo;s a file on a filesystem, you can be tempted to store a SQLite (or equivalent) database in it. This would be wrong.
If many instances try to write in it at the same time, you might end up with a corrupted database.&lt;/p&gt;
&lt;p&gt;For the same reason, anything accessing a file in write at the same time might corrupt the data you put in it.&lt;/p&gt;
&lt;h2&gt;What is Cellar?&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;what-is-cellar&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#what-is-cellar&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Cellar is an Amazon S3 API implementation using &lt;a href=&#34;https://ceph.com/ceph-storage/object-storage/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ceph Rados Gateway&lt;/a&gt;.
It provides an HTTP API that can be used with any S3 API Client.
Clients exist for a lot of languages.
You can use any S3 Client, from the official Amazon ones to the community ones.&lt;/p&gt;
&lt;p&gt;If you already use S3, you will be in your element.&lt;/p&gt;
&lt;p&gt;To store a file, issue a PUT HTTP request to Cellar&amp;rsquo;s API.
To get a file, issue a GET request to the API.
You need secret and public keys to authenticate your requests.
You can manage ACLs and generate signed URLs with an expiration date.&lt;/p&gt;
&lt;h3&gt;Upsides of Cellar&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;upsides-of-cellar&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#upsides-of-cellar&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can move the file uploads to your client entirely.
Just give it a temporary signed URL (generated by your backend) and it will be able to upload directly to Cellar.
That way, you don&amp;rsquo;t have to handle the receive-and-upload part on the server side.&lt;/p&gt;
&lt;p&gt;Your files are stored in a secure way outside of your apps FS. So an attacker will have a harder time to find it.&lt;/p&gt;
&lt;p&gt;You can delegate the authorization part to Cellar by giving signed urls for file downloads and uploads.&lt;/p&gt;
&lt;p&gt;The files are stored with a replication factor of 3, meaning that there are 2 replicas in addition of the original data.&lt;/p&gt;
&lt;h3&gt;Downsides of Cellar&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;downsides-of-cellar&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#downsides-of-cellar&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When deploying an application you did not write, file uploads may already be developed using local files. Like in WordPress, PrestaShop, etc. So you would have to use plugins or hack it to upload to Cellar.&lt;/p&gt;
&lt;h2&gt;What should I choose?&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;what-should-i-choose&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#what-should-i-choose&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Well, you read the upsides and downsides of both.
You may understand where our preference goes, by now!
If you can, use Cellar.
S3 Client library exist in almost all languages.
It&amp;rsquo;s &lt;a href=&#34;https://stagingv6.cleverapps.io/developers/doc/addons/cellar/&#34; &gt;cheaper&lt;/a&gt;.
It&amp;rsquo;s more resilient to hardware failures.
It gives you free processing power: when using files on your filesystem, you have to process them yourself.
When using Cellar, you can delegate the handling of the upload to Cellar itself.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t have a choice, use whatever you have to use.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Load testing</title>
      <link>https://stagingv6.cleverapps.io/developers/doc/best-practices/load-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stagingv6.cleverapps.io/developers/doc/best-practices/load-testing/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Performing a performance test is the best way to determine how your application will perform under heavy load.&lt;/p&gt;
&lt;p&gt;In general, these tests make it possible to identify:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the maximum number of concurrent users&lt;/li&gt;
&lt;li&gt;whether the current resources are sufficient to operate your application in good conditions&lt;/li&gt;
&lt;li&gt;and the maximum operational capacity of your application&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Considerations to take into account&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;considerations-to-take-into-account&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#considerations-to-take-into-account&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the event that you use public front-ends, it is necessary to notify the support. Indeed, depending on the nature of the load, it is possible that a form of network blocking is performed by our teams if they are not notified.&lt;/p&gt;
&lt;p&gt;In case you have dedicated frontends, note that too much load could impact your other applications behind this frontend. Because in general, the amount of private front-ends is lower than the number of public front-ends (new public front-ends are added on a regular basis).&lt;/p&gt;
&lt;h2&gt;Why carry out these tests&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;why-carry-out-these-tests&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#why-carry-out-these-tests&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Performing these tests will allow you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to have perspective on the performance and stability of your infrastructure.&lt;/li&gt;
&lt;li&gt;to be able to identify bottlenecks in particular stress scenarios&lt;/li&gt;
&lt;li&gt;to identify and remove any weaknesses in architectures via supervision and performance management strategies and increase scalability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The determining elements are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The response time of your transactions (poorly optimized requests, etc.)&lt;/li&gt;
&lt;li&gt;The performance of the application (single-threaded application, expectations of external services, generation of logs in a file, etc.)&lt;/li&gt;
&lt;li&gt;The performance of managed services such as databases (lack of indexes, unnecessary iterations, etc.)&lt;/li&gt;
&lt;li&gt;Software design in general&lt;/li&gt;
&lt;li&gt;Hardware limitations such as CPU, RAM, network, etc.&lt;/li&gt;
&lt;li&gt;bad middleware configurations (databases, server, etc.)&lt;/li&gt;
&lt;li&gt;The response time between the client and the application&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Online and local load tools&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;online-and-local-load-tools&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#online-and-local-load-tools&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Choosing a load-testing solution will depend on several factors. If simplicity and speed are the most important factors, online tools are the most appropriate. On the other hand, if you have to test particular protocols, and have fine configuration options via a little programming / scripting and for a lower cost,  you may want to use dedicated, local solutions.&lt;/p&gt;
&lt;h3&gt;Online&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;online&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#online&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Online services are available to perform your tests. Most offer typical user journey scenarios to allow you to simulate a user:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://k6.io/cloud&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;K6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://octoperf.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Octoperf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://loader.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Loader.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Local, with open-source alternatives&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;local-with-open-source-alternatives&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#local-with-open-source-alternatives&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Some open source services to be installed on an infrastructure (workstation or IaaS in the best case) are also available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gatling.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gatling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fcsonline/drill&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Drill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://locust.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Locust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jmeter.apache.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jmeter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Load testing</title>
      <link>https://stagingv6.cleverapps.io/developers/doc/develop/best-practices/load-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stagingv6.cleverapps.io/developers/doc/develop/best-practices/load-testing/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Performing a performance test is the best way to determine how your application will perform under heavy load.&lt;/p&gt;
&lt;p&gt;In general, these tests make it possible to identify:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the maximum number of concurrent users&lt;/li&gt;
&lt;li&gt;whether the current resources are sufficient to operate your application in good conditions&lt;/li&gt;
&lt;li&gt;and the maximum operational capacity of your application&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Considerations to take into account&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;considerations-to-take-into-account&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#considerations-to-take-into-account&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the event that you use public front-ends, it is necessary to notify the support. Indeed, depending on the nature of the load, it is possible that a form of network blocking is performed by our teams if they are not notified.&lt;/p&gt;
&lt;p&gt;In case you have dedicated frontends, note that too much load could impact your other applications behind this frontend. Because in general, the amount of private front-ends is lower than the number of public front-ends (new public front-ends are added on a regular basis).&lt;/p&gt;
&lt;h2&gt;Why carry out these tests&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;why-carry-out-these-tests&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#why-carry-out-these-tests&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Performing these tests will allow you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to have perspective on the performance and stability of your infrastructure.&lt;/li&gt;
&lt;li&gt;to be able to identify bottlenecks in particular stress scenarios&lt;/li&gt;
&lt;li&gt;to identify and remove any weaknesses in architectures via supervision and performance management strategies and increase scalability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The determining elements are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The response time of your transactions (poorly optimized requests, etc.)&lt;/li&gt;
&lt;li&gt;The performance of the application (single-threaded application, expectations of external services, generation of logs in a file, etc.)&lt;/li&gt;
&lt;li&gt;The performance of managed services such as databases (lack of indexes, unnecessary iterations, etc.)&lt;/li&gt;
&lt;li&gt;Software design in general&lt;/li&gt;
&lt;li&gt;Hardware limitations such as CPU, RAM, network, etc.&lt;/li&gt;
&lt;li&gt;bad middleware configurations (databases, server, etc.)&lt;/li&gt;
&lt;li&gt;The response time between the client and the application&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Online and local load tools&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;online-and-local-load-tools&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#online-and-local-load-tools&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Choosing a load-testing solution will depend on several factors. If simplicity and speed are the most important factors, online tools are the most appropriate. On the other hand, if you have to test particular protocols, and have fine configuration options via a little programming / scripting and for a lower cost,  you may want to use dedicated, local solutions.&lt;/p&gt;
&lt;h3&gt;Online&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;online&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#online&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Online services are available to perform your tests. Most offer typical user journey scenarios to allow you to simulate a user:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://k6.io/cloud&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;K6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://octoperf.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Octoperf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://loader.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Loader.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Local, with open-source alternatives&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;local-with-open-source-alternatives&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#local-with-open-source-alternatives&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Some open source services to be installed on an infrastructure (workstation or IaaS in the best case) are also available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gatling.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gatling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fcsonline/drill&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Drill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://locust.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Locust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jmeter.apache.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jmeter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>The Twelve-Factor App</title>
      <link>https://stagingv6.cleverapps.io/developers/doc/best-practices/12-factors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stagingv6.cleverapps.io/developers/doc/best-practices/12-factors/</guid>
      <description>
        
        
        &lt;p&gt;The twelve-factor app is a methodology for writing software delivered as a service, which is what you are doing by pushing your code to Clever Cloud and for container deployment in general. By writing code following these principles, your application will be cloud ready by design.&lt;/p&gt;
&lt;p&gt;As a lot has already been written on the subject, we strongly recommend that you read some of the following links to begin with this methodology:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Twelve-Factor_App_methodology&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://en.wikipedia.org/wiki/Twelve-Factor_App_methodology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.clearlytech.com/2014/01/04/12-factor-apps-plain-english/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.clearlytech.com/2014/01/04/12-factor-apps-plain-english/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://12factor.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://12factor.net/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy learning !&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>The Twelve-Factor App</title>
      <link>https://stagingv6.cleverapps.io/developers/doc/develop/best-practices/12-factors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stagingv6.cleverapps.io/developers/doc/develop/best-practices/12-factors/</guid>
      <description>
        
        
        &lt;p&gt;The twelve-factor app is a methodology for writing software delivered as a service, which is what you are doing by pushing your code to Clever Cloud and for container deployment in general. By writing code following these principles, your application will be cloud ready by design.&lt;/p&gt;
&lt;p&gt;As a lot has already been written on the subject, we strongly recommend that you read some of the following links to begin with this methodology:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Twelve-Factor_App_methodology&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://en.wikipedia.org/wiki/Twelve-Factor_App_methodology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.clearlytech.com/2014/01/04/12-factor-apps-plain-english/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.clearlytech.com/2014/01/04/12-factor-apps-plain-english/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://12factor.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://12factor.net/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy learning !&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
